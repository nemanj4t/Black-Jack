{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Dealer.js","webpack:///./src/Player.js","webpack:///./src/Game.js","webpack:///./src/index.js","webpack:///./node_modules/rxjs/Observable.js","webpack:///./node_modules/rxjs/Subscriber.js","webpack:///./node_modules/rxjs/util/subscribeToResult.js","webpack:///./node_modules/rxjs/OuterSubscriber.js","webpack:///./node_modules/rxjs/scheduler/async.js","webpack:///./node_modules/rxjs/Subscription.js","webpack:///./node_modules/rxjs/util/errorObject.js","webpack:///./node_modules/rxjs/Subject.js","webpack:///./node_modules/rxjs/util/tryCatch.js","webpack:///./node_modules/rxjs/util/root.js","webpack:///./node_modules/rxjs/util/isScheduler.js","webpack:///./node_modules/rxjs/util/isArray.js","webpack:///./node_modules/rxjs/observable/EmptyObservable.js","webpack:///./node_modules/rxjs/observable/ArrayObservable.js","webpack:///./node_modules/rxjs/operators/multicast.js","webpack:///./node_modules/rxjs/operators/reduce.js","webpack:///./node_modules/rxjs/util/ArgumentOutOfRangeError.js","webpack:///./node_modules/rxjs/operators/map.js","webpack:///./node_modules/rxjs/scheduler/AsyncScheduler.js","webpack:///./node_modules/rxjs/scheduler/AsyncAction.js","webpack:///./node_modules/rxjs/util/isNumeric.js","webpack:///./node_modules/rxjs/operators/mergeMap.js","webpack:///./node_modules/rxjs/Notification.js","webpack:///./node_modules/rxjs/observable/concat.js","webpack:///./node_modules/rxjs/symbol/iterator.js","webpack:///./node_modules/rxjs/operators/throttle.js","webpack:///./node_modules/rxjs/util/EmptyError.js","webpack:///./node_modules/rxjs/ReplaySubject.js","webpack:///./node_modules/rxjs/operators/zip.js","webpack:///./node_modules/rxjs/util/isDate.js","webpack:///./node_modules/rxjs/observable/merge.js","webpack:///./node_modules/rxjs/operators/mergeAll.js","webpack:///./node_modules/rxjs/operators/observeOn.js","webpack:///./node_modules/rxjs/operators/combineLatest.js","webpack:///./node_modules/rxjs/AsyncSubject.js","webpack:///./node_modules/rxjs/util/ObjectUnsubscribedError.js","webpack:///./node_modules/rxjs/symbol/observable.js","webpack:///./node_modules/rxjs/symbol/rxSubscriber.js","webpack:///./node_modules/rxjs/util/isFunction.js","webpack:///./node_modules/rxjs/operators/timestamp.js","webpack:///./node_modules/rxjs/operators/switchMap.js","webpack:///./node_modules/rxjs/operators/refCount.js","webpack:///./node_modules/rxjs/operators/takeLast.js","webpack:///./node_modules/rxjs/operators/scan.js","webpack:///./node_modules/rxjs/operators/audit.js","webpack:///./node_modules/rxjs/operators/find.js","webpack:///./node_modules/rxjs/operators/filter.js","webpack:///./node_modules/rxjs/operators/distinctUntilChanged.js","webpack:///./node_modules/rxjs/operators/defaultIfEmpty.js","webpack:///./node_modules/rxjs/operators/concatMap.js","webpack:///./node_modules/rxjs/operators/onErrorResumeNext.js","webpack:///./node_modules/rxjs/observable/race.js","webpack:///./node_modules/rxjs/operators/concatAll.js","webpack:///./node_modules/rxjs/observable/ScalarObservable.js","webpack:///./node_modules/rxjs/util/noop.js","webpack:///./node_modules/rxjs/util/pipe.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/rxjs/scheduler/VirtualTimeScheduler.js","webpack:///./node_modules/rxjs/util/applyMixins.js","webpack:///./node_modules/rxjs/testing/SubscriptionLog.js","webpack:///./node_modules/rxjs/testing/SubscriptionLoggable.js","webpack:///./node_modules/rxjs/operators/zipAll.js","webpack:///./node_modules/rxjs/operators/withLatestFrom.js","webpack:///./node_modules/rxjs/operators/windowWhen.js","webpack:///./node_modules/rxjs/operators/windowToggle.js","webpack:///./node_modules/rxjs/operators/windowTime.js","webpack:///./node_modules/rxjs/operators/windowCount.js","webpack:///./node_modules/rxjs/operators/window.js","webpack:///./node_modules/rxjs/operators/toArray.js","webpack:///./node_modules/rxjs/operators/timeoutWith.js","webpack:///./node_modules/rxjs/util/TimeoutError.js","webpack:///./node_modules/rxjs/operators/timeout.js","webpack:///./node_modules/rxjs/operators/timeInterval.js","webpack:///./node_modules/rxjs/operator/timeInterval.js","webpack:///./node_modules/rxjs/operators/throttleTime.js","webpack:///./node_modules/rxjs/operators/takeWhile.js","webpack:///./node_modules/rxjs/operators/takeUntil.js","webpack:///./node_modules/rxjs/operators/take.js","webpack:///./node_modules/rxjs/operators/switchMapTo.js","webpack:///./node_modules/rxjs/operators/switchAll.js","webpack:///./node_modules/timers-browserify/main.js","webpack:///./node_modules/rxjs/scheduler/asap.js","webpack:///./node_modules/rxjs/operators/startWith.js","webpack:///./node_modules/rxjs/operators/skipWhile.js","webpack:///./node_modules/rxjs/operators/skipUntil.js","webpack:///./node_modules/rxjs/operators/skipLast.js","webpack:///./node_modules/rxjs/operators/skip.js","webpack:///./node_modules/rxjs/operators/single.js","webpack:///./node_modules/rxjs/operators/shareReplay.js","webpack:///./node_modules/rxjs/operators/share.js","webpack:///./node_modules/rxjs/operators/sequenceEqual.js","webpack:///./node_modules/rxjs/operators/sampleTime.js","webpack:///./node_modules/rxjs/operators/sample.js","webpack:///./node_modules/rxjs/operators/retryWhen.js","webpack:///./node_modules/rxjs/operators/retry.js","webpack:///./node_modules/rxjs/operators/repeatWhen.js","webpack:///./node_modules/rxjs/operators/repeat.js","webpack:///./node_modules/rxjs/operators/race.js","webpack:///./node_modules/rxjs/operators/publishLast.js","webpack:///./node_modules/rxjs/operators/publishReplay.js","webpack:///./node_modules/rxjs/BehaviorSubject.js","webpack:///./node_modules/rxjs/operators/publishBehavior.js","webpack:///./node_modules/rxjs/operators/publish.js","webpack:///./node_modules/rxjs/operators/pluck.js","webpack:///./node_modules/rxjs/operators/partition.js","webpack:///./node_modules/rxjs/operators/pairwise.js","webpack:///./node_modules/rxjs/observable/ConnectableObservable.js","webpack:///./node_modules/rxjs/operators/min.js","webpack:///./node_modules/rxjs/operators/mergeScan.js","webpack:///./node_modules/rxjs/operators/mergeMapTo.js","webpack:///./node_modules/rxjs/operators/merge.js","webpack:///./node_modules/rxjs/operators/max.js","webpack:///./node_modules/rxjs/operators/materialize.js","webpack:///./node_modules/rxjs/operators/mapTo.js","webpack:///./node_modules/rxjs/operators/every.js","webpack:///./node_modules/rxjs/operators/last.js","webpack:///./node_modules/rxjs/operators/auditTime.js","webpack:///./node_modules/rxjs/operators/isEmpty.js","webpack:///./node_modules/rxjs/operators/ignoreElements.js","webpack:///./node_modules/rxjs/operators/groupBy.js","webpack:///./node_modules/rxjs/operators/first.js","webpack:///./node_modules/rxjs/operators/findIndex.js","webpack:///./node_modules/rxjs/operators/finalize.js","webpack:///./node_modules/rxjs/operators/elementAt.js","webpack:///./node_modules/rxjs/operators/expand.js","webpack:///./node_modules/rxjs/operators/exhaustMap.js","webpack:///./node_modules/rxjs/operators/exhaust.js","webpack:///./node_modules/rxjs/operators/tap.js","webpack:///./node_modules/rxjs/operators/distinctUntilKeyChanged.js","webpack:///./node_modules/rxjs/operators/distinct.js","webpack:///./node_modules/rxjs/operators/delayWhen.js","webpack:///./node_modules/rxjs/operators/delay.js","webpack:///./node_modules/rxjs/operators/debounceTime.js","webpack:///./node_modules/rxjs/operators/debounce.js","webpack:///./node_modules/rxjs/operators/dematerialize.js","webpack:///./node_modules/rxjs/operators/count.js","webpack:///./node_modules/rxjs/operators/concatMapTo.js","webpack:///./node_modules/rxjs/operators/concat.js","webpack:///./node_modules/rxjs/operators/combineAll.js","webpack:///./node_modules/rxjs/operators/catchError.js","webpack:///./node_modules/rxjs/operators/bufferWhen.js","webpack:///./node_modules/rxjs/operators/bufferToggle.js","webpack:///./node_modules/rxjs/operators/bufferTime.js","webpack:///./node_modules/rxjs/operators/bufferCount.js","webpack:///./node_modules/rxjs/operators/buffer.js","webpack:///./node_modules/rxjs/scheduler/queue.js","webpack:///./node_modules/rxjs/observable/dom/AjaxObservable.js","webpack:///./node_modules/rxjs/observable/timer.js","webpack:///./node_modules/rxjs/util/identity.js","webpack:///./node_modules/rxjs/observable/PromiseObservable.js","webpack:///./node_modules/rxjs/observable/FromObservable.js","webpack:///./node_modules/rxjs/observable/from.js","webpack:///./node_modules/rxjs/observable/of.js","webpack:///./node_modules/rxjs/util/isPromise.js","webpack:///./node_modules/rxjs/util/isArrayLike.js","webpack:///./node_modules/rxjs/SubjectSubscription.js","webpack:///./node_modules/rxjs/Observer.js","webpack:///./node_modules/rxjs/util/UnsubscriptionError.js","webpack:///./node_modules/rxjs/util/isObject.js","webpack:///./node_modules/rxjs/operators.js","webpack:///./node_modules/rxjs/scheduler/AnimationFrameScheduler.js","webpack:///./node_modules/rxjs/util/AnimationFrame.js","webpack:///./node_modules/rxjs/scheduler/AnimationFrameAction.js","webpack:///./node_modules/rxjs/scheduler/animationFrame.js","webpack:///./node_modules/rxjs/testing/HotObservable.js","webpack:///./node_modules/rxjs/testing/ColdObservable.js","webpack:///./node_modules/rxjs/testing/TestScheduler.js","webpack:///./node_modules/rxjs/operator/zipAll.js","webpack:///./node_modules/rxjs/add/operator/zipAll.js","webpack:///./node_modules/rxjs/operator/zip.js","webpack:///./node_modules/rxjs/add/operator/zip.js","webpack:///./node_modules/rxjs/operator/withLatestFrom.js","webpack:///./node_modules/rxjs/add/operator/withLatestFrom.js","webpack:///./node_modules/rxjs/operator/windowWhen.js","webpack:///./node_modules/rxjs/add/operator/windowWhen.js","webpack:///./node_modules/rxjs/operator/windowToggle.js","webpack:///./node_modules/rxjs/add/operator/windowToggle.js","webpack:///./node_modules/rxjs/operator/windowTime.js","webpack:///./node_modules/rxjs/add/operator/windowTime.js","webpack:///./node_modules/rxjs/operator/windowCount.js","webpack:///./node_modules/rxjs/add/operator/windowCount.js","webpack:///./node_modules/rxjs/operator/window.js","webpack:///./node_modules/rxjs/add/operator/window.js","webpack:///./node_modules/rxjs/operator/toArray.js","webpack:///./node_modules/rxjs/add/operator/toArray.js","webpack:///./node_modules/rxjs/operator/timestamp.js","webpack:///./node_modules/rxjs/add/operator/timestamp.js","webpack:///./node_modules/rxjs/operator/timeoutWith.js","webpack:///./node_modules/rxjs/add/operator/timeoutWith.js","webpack:///./node_modules/rxjs/operator/timeout.js","webpack:///./node_modules/rxjs/add/operator/timeout.js","webpack:///./node_modules/rxjs/add/operator/timeInterval.js","webpack:///./node_modules/rxjs/operator/throttleTime.js","webpack:///./node_modules/rxjs/add/operator/throttleTime.js","webpack:///./node_modules/rxjs/operator/throttle.js","webpack:///./node_modules/rxjs/add/operator/throttle.js","webpack:///./node_modules/rxjs/operator/takeWhile.js","webpack:///./node_modules/rxjs/add/operator/takeWhile.js","webpack:///./node_modules/rxjs/operator/takeUntil.js","webpack:///./node_modules/rxjs/add/operator/takeUntil.js","webpack:///./node_modules/rxjs/operator/takeLast.js","webpack:///./node_modules/rxjs/add/operator/takeLast.js","webpack:///./node_modules/rxjs/operator/take.js","webpack:///./node_modules/rxjs/add/operator/take.js","webpack:///./node_modules/rxjs/operator/switchMapTo.js","webpack:///./node_modules/rxjs/add/operator/switchMapTo.js","webpack:///./node_modules/rxjs/operator/switchMap.js","webpack:///./node_modules/rxjs/add/operator/switchMap.js","webpack:///./node_modules/rxjs/operator/switch.js","webpack:///./node_modules/rxjs/add/operator/switch.js","webpack:///./node_modules/rxjs/scheduler/AsapScheduler.js","webpack:///./node_modules/process/browser.js","webpack:///./node_modules/setimmediate/setImmediate.js","webpack:///./node_modules/rxjs/util/Immediate.js","webpack:///./node_modules/rxjs/scheduler/AsapAction.js","webpack:///./node_modules/rxjs/observable/SubscribeOnObservable.js","webpack:///./node_modules/rxjs/operators/subscribeOn.js","webpack:///./node_modules/rxjs/operator/subscribeOn.js","webpack:///./node_modules/rxjs/add/operator/subscribeOn.js","webpack:///./node_modules/rxjs/operator/startWith.js","webpack:///./node_modules/rxjs/add/operator/startWith.js","webpack:///./node_modules/rxjs/operator/skipWhile.js","webpack:///./node_modules/rxjs/add/operator/skipWhile.js","webpack:///./node_modules/rxjs/operator/skipUntil.js","webpack:///./node_modules/rxjs/add/operator/skipUntil.js","webpack:///./node_modules/rxjs/operator/skipLast.js","webpack:///./node_modules/rxjs/add/operator/skipLast.js","webpack:///./node_modules/rxjs/operator/skip.js","webpack:///./node_modules/rxjs/add/operator/skip.js","webpack:///./node_modules/rxjs/operator/single.js","webpack:///./node_modules/rxjs/add/operator/single.js","webpack:///./node_modules/rxjs/operator/shareReplay.js","webpack:///./node_modules/rxjs/add/operator/shareReplay.js","webpack:///./node_modules/rxjs/operator/share.js","webpack:///./node_modules/rxjs/add/operator/share.js","webpack:///./node_modules/rxjs/operator/sequenceEqual.js","webpack:///./node_modules/rxjs/add/operator/sequenceEqual.js","webpack:///./node_modules/rxjs/operator/scan.js","webpack:///./node_modules/rxjs/add/operator/scan.js","webpack:///./node_modules/rxjs/operator/sampleTime.js","webpack:///./node_modules/rxjs/add/operator/sampleTime.js","webpack:///./node_modules/rxjs/operator/sample.js","webpack:///./node_modules/rxjs/add/operator/sample.js","webpack:///./node_modules/rxjs/operator/retryWhen.js","webpack:///./node_modules/rxjs/add/operator/retryWhen.js","webpack:///./node_modules/rxjs/operator/retry.js","webpack:///./node_modules/rxjs/add/operator/retry.js","webpack:///./node_modules/rxjs/operator/repeatWhen.js","webpack:///./node_modules/rxjs/add/operator/repeatWhen.js","webpack:///./node_modules/rxjs/operator/repeat.js","webpack:///./node_modules/rxjs/add/operator/repeat.js","webpack:///./node_modules/rxjs/operator/reduce.js","webpack:///./node_modules/rxjs/add/operator/reduce.js","webpack:///./node_modules/rxjs/operator/race.js","webpack:///./node_modules/rxjs/add/operator/race.js","webpack:///./node_modules/rxjs/operator/publishLast.js","webpack:///./node_modules/rxjs/add/operator/publishLast.js","webpack:///./node_modules/rxjs/operator/publishReplay.js","webpack:///./node_modules/rxjs/add/operator/publishReplay.js","webpack:///./node_modules/rxjs/operator/publishBehavior.js","webpack:///./node_modules/rxjs/add/operator/publishBehavior.js","webpack:///./node_modules/rxjs/operator/publish.js","webpack:///./node_modules/rxjs/add/operator/publish.js","webpack:///./node_modules/rxjs/operator/pluck.js","webpack:///./node_modules/rxjs/add/operator/pluck.js","webpack:///./node_modules/rxjs/util/not.js","webpack:///./node_modules/rxjs/operator/partition.js","webpack:///./node_modules/rxjs/add/operator/partition.js","webpack:///./node_modules/rxjs/operator/pairwise.js","webpack:///./node_modules/rxjs/add/operator/pairwise.js","webpack:///./node_modules/rxjs/operator/onErrorResumeNext.js","webpack:///./node_modules/rxjs/add/operator/onErrorResumeNext.js","webpack:///./node_modules/rxjs/operator/observeOn.js","webpack:///./node_modules/rxjs/add/operator/observeOn.js","webpack:///./node_modules/rxjs/operator/multicast.js","webpack:///./node_modules/rxjs/add/operator/multicast.js","webpack:///./node_modules/rxjs/operator/min.js","webpack:///./node_modules/rxjs/add/operator/min.js","webpack:///./node_modules/rxjs/operator/mergeScan.js","webpack:///./node_modules/rxjs/add/operator/mergeScan.js","webpack:///./node_modules/rxjs/operator/mergeMapTo.js","webpack:///./node_modules/rxjs/add/operator/mergeMapTo.js","webpack:///./node_modules/rxjs/operator/mergeMap.js","webpack:///./node_modules/rxjs/add/operator/mergeMap.js","webpack:///./node_modules/rxjs/operator/mergeAll.js","webpack:///./node_modules/rxjs/add/operator/mergeAll.js","webpack:///./node_modules/rxjs/operator/merge.js","webpack:///./node_modules/rxjs/add/operator/merge.js","webpack:///./node_modules/rxjs/operator/max.js","webpack:///./node_modules/rxjs/add/operator/max.js","webpack:///./node_modules/rxjs/operator/materialize.js","webpack:///./node_modules/rxjs/add/operator/materialize.js","webpack:///./node_modules/rxjs/operator/mapTo.js","webpack:///./node_modules/rxjs/add/operator/mapTo.js","webpack:///./node_modules/rxjs/operator/map.js","webpack:///./node_modules/rxjs/add/operator/map.js","webpack:///./node_modules/rxjs/operator/every.js","webpack:///./node_modules/rxjs/add/operator/every.js","webpack:///./node_modules/rxjs/operator/let.js","webpack:///./node_modules/rxjs/add/operator/let.js","webpack:///./node_modules/rxjs/operator/last.js","webpack:///./node_modules/rxjs/add/operator/last.js","webpack:///./node_modules/rxjs/operator/auditTime.js","webpack:///./node_modules/rxjs/add/operator/auditTime.js","webpack:///./node_modules/rxjs/operator/audit.js","webpack:///./node_modules/rxjs/add/operator/audit.js","webpack:///./node_modules/rxjs/operator/isEmpty.js","webpack:///./node_modules/rxjs/add/operator/isEmpty.js","webpack:///./node_modules/rxjs/operator/ignoreElements.js","webpack:///./node_modules/rxjs/add/operator/ignoreElements.js","webpack:///./node_modules/rxjs/util/FastMap.js","webpack:///./node_modules/rxjs/util/MapPolyfill.js","webpack:///./node_modules/rxjs/util/Map.js","webpack:///./node_modules/rxjs/operator/groupBy.js","webpack:///./node_modules/rxjs/add/operator/groupBy.js","webpack:///./node_modules/rxjs/operator/first.js","webpack:///./node_modules/rxjs/add/operator/first.js","webpack:///./node_modules/rxjs/operator/findIndex.js","webpack:///./node_modules/rxjs/add/operator/findIndex.js","webpack:///./node_modules/rxjs/operator/find.js","webpack:///./node_modules/rxjs/add/operator/find.js","webpack:///./node_modules/rxjs/operator/finally.js","webpack:///./node_modules/rxjs/add/operator/finally.js","webpack:///./node_modules/rxjs/operator/filter.js","webpack:///./node_modules/rxjs/add/operator/filter.js","webpack:///./node_modules/rxjs/operator/elementAt.js","webpack:///./node_modules/rxjs/add/operator/elementAt.js","webpack:///./node_modules/rxjs/operator/expand.js","webpack:///./node_modules/rxjs/add/operator/expand.js","webpack:///./node_modules/rxjs/operator/exhaustMap.js","webpack:///./node_modules/rxjs/add/operator/exhaustMap.js","webpack:///./node_modules/rxjs/operator/exhaust.js","webpack:///./node_modules/rxjs/add/operator/exhaust.js","webpack:///./node_modules/rxjs/operator/do.js","webpack:///./node_modules/rxjs/add/operator/do.js","webpack:///./node_modules/rxjs/operator/distinctUntilKeyChanged.js","webpack:///./node_modules/rxjs/add/operator/distinctUntilKeyChanged.js","webpack:///./node_modules/rxjs/operator/distinctUntilChanged.js","webpack:///./node_modules/rxjs/add/operator/distinctUntilChanged.js","webpack:///./node_modules/rxjs/util/Set.js","webpack:///./node_modules/rxjs/operator/distinct.js","webpack:///./node_modules/rxjs/add/operator/distinct.js","webpack:///./node_modules/rxjs/operator/delayWhen.js","webpack:///./node_modules/rxjs/add/operator/delayWhen.js","webpack:///./node_modules/rxjs/operator/delay.js","webpack:///./node_modules/rxjs/add/operator/delay.js","webpack:///./node_modules/rxjs/operator/defaultIfEmpty.js","webpack:///./node_modules/rxjs/add/operator/defaultIfEmpty.js","webpack:///./node_modules/rxjs/operator/debounceTime.js","webpack:///./node_modules/rxjs/add/operator/debounceTime.js","webpack:///./node_modules/rxjs/operator/debounce.js","webpack:///./node_modules/rxjs/add/operator/debounce.js","webpack:///./node_modules/rxjs/operator/dematerialize.js","webpack:///./node_modules/rxjs/add/operator/dematerialize.js","webpack:///./node_modules/rxjs/operator/count.js","webpack:///./node_modules/rxjs/add/operator/count.js","webpack:///./node_modules/rxjs/operator/concatMapTo.js","webpack:///./node_modules/rxjs/add/operator/concatMapTo.js","webpack:///./node_modules/rxjs/operator/concatMap.js","webpack:///./node_modules/rxjs/add/operator/concatMap.js","webpack:///./node_modules/rxjs/operator/concatAll.js","webpack:///./node_modules/rxjs/add/operator/concatAll.js","webpack:///./node_modules/rxjs/operator/concat.js","webpack:///./node_modules/rxjs/add/operator/concat.js","webpack:///./node_modules/rxjs/operator/combineLatest.js","webpack:///./node_modules/rxjs/add/operator/combineLatest.js","webpack:///./node_modules/rxjs/operator/combineAll.js","webpack:///./node_modules/rxjs/add/operator/combineAll.js","webpack:///./node_modules/rxjs/operator/catch.js","webpack:///./node_modules/rxjs/add/operator/catch.js","webpack:///./node_modules/rxjs/operator/bufferWhen.js","webpack:///./node_modules/rxjs/add/operator/bufferWhen.js","webpack:///./node_modules/rxjs/operator/bufferToggle.js","webpack:///./node_modules/rxjs/add/operator/bufferToggle.js","webpack:///./node_modules/rxjs/operator/bufferTime.js","webpack:///./node_modules/rxjs/add/operator/bufferTime.js","webpack:///./node_modules/rxjs/operator/bufferCount.js","webpack:///./node_modules/rxjs/add/operator/bufferCount.js","webpack:///./node_modules/rxjs/operator/buffer.js","webpack:///./node_modules/rxjs/add/operator/buffer.js","webpack:///./node_modules/rxjs/util/assign.js","webpack:///./node_modules/rxjs/scheduler/QueueScheduler.js","webpack:///./node_modules/rxjs/scheduler/QueueAction.js","webpack:///./node_modules/rxjs/observable/dom/WebSocketSubject.js","webpack:///./node_modules/rxjs/observable/dom/webSocket.js","webpack:///./node_modules/rxjs/add/observable/dom/webSocket.js","webpack:///./node_modules/rxjs/observable/dom/ajax.js","webpack:///./node_modules/rxjs/add/observable/dom/ajax.js","webpack:///./node_modules/rxjs/observable/zip.js","webpack:///./node_modules/rxjs/add/observable/zip.js","webpack:///./node_modules/rxjs/observable/TimerObservable.js","webpack:///./node_modules/rxjs/add/observable/timer.js","webpack:///./node_modules/rxjs/observable/ErrorObservable.js","webpack:///./node_modules/rxjs/observable/throw.js","webpack:///./node_modules/rxjs/add/observable/throw.js","webpack:///./node_modules/rxjs/observable/UsingObservable.js","webpack:///./node_modules/rxjs/observable/using.js","webpack:///./node_modules/rxjs/add/observable/using.js","webpack:///./node_modules/rxjs/observable/RangeObservable.js","webpack:///./node_modules/rxjs/observable/range.js","webpack:///./node_modules/rxjs/add/observable/range.js","webpack:///./node_modules/rxjs/observable/PairsObservable.js","webpack:///./node_modules/rxjs/observable/pairs.js","webpack:///./node_modules/rxjs/add/observable/pairs.js","webpack:///./node_modules/rxjs/observable/onErrorResumeNext.js","webpack:///./node_modules/rxjs/add/observable/onErrorResumeNext.js","webpack:///./node_modules/rxjs/add/observable/of.js","webpack:///./node_modules/rxjs/observable/NeverObservable.js","webpack:///./node_modules/rxjs/observable/never.js","webpack:///./node_modules/rxjs/add/observable/never.js","webpack:///./node_modules/rxjs/add/observable/race.js","webpack:///./node_modules/rxjs/add/observable/merge.js","webpack:///./node_modules/rxjs/Scheduler.js","webpack:///./node_modules/rxjs/scheduler/Action.js","webpack:///./node_modules/rxjs/observable/IntervalObservable.js","webpack:///./node_modules/rxjs/observable/interval.js","webpack:///./node_modules/rxjs/add/observable/interval.js","webpack:///./node_modules/rxjs/observable/IfObservable.js","webpack:///./node_modules/rxjs/observable/if.js","webpack:///./node_modules/rxjs/add/observable/if.js","webpack:///./node_modules/rxjs/observable/GenerateObservable.js","webpack:///./node_modules/rxjs/observable/generate.js","webpack:///./node_modules/rxjs/add/observable/generate.js","webpack:///./node_modules/rxjs/observable/fromPromise.js","webpack:///./node_modules/rxjs/add/observable/fromPromise.js","webpack:///./node_modules/rxjs/observable/FromEventPatternObservable.js","webpack:///./node_modules/rxjs/observable/fromEventPattern.js","webpack:///./node_modules/rxjs/add/observable/fromEventPattern.js","webpack:///./node_modules/rxjs/observable/FromEventObservable.js","webpack:///./node_modules/rxjs/observable/fromEvent.js","webpack:///./node_modules/rxjs/add/observable/fromEvent.js","webpack:///./node_modules/rxjs/add/observable/from.js","webpack:///./node_modules/rxjs/observable/ForkJoinObservable.js","webpack:///./node_modules/rxjs/observable/forkJoin.js","webpack:///./node_modules/rxjs/add/observable/forkJoin.js","webpack:///./node_modules/rxjs/observable/empty.js","webpack:///./node_modules/rxjs/add/observable/empty.js","webpack:///./node_modules/rxjs/observable/DeferObservable.js","webpack:///./node_modules/rxjs/observable/defer.js","webpack:///./node_modules/rxjs/add/observable/defer.js","webpack:///./node_modules/rxjs/observable/ArrayLikeObservable.js","webpack:///./node_modules/rxjs/observable/IteratorObservable.js","webpack:///./node_modules/rxjs/add/observable/concat.js","webpack:///./node_modules/rxjs/InnerSubscriber.js","webpack:///./node_modules/rxjs/observable/combineLatest.js","webpack:///./node_modules/rxjs/add/observable/combineLatest.js","webpack:///./node_modules/rxjs/observable/BoundNodeCallbackObservable.js","webpack:///./node_modules/rxjs/observable/bindNodeCallback.js","webpack:///./node_modules/rxjs/add/observable/bindNodeCallback.js","webpack:///./node_modules/rxjs/observable/BoundCallbackObservable.js","webpack:///./node_modules/rxjs/observable/bindCallback.js","webpack:///./node_modules/rxjs/add/observable/bindCallback.js","webpack:///./node_modules/rxjs/util/toSubscriber.js","webpack:///./node_modules/rxjs/Rx.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Dealer","_classCallCheck","this","count","niz","sit","document","querySelector","idSpil","where","_this","fetch","then","res","json","data","console","log","cards","push","parseInt","karta","createElement","src","image","id","appendChild","_this2","draw","counter","setTimeout","innerHTML","_Dealer2","_Rx","Player","balance","_possibleConstructorReturn","__proto__","getPrototypeOf","bet","Game","dealer","player","deck_id","idSpila","imeDilera","div","drawCard","finish","karte","nizDealer","nizPlayer","evaluationNiz","_Rx2","default","Observable","from","subscribe","v","e","length","err","complete","nizDraw","message","playerWins","dealerWins","gameIsDraw","_this3","parent","newButton","standButton","onclick","child","parentElement","parentNode","removeChild","prepare","gameLogic","prepareToStand","sitButton","getElementById","b","querySelectorAll","forEach","element","el","prom","betIn","_this4","_loop","reset","done","hitbtn","disabled","standbtn","doublebtn","start","game","_Player","_Dealer","_Game","root_1","toSubscriber_1","observable_1","pipe_1","_isScalar","_subscribe","lift","operator","observable","source","observerOrNext","error","sink","toSubscriber","add","syncErrorThrowable","_trySubscribe","syncErrorThrown","syncErrorValue","next","PromiseCtor","root","Rx","config","Promise","Error","resolve","reject","subscription","unsubscribe","subscriber","pipe","operations","_i","arguments","pipeFromArray","toPromise","x","create","__extends","__","constructor","isFunction_1","Subscription_1","Observer_1","rxSubscriber_1","Subscriber","_super","destinationOrNext","isStopped","destination","empty","isTrustedSubscriber","trustedSubscriber","rxSubscriber","SafeSubscriber","_next","_error","_complete","closed","_unsubscribeAndRecycle","_parent","_parents","Subscription","_parentSubscriber","context","isFunction","bind","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","fn","_unsubscribe","obj","isArrayLike_1","isPromise_1","isObject_1","Observable_1","iterator_1","InnerSubscriber_1","subscribeToResult","outerSubscriber","result","outerValue","outerIndex","InnerSubscriber","isArrayLike","len","isPromise","iterator","item","obs","TypeError","msg","isObject","OuterSubscriber","apply","notifyNext","innerValue","innerIndex","innerSub","notifyError","notifyComplete","AsyncAction_1","AsyncScheduler_1","async","AsyncScheduler","AsyncAction","isArray_1","tryCatch_1","errorObject_1","UnsubscriptionError_1","_subscriptions","errors","hasErrors","index","remove","tryCatch","errorObject","UnsubscriptionError","flattenUnsubscriptionErrors","isArray","sub","concat","teardown","EMPTY","_addParent","tmp","subscriptions","subscriptionIndex","indexOf","splice","reduce","errs","Subscriber_1","ObjectUnsubscribedError_1","SubjectSubscription_1","SubjectSubscriber","Subject","observers","hasError","thrownError","subject","AnonymousSubject","ObjectUnsubscribedError","copy","slice","SubjectSubscription","asObservable","tryCatchTarget","tryCatcher","__window","window","__self","self","WorkerGlobalScope","_root","global","isScheduler","schedule","Array","EmptyObservable","scheduler","dispatch","arg","ScalarObservable_1","EmptyObservable_1","isScheduler_1","ArrayObservable","array","of","pop","ScalarObservable","state","ConnectableObservable_1","multicast","subjectOrSubjectFactory","selector","subjectFactory","MulticastOperator","connectable","connectableObservableDescriptor","scan_1","takeLast_1","defaultIfEmpty_1","accumulator","seed","scan","takeLast","defaultIfEmpty","acc","ArgumentOutOfRangeError","stack","map","project","thisArg","MapOperator","MapSubscriber","actions","active","scheduled","undefined","flush","action","execute","delay","shift","Scheduler","work","pending","recycleAsyncId","requestAsyncId","setInterval","clearInterval","_execute","errored","errorValue","Action","isNumeric","val","parseFloat","subscribeToResult_1","OuterSubscriber_1","mergeMap","resultSelector","concurrent","Number","POSITIVE_INFINITY","MergeMapOperator","observer","MergeMapSubscriber","hasCompleted","buffer","_tryNext","_innerSub","ish","_notifyResultSelector","Notification","kind","hasValue","observe","do","accept","nextOrObserver","toObservable","throw","createNext","undefinedValueNotification","createError","createComplete","completeNotification","of_1","from_1","concatAll_1","observables","concatAll","symbolIteratorPonyfill","Symbol","Set_1","Set","Map_1","Map","keys","getOwnPropertyNames","key","$$iterator","defaultThrottleConfig","leading","trailing","throttle","durationSelector","ThrottleOperator","ThrottleSubscriber","_leading","_trailing","_hasTrailingValue","throttled","_trailingValue","duration","tryDurationSelector","_sendTrailing","_a","EmptyError","Subject_1","queue_1","observeOn_1","ReplaySubject","bufferSize","windowTime","_events","_bufferSize","_windowTime","now","_getNow","ReplayEvent","_trimBufferThenGetEvents","ObserveOnSubscriber","queue","eventsCount","spliceCount","time","Math","max","ArrayObservable_1","zipStatic","ZipOperator","zip","ZipSubscriber","values","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","args","_tryProject","nextResult","isComplete","isDate","Date","isNaN","mergeAll_1","merge","last","mergeAll","mergeMap_1","identity_1","identity","Notification_1","observeOn","ObserveOnOperator","notification","scheduleMessage","ObserveOnMessage","none","combineLatest","CombineLatestOperator","CombineLatestSubscriber","toRespond","unused","oldVal","AsyncSubject","hasNext","getSymbolObservable","$$observable","for","$$rxSubscriber","async_1","map_1","timestamp","Timestamp","switchMap","SwitchMapOperator","SwitchMapSubscriber","innerSubscription","_tryNotifyNext","refCount","RefCountOperator","_refCount","refCounter","RefCountSubscriber","connection","connect","sharedConnection","_connection","ArgumentOutOfRangeError_1","TakeLastOperator","total","TakeLastSubscriber","ring","idx","hasSeed","ScanOperator","ScanSubscriber","_seed","set","audit","AuditOperator","AuditSubscriber","clearThrottle","find","predicate","FindValueOperator","yieldIndex","FindValueSubscriber","filter","FilterOperator","FilterSubscriber","distinctUntilChanged","compare","keySelector","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","hasKey","y","Boolean","defaultValue","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","isEmpty","concatMap","FromObservable_1","onErrorResumeNext","nextSources","OnErrorResumeNextOperator","onErrorResumeNextStatic","FromObservable","OnErrorResumeNextSubscriber","subscribeToNextSource","race","RaceOperator","RaceSubscriber","hasFirst","noop","noop_1","fns","input","prev","g","Function","eval","VirtualTimeScheduler","SchedulerAction","maxFrames","VirtualAction","frame","frameTimeFactor","sort","sortActions","a","applyMixins","derivedCtor","baseCtors","baseCtor","propertyKeys","j","len2","name_1","SubscriptionLog","subscribedFrame","unsubscribedFrame","SubscriptionLog_1","SubscriptionLoggable","logSubscribedFrame","logUnsubscribedFrame","subscriptionLogs","oldSubscriptionLog","zip_1","zipAll","withLatestFrom","WithLatestFromOperator","WithLatestFromSubscriber","found","windowWhen","closingSelector","WindowOperator","WindowSubscriber","openWindow","unsubscribeClosingNotification","closingNotification","prevWindow","closingNotifier","windowToggle","openings","WindowToggleOperator","WindowToggleSubscriber","contexts","openSubscription","window_1","closeWindow","inner","isNumeric_1","windowTimeSpan","windowCreationInterval","maxWindowSize","WindowTimeOperator","WindowTimeSubscriber","CountedSubject","_numberOfNextedValues","windows","closeState","creationState","dispatchWindowClose","dispatchWindowCreation","timeSpanOnlyState","dispatchWindowTimeSpanOnly","numberOfNextedValues","window_2","timeSpanState","windowCount","windowSize","startWindowEvery","WindowCountOperator","WindowCountSubscriber","windowBoundaries","windowSubscriber","sourceSubscription","newWindow","reduce_1","toArrayReducer","arr","toArray","isDate_1","timeoutWith","due","withObservable","absoluteTimeout","waitFor","abs","TimeoutWithOperator","TimeoutWithSubscriber","scheduleTimeout","dispatchTimeout","TimeoutError","TimeoutError_1","timeout","TimeoutOperator","errorInstance","TimeoutSubscriber","timeInterval","TimeIntervalOperator","TimeInterval","interval","TimeIntervalSubscriber","lastTime","span","timeInterval_1","throttle_1","throttleTime","ThrottleTimeOperator","ThrottleTimeSubscriber","dispatchNext","takeWhile","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","takeUntil","notifier","TakeUntilOperator","TakeUntilSubscriber","take","TakeOperator","TakeSubscriber","switchMapTo","innerObservable","SwitchMapToOperator","SwitchMapToSubscriber","tryResultSelector","switchMap_1","switchAll","Timeout","clearFn","_id","_clearFn","clearTimeout","close","unref","ref","enroll","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","_onTimeout","setImmediate","clearImmediate","AsapAction_1","AsapScheduler_1","asap","AsapScheduler","AsapAction","concat_1","startWith","skipWhile","SkipWhileOperator","SkipWhileSubscriber","skipping","tryCallPredicate","skipUntil","SkipUntilOperator","SkipUntilSubscriber","isInnerStopped","skipLast","SkipLastOperator","_skipCount","SkipLastSubscriber","_count","_ring","skipCount","currentIndex","oldValue","skip","SkipOperator","SkipSubscriber","EmptyError_1","single","SingleOperator","SingleSubscriber","seenValue","applySingleValue","singleValue","tryNext","ReplaySubject_1","shareReplay","shareReplayOperator","multicast_1","refCount_1","shareSubjectFactory","share","sequenceEqual","compareTo","comparor","SequenceEqualOperator","SequenceEqualSubscriber","_b","_oneComplete","SequenceEqualCompareToSubscriber","emit","checkValues","areEqual","nextB","sampleTime","period","SampleTimeOperator","SampleTimeSubscriber","dispatchNotification","lastValue","sample","SampleOperator","sampleSubscriber","SampleSubscriber","emitValue","retryWhen","RetryWhenOperator","RetryWhenSubscriber","retries","retriesSubscription","retry","RetryOperator","RetrySubscriber","repeatWhen","RepeatWhenOperator","RepeatWhenSubscriber","sourceIsBeingSubscribedTo","subscribeToRetries","notifications","repeat","RepeatOperator","RepeatSubscriber","race_1","AsyncSubject_1","publishLast","publishReplay","selectorOrScheduler","BehaviorSubject","_value","getValue","BehaviorSubject_1","publishBehavior","publish","pluck","properties","props","currentProp","plucker","not_1","filter_1","partition","not","pairwise","PairwiseOperator","PairwiseSubscriber","hasPrev","ConnectableObservable","_isComplete","getSubject","_subject","ConnectableSubscriber","connectableProto","writable","min","comparer","mergeScan","MergeScanOperator","MergeScanSubscriber","mergeMapTo","MergeMapToOperator","MergeMapToSubscriber","trySelectResult","merge_1","merge_2","mergeStatic","materialize","MaterializeOperator","MaterializeSubscriber","mapTo","MapToOperator","MapToSubscriber","every","EveryOperator","EverySubscriber","everyValueMatch","LastOperator","LastSubscriber","_tryPredicate","_tryResultSelector","audit_1","timer_1","auditTime","timer","IsEmptyOperator","IsEmptySubscriber","ignoreElements","IgnoreElementsOperator","IgnoreElementsSubscriber","FastMap_1","groupBy","elementSelector","subjectSelector","GroupByOperator","GroupBySubscriber","groups","attemptedToUnsubscribe","_group","FastMap","group","groupedObservable","GroupedObservable","GroupDurationSubscriber","clear","removeGroup","delete","groupSubject","refCountSubscription","InnerRefCountSubscription","first","FirstOperator","FirstSubscriber","_emitted","_emit","_emitFinal","find_1","findIndex","finalize","callback","FinallyOperator","FinallySubscriber","elementAt","ElementAtOperator","ElementAtSubscriber","expand","ExpandOperator","ExpandSubscriber","subscribeToProjection","exhaustMap","SwitchFirstMapOperator","SwitchFirstMapSubscriber","hasSubscription","exhaust","SwitchFirstOperator","SwitchFirstSubscriber","tap","DoOperator","DoSubscriber","safeSubscriber","distinctUntilChanged_1","distinctUntilKeyChanged","distinct","flushes","DistinctOperator","DistinctSubscriber","_useKeySelector","_finalizeNext","has","delayWhen","delayDurationSelector","subscriptionDelay","SubscriptionDelayObservable","DelayWhenOperator","DelayWhenSubscriber","completed","delayNotifierSubscriptions","removeSubscription","tryComplete","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelaySubscriber","sourceSubscribed","subscribeToSource","delayFor","DelayOperator","DelaySubscriber","delay_1","_schedule","scheduleNotification","DelayMessage","debounceTime","dueTime","DebounceTimeOperator","DebounceTimeSubscriber","debouncedSubscription","clearDebounce","debouncedNext","debounce","DebounceOperator","DebounceSubscriber","durationSubscription","dematerialize","DeMaterializeOperator","DeMaterializeSubscriber","CountOperator","CountSubscriber","concatMap_1","concatMapTo","concat_2","concatStatic","combineLatest_1","combineAll","catchError","CatchOperator","caught","CatchSubscriber","err2","bufferWhen","BufferWhenOperator","BufferWhenSubscriber","subscribing","openBuffer","closingSubscription","bufferToggle","BufferToggleOperator","BufferToggleSubscriber","closeBuffer","trySubscribe","bufferTime","bufferTimeSpan","bufferCreationInterval","maxBufferSize","BufferTimeOperator","BufferTimeSubscriber","Context","openContext","timespanOnly","closeAction","dispatchBufferTimeSpanOnly","dispatchBufferClose","dispatchBufferCreation","filledBufferContext","onBufferFull","closeContext","prevContext","bufferCount","startBufferEvery","BufferCountOperator","subscriberClass","BufferSkipCountSubscriber","BufferCountSubscriber","buffers","BufferOperator","BufferSubscriber","QueueAction_1","QueueScheduler_1","QueueScheduler","QueueAction","ajaxGet","url","headers","AjaxObservable","method","ajaxPost","body","ajaxDelete","ajaxPut","ajaxPatch","mapResponse","response","ajaxGetJSON","responseType","urlOrRequest","request","createXHR","crossDomain","XMLHttpRequest","XDomainRequest","progId","progIds","ActiveXObject","getXMLHttpRequest","withCredentials","prop","AjaxSubscriber","post","put","patch","getJSON","FormData","serializeBody","send","xhr","AjaxResponse","user","password","setupEvents","open","setHeaders","contentType","splitIndex","substring","encodeURI","join","JSON","stringify","setRequestHeader","progressSubscriber","xhrTimeout","AjaxTimeoutError","ontimeout","upload","xhrProgress_1","xhrError_1","onprogress","AjaxError","onerror","xhrReadyStateChange","readyState","status_1","status","responseText","onreadystatechange","abort","originalEvent","parseXhrResponse","parse","responseXML","TimerObservable_1","TimerObservable","PromiseObservable","promise","dispatchError","PromiseObservable_1","IteratorObservable_1","ArrayLikeObservable_1","IteratorObservable","ArrayLikeObservable","subscriberIndex","toString","auditTime_1","buffer_1","bufferCount_1","bufferTime_1","bufferToggle_1","bufferWhen_1","catchError_1","combineAll_1","concatMapTo_1","count_1","debounce_1","debounceTime_1","delayWhen_1","dematerialize_1","distinct_1","distinctUntilKeyChanged_1","elementAt_1","every_1","exhaust_1","exhaustMap_1","expand_1","finalize_1","findIndex_1","first_1","groupBy_1","ignoreElements_1","isEmpty_1","last_1","mapTo_1","materialize_1","max_1","mergeMap_2","flatMap","mergeMapTo_1","mergeScan_1","min_1","onErrorResumeNext_1","pairwise_1","partition_1","pluck_1","publish_1","publishBehavior_1","publishLast_1","publishReplay_1","repeat_1","repeatWhen_1","retry_1","retryWhen_1","sample_1","sampleTime_1","sequenceEqual_1","share_1","shareReplay_1","single_1","skip_1","skipLast_1","skipUntil_1","skipWhile_1","startWith_1","switchAll_1","switchMapTo_1","take_1","takeUntil_1","takeWhile_1","tap_1","throttleTime_1","timeout_1","timeoutWith_1","timestamp_1","toArray_1","windowCount_1","windowTime_1","windowToggle_1","windowWhen_1","withLatestFrom_1","zipAll_1","AnimationFrameScheduler","RequestAnimationFrameDefinition","requestAnimationFrame","cancelAnimationFrame","mozRequestAnimationFrame","mozCancelAnimationFrame","webkitRequestAnimationFrame","webkitCancelAnimationFrame","msRequestAnimationFrame","msCancelAnimationFrame","oRequestAnimationFrame","oCancelAnimationFrame","cb","AnimationFrame","AnimationFrame_1","AnimationFrameAction","AnimationFrameAction_1","AnimationFrameScheduler_1","animationFrame","SubscriptionLoggable_1","applyMixins_1","HotObservable","messages","setup","messagesLength","ColdObservable","scheduleMessages","ColdObservable_1","HotObservable_1","VirtualTimeScheduler_1","defaultMaxFrame","TestScheduler","assertDeepEqual","hotObservables","coldObservables","flushTests","createTime","marbles","createColdObservable","parseMarbles","cold","createHotObservable","materializeInnerObservable","outerFrame","expectObservable","unsubscriptionMarbles","actual","flushTest","ready","unsubscriptionFrame","parseMarblesAsSubscriptions","toBe","expected","expectSubscriptions","actualSubscriptionLogs","marblesArray","readyFlushTests","test","groupStart","subscriptionFrame","materializeInnerObservables","testMessages","subIndex","frameOffset","zipProto","_switch","switch_1","switch","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","draining","queueIndex","cleanUpNextTick","drainQueue","run","marker","runClearTimeout","Item","nextTick","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","registerImmediate","html","channel","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","doc","attachTo","handle","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","canUsePostMessage","MessageChannel","port1","event","port2","documentElement","script","random","addEventListener","attachEvent","task","ImmediateDefinition","canUseProcessNextTick","createProcessNextTickSetImmediate","createPostMessageSetImmediate","canUseMessageChannel","createMessageChannelSetImmediate","canUseReadyStateChange","createReadyStateChangeSetImmediate","createSetTimeoutSetImmediate","ci","instance","identify","postMessageIsAsynchronous_1","partiallyApplied","handler","addFromSetImmediateArguments","globalMessageHandler","Immediate","Immediate_1","asap_1","SubscribeOnObservable","delayTime","SubscribeOnObservable_1","subscribeOn","SubscribeOnOperator","subscribeOn_1","race_2","raceStatic","pred","notPred","flatMapTo","letProto","func","let_1","let","letBind","MapPolyfill","size","_values","_keys","MapPolyfill_1","_finally","finally_1","finally","_do","do_1","minimalSetImpl","MinimalSet","_catch","catch_1","catch","assignImpl","target","sources","k","getAssign","assign","assign_1","WebSocketSubject","urlConfigOrSource","WebSocketCtor","WebSocket","_output","sock","_resetState","socket","multiplex","subMsg","unsubMsg","messageFilter","_connectSocket","protocol","binaryType","onopen","openObserver","closingObserver","code","reason","onclose","closeObserver","wasClean","WebSocketSubject_1","webSocket","webSocket_1","AjaxObservable_1","ajax","ajax_1","initialDelay","ErrorObservable","ErrorObservable_1","_throw","throw_1","UsingObservable","resourceFactory","observableFactory","resource","UsingSubscriber","tryUse","UsingObservable_1","using","using_1","RangeObservable","RangeObservable_1","range","range_1","PairsObservable","PairsObservable_1","pairs","pairs_1","NeverObservable","NeverObservable_1","never","never_1","IntervalObservable","IntervalObservable_1","interval_1","IfObservable","condition","thenSource","elseSource","IfSubscriber","tryIf","IfObservable_1","_if","if_1","if","selfSelector","GenerateObservable","initialState","iterate","initialStateOrOptions","resultSelectorOrObservable","conditionResult","needIterate","GenerateObservable_1","generate","generate_1","fromPromise","fromPromise_1","FromEventPatternObservable","addHandler","removeHandler","_callSelector","retValue","_callAddHandler","errorSubscriber","FromEventPatternObservable_1","fromEventPattern","fromEventPattern_1","FromEventObservable","sourceObj","eventName","options","setupSubscription","isNodeList","isHTMLCollection","removeEventListener","isEventTarget","source_1","isJQueryStyleEventEmitter","source_2","isNodeStyleEventEmitter","source_3","FromEventObservable_1","fromEvent","fromEvent_1","ForkJoinObservable","ForkJoinSubscriber","haveValues","_hasValue","ForkJoinObservable_1","forkJoin","forkJoin_1","empty_1","DeferObservable","DeferSubscriber","factory","tryDefer","_callFactory","DeferObservable_1","defer","defer_1","arrayLike","StringIterator","ArrayIterator","getIterator","return","str","charAt","isFinite","valueAsNumber","sign","floor","maxSafeInteger","toLength","pow","BoundNodeCallbackObservable","callbackFunc","handlerFn","innerArgs","result_1","result_2","BoundNodeCallbackObservable_1","bindNodeCallback","bindNodeCallback_1","BoundCallbackObservable","BoundCallbackObservable_1","bindCallback","bindCallback_1","TestScheduler_1","animationFrame_1","_operators","operators"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","export class Dealer {\r\n    constructor(name){\r\n        this.name = name;\r\n        this.count = 0;\r\n        this.niz = [];\r\n        this.sit = document.querySelector(\"#sitdealer\")\r\n        \r\n    }\r\n    draw(idSpil, where){\r\n        fetch(`https://deckofcardsapi.com/api/deck/${idSpil}/draw/?count=1`).then((res)=>{\r\n            res.json().then((data) => {\r\n                console.log(data);\r\n                console.log(data.cards[0].value);\r\n                switch(data.cards[0].value) {\r\n                    case \"ACE\":\r\n                        if (this.count + 11 > 21){\r\n                            this.count += 1;\r\n                            this.niz.push(1);\r\n                        }\r\n                        else{\r\n                            this.count += 11;\r\n                            this.niz.push(11);\r\n                        };\r\n                        break;\r\n                    case \"JACK\":\r\n                    case \"QUEEN\":\r\n                    case \"KING\":\r\n                        this.count += 10;\r\n                        this.niz.push(10);\r\n                        break;\r\n                    default:\r\n                        this.count += parseInt(data.cards[0].value);\r\n                        this.niz.push(parseInt(data.cards[0].value));\r\n                }\r\n                if (this.count > 21){\r\n                    console.log(\"bussted\");\r\n                }\r\n                console.log(this.count);\r\n                let karta = document.createElement(\"img\");\r\n                karta.src = data.cards[0].image;\r\n                karta.id = \"karta\";\r\n                where.appendChild(karta);\r\n            })\r\n        })\r\n    }\r\n    drawCard(idSpil, where){\r\n        if (this.count < 17){\r\n            this.draw(idSpil, where);\r\n            let counter = document.querySelector(\"#countdealer > #counter\");\r\n            setTimeout(() =>{counter.innerHTML = this.count}, 1000);\r\n        }\r\n    }\r\n}","import {Dealer} from \"./Dealer\";\r\nimport Rx from 'rxjs/Rx';\r\n\r\nexport class Player extends Dealer {\r\n    constructor(name, balance){\r\n        super(name);\r\n        this.balance = balance;\r\n        this.bet = 0;\r\n        this.sit = \"\";\r\n    }\r\n\r\n    drawCard(idSpil, where){\r\n        if (this.count < 21){\r\n            this.draw(idSpil, where);\r\n            let counter = document.querySelector(`#count${this.sit.id[3]} > #counter`);\r\n            setTimeout(() =>{counter.innerHTML = this.count}, 1000);\r\n        }\r\n    }\r\n    \r\n}","import {Player} from \"./Player\";\r\nimport {Dealer} from \"./Dealer\";\r\n\r\nimport Rx from 'rxjs/Rx';\r\n\r\n\r\nexport class Game {\r\n    constructor(dealer, player){\r\n        this.dealer = dealer;\r\n        this.player = player;\r\n        this.idSpil = \"\";\r\n    }\r\n\r\n    start(){\r\n        fetch(\"https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1\").then((res)=>{\r\n            res.json().then((data) => {\r\n                console.log(data);\r\n                this.idSpil = data.deck_id;\r\n                let idSpila = document.createElement(\"p\");\r\n                let imeDilera = document.createElement(\"p\");\r\n                let div = document.querySelector(\"#dealer\");\r\n                idSpila.innerHTML = `ID of Deck: <strong>${this.idSpil}</strong>`;\r\n                imeDilera.innerHTML = `Name: <i>${this.dealer.name}</i>`;\r\n                div.appendChild(imeDilera);\r\n                div.appendChild(idSpila);\r\n\r\n                setTimeout(() =>{this.player.drawCard(this.idSpil, this.player.sit)}, 1000);\r\n                setTimeout(() =>{this.dealer.drawCard(this.idSpil, this.dealer.sit)}, 2000);\r\n                setTimeout(() =>{this.player.drawCard(this.idSpil, this.player.sit)}, 3000);\r\n                setTimeout(() =>{\r\n                    if(this.player.count == 21){\r\n                        this.finish();\r\n                    }\r\n                }, 4000);\r\n            })\r\n        })\r\n    }\r\n\r\n    finish(){\r\n        // dealer finishes\r\n        for(let i = 1; i < 7; i++){\r\n            setTimeout(()=>{this.dealer.drawCard(this.idSpil, this.dealer.sit)}, i*1000);  \r\n        }\r\n        //evaluation\r\n        setTimeout(() => {\r\n            let karte = [];\r\n            let nizDealer = [];\r\n            nizDealer.push(\"Dealer\");\r\n            nizDealer.push(this.dealer.niz);\r\n            nizDealer.push(this.dealer.count);\r\n            let nizPlayer = [];\r\n            nizPlayer.push(this.player.name);\r\n            nizPlayer.push(this.player.niz);\r\n            nizPlayer.push(this.player.count);\r\n            let evaluationNiz = [];\r\n            karte.push(\"dealer\")\r\n            karte.push(nizPlayer);\r\n            karte.push(nizDealer);\r\n            \r\n\r\n            let karte$ = Rx.Observable.from(karte);\r\n            karte$.subscribe(\r\n                v => {\r\n                    console.log(v);\r\n                    let e = 0;\r\n                    let help = [];\r\n                    help = v[1];\r\n                    console.log(v[1].length);\r\n                    if(v[1].length == 2 && v[2] == 21){\r\n                        e += 3;\r\n                    }\r\n                    if(v[2] == 21){\r\n                        e += 2;\r\n                    }\r\n                    if(v[2] < 21){\r\n                        e += 1;\r\n                    }\r\n                    if(v[2] > 21){\r\n                        e -= 1;\r\n                    }\r\n                    evaluationNiz.push(e);\r\n                    console.log(e);\r\n                },\r\n                err => {\r\n                    console.log(err);    \r\n                },\r\n                complete => {\r\n                    let nizDraw = [\"not decided!\"];\r\n                    console.log(evaluationNiz);\r\n                    if(evaluationNiz[1] > evaluationNiz[2]){\r\n                        this.message(nizPlayer);\r\n                        if (evaluationNiz[1] == 6){\r\n                            this.playerWins(\"BlackJack\");\r\n                        }\r\n                        else{\r\n                            this.playerWins(\"notBlackJack\");\r\n                        }\r\n                        console.log(\"player wins\");\r\n                    }else if(evaluationNiz[1] < evaluationNiz[2]){\r\n                        this.message(nizDealer);\r\n                        this.dealerWins();\r\n                        console.log(\"dealer wins\");\r\n                    }else if(evaluationNiz[1] == evaluationNiz[2] && evaluationNiz[1] < 0){\r\n                        this.message(nizDraw);\r\n                        this.gameIsDraw();\r\n                        console.log(\"nereseno\");\r\n                    }else if(nizPlayer[2] > nizDealer[2]){\r\n                        this.message(nizPlayer);\r\n                        this.playerWins(\"notBlackJack\");\r\n                        console.log(\"player wins\");\r\n                    }else if(nizPlayer[2] < nizDealer[2]){\r\n                        this.message(nizDealer);\r\n                        this.dealerWins();\r\n                        console.log(\"dealer wins\");\r\n                    }else{\r\n                        this.message(nizDraw);\r\n                        this.gameIsDraw();\r\n                        console.log(\"nereseno\");\r\n                    }\r\n                    \r\n                    \r\n                });\r\n\r\n        }, 7000);\r\n\r\n    }\r\n\r\n    message(niz){\r\n        let parent = document.querySelector(\"#countdealer\");\r\n        let div = document.createElement(\"div\");\r\n        div.id = \"message\";\r\n        parent.appendChild(div);\r\n        let name = document.createElement(\"p\");\r\n        name.innerHTML = `Winner is ${niz[0]}!<hr>`;\r\n        div.appendChild(name);\r\n        let newButton = document.createElement(\"button\");\r\n        newButton.innerHTML = \"NEXT\";\r\n        let standButton = document.createElement(\"button\");\r\n        standButton.innerHTML = \"STAND UP\";\r\n        div.appendChild(newButton);\r\n        div.appendChild(standButton);\r\n        \r\n        newButton.onclick = () =>{\r\n            let child = newButton.parentElement;\r\n            child.parentNode.removeChild(child);\r\n            this.prepare();\r\n            this.gameLogic();\r\n        }\r\n\r\n        standButton.onclick = () =>{\r\n            let child = newButton.parentElement;\r\n            child.parentNode.removeChild(child);\r\n            this.prepareToStand();\r\n            for(let i = 1; i <= 3; i++){\r\n                let sitButton = document.createElement(\"div\");\r\n                sitButton.id = \"sitButton\";\r\n                sitButton.innerHTML = `<span>SIT</span>`;\r\n                document.getElementById(`${i}`).appendChild(sitButton);\r\n            }\r\n            let b = document.querySelectorAll(\"#sitButton\");\r\n            b.forEach((element) => {\r\n                \r\n                element.onclick = () =>{\r\n                    this.player.sit = document.querySelector(`#sit${element.parentElement.id}`);\r\n                    b.forEach((el)=>{\r\n                        el.onclick = false;\r\n                    })\r\n                    element.parentElement.innerHTML = \"\";\r\n                    this.gameLogic();\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    playerWins(prom){\r\n        if(prom == \"BlackJack\"){\r\n            this.player.balance += 3*this.player.bet;\r\n        }\r\n        else{\r\n            this.player.balance += 2*this.player.bet;\r\n        }\r\n        this.player.bet = 0;\r\n        let betIn = document.querySelector(\"#bet\");\r\n        let balance = document.querySelector(\"#balance\");\r\n        betIn.innerHTML = `Bet: <strong>${this.player.bet}$</strong>`;\r\n        balance.innerHTML = `Balance: <strong>${this.player.balance}$</strong>`;\r\n    }\r\n\r\n    dealerWins(){\r\n        this.player.bet = 0;\r\n        let betIn = document.querySelector(\"#bet\");\r\n        betIn.innerHTML = `Bet: <strong>${this.player.bet}$</strong>`;\r\n    }\r\n\r\n    gameIsDraw(){\r\n        this.player.balance += this.player.bet;\r\n        this.player.bet = 0;\r\n        let betIn = document.querySelector(\"#bet\");\r\n        let balance = document.querySelector(\"#balance\");\r\n        betIn.innerHTML = `Bet: <strong>${this.player.bet}$</strong>`;\r\n        balance.innerHTML = `Balance: <strong>${this.player.balance}$</strong>`;\r\n    }\r\n    \r\n    prepare(){\r\n        this.player.niz = [];\r\n        this.player.sit.innerHTML = \"\";\r\n        this.dealer.sit.innerHTML = \"\";\r\n        this.dealer.count = 0;\r\n        this.player.count = 0;\r\n        document.querySelectorAll(\"#dealer > p\").forEach((element) => {\r\n            document.querySelector(\"#dealer\").removeChild(element);\r\n        });\r\n        document.getElementById(`${this.player.sit.id[3]}`).innerHTML = \"\";\r\n        document.querySelector(`#count${this.player.sit.id[3]} > #counter`).innerHTML = \"\";\r\n        document.querySelector(`#countdealer > #counter`).innerHTML = \"\";\r\n    }\r\n\r\n    prepareToStand(){\r\n        this.prepare();\r\n        for(let i = 1; i <= 3; i++){\r\n            let parent = document.getElementById(`${i}`);\r\n            parent.innerHTML = \"\";\r\n        }\r\n    }\r\n\r\n    gameLogic(){\r\n        let parent = document.getElementById(`${this.player.sit.id[3]}`);\r\n        console.log(this.player.sit.id[3]);\r\n        for (let i= 1; i <= 5; i++){\r\n            let bet = document.createElement(\"button\");\r\n            bet.innerHTML=`${i*5}`;\r\n            bet.value = i*5;\r\n            parent.appendChild(bet);\r\n            bet.onclick = () =>{\r\n                if (this.player.balance >= parseInt(bet.value)){\r\n                    this.player.bet += parseInt(bet.value);\r\n                    this.player.balance -= parseInt(bet.value);\r\n                    let betIn = document.querySelector(\"#bet\");\r\n                    let balance = document.querySelector(\"#balance\");\r\n                    betIn.innerHTML = `Bet: <strong>${this.player.bet}$</strong>`;\r\n                    balance.innerHTML = `Balance: <strong>${this.player.balance}$</strong>`;\r\n                    console.log(this.player.bet);\r\n                }\r\n            }\r\n        }\r\n\r\n        let reset = document.createElement(\"button\");\r\n        reset.innerHTML = \"CLR\";\r\n        parent.appendChild(reset);\r\n        reset.onclick = () =>{\r\n            this.player.balance += this.player.bet;\r\n            this.player.bet = 0; \r\n            let betIn = document.querySelector(\"#bet\");\r\n            let balance = document.querySelector(\"#balance\");\r\n            betIn.innerHTML = `Bet: <strong>${this.player.bet}$</strong>`;\r\n            balance.innerHTML = `Balance: <strong>${this.player.balance}$</strong>`;\r\n            console.log(this.player.bet);\r\n        }\r\n        \r\n        let done = document.createElement(\"button\");\r\n        done.innerHTML = \"DONE\";\r\n        let name = document.createElement(\"p\");\r\n        name.innerHTML = `Name: <i>${this.player.name}</i>`;\r\n        let balance = document.createElement(\"p\");\r\n        balance.id = \"balance\";\r\n        balance.innerHTML = `Balance: <strong>${this.player.balance}$</strong>`;\r\n        let bet = document.createElement(\"p\");\r\n        bet.id = \"bet\";\r\n        bet.innerHTML = `Bet: <strong>${this.player.bet}$</strong>`;\r\n        parent.appendChild(name);\r\n        parent.appendChild(balance);\r\n        parent.appendChild(bet);\r\n        \r\n        parent.appendChild(done);\r\n        done.onclick = () => {\r\n            if (this.player.bet > 0){\r\n                parent.innerHTML = \"\";\r\n                let hitbtn = document.createElement(\"button\");\r\n                hitbtn.innerHTML = \"HIT\";\r\n                hitbtn.disabled = true;\r\n                let standbtn = document.createElement(\"button\");\r\n                standbtn.innerHTML = \"STAND\";\r\n                standbtn.disabled = true;\r\n                let doublebtn = document.createElement(\"button\");\r\n                doublebtn.innerHTML = \"DOUBLE\";\r\n                doublebtn.disabled = true;\r\n                let name = document.createElement(\"p\");\r\n                name.innerHTML = `Name: <i>${this.player.name}</i>`;\r\n                let balance = document.createElement(\"p\");\r\n                balance.id = \"balance\";\r\n                balance.innerHTML = `Balance: <strong>${this.player.balance}$</strong>`;\r\n                let bet = document.createElement(\"p\");\r\n                bet.id = \"bet\";\r\n                bet.innerHTML = `Bet: <strong>${this.player.bet}$</strong>`;\r\n\r\n                parent.appendChild(hitbtn);\r\n                parent.appendChild(standbtn);\r\n                parent.appendChild(doublebtn);\r\n                parent.appendChild(name);\r\n                parent.appendChild(balance);\r\n                parent.appendChild(bet);\r\n                \r\n                this.start();\r\n                setTimeout(()=>{\r\n                    hitbtn.disabled = false;\r\n                    standbtn.disabled = false;\r\n                    doublebtn.disabled = false;\r\n                },3000);\r\n                \r\n                hitbtn.onclick = () => {\r\n                    this.player.drawCard(this.idSpil, this.player.sit);\r\n                    setTimeout(() =>{\r\n                        if (parseInt(document.querySelector(`#count${this.player.sit.id[3]} > #counter`).innerHTML)>=21){\r\n                            hitbtn.disabled = true;\r\n                            standbtn.disabled = true;\r\n                            doublebtn.disabled = true;\r\n                            this.finish();\r\n                        }\r\n                    },2000);\r\n                }\r\n                standbtn.onclick = () => {\r\n                    hitbtn.disabled = true;\r\n                    standbtn.disabled = true;\r\n                    doublebtn.disabled = true;\r\n                    this.finish();\r\n                }\r\n                doublebtn.onclick = () => {\r\n                    if(this.player.count < 21){\r\n                        this.player.drawCard(this.idSpil, this.player.sit);\r\n                        this.player.balance -= this.player.bet;\r\n                        this.player.bet *=2;\r\n                        let betIn = document.querySelector(\"#bet\");\r\n                        let balance = document.querySelector(\"#balance\");\r\n                        betIn.innerHTML = `bet: <strong>${this.player.bet}$</strong>`;\r\n                        balance.innerHTML = `Balance: <strong>${this.player.balance}$</strong>`;\r\n                        doublebtn.disabled = true;\r\n                    }\r\n                    setTimeout(() =>{\r\n                        if (parseInt(document.querySelector(`#count${this.player.sit.id[3]} > #counter`).innerHTML)>=21){\r\n                            hitbtn.disabled = true;\r\n                            standbtn.disabled = true;\r\n                            doublebtn.disabled = true;\r\n                            game.finish();\r\n                        }\r\n                    },2000);\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import {Player} from \"./Player\";\r\nimport {Dealer} from \"./Dealer\";\r\nimport {Game} from \"./Game\";\r\n\r\ndocument.querySelector(\"#login\").onclick = () =>{\r\n    const name = document.querySelector(\"#name\").value;\r\n    document.querySelector(\"#message\").parentNode.removeChild(document.querySelector(\"#message\"));\r\n\r\n\r\n    const game = new Game(new Dealer(\"Nemanja\"), new Player(`${name}`, 200));\r\n    \r\n    for(let i = 1; i <= 3; i++){\r\n        let sitButton = document.createElement(\"div\");\r\n        sitButton.id = \"sitButton\";\r\n        sitButton.innerHTML = `<span>SIT</span>`;\r\n        document.getElementById(`${i}`).appendChild(sitButton);\r\n    }\r\n    let b = document.querySelectorAll(\"#sitButton\");\r\n    b.forEach((element) => {\r\n        element.onclick = () =>{\r\n            let parent = element.parentElement;\r\n            game.player.sit = document.querySelector(`#sit${element.parentElement.id}`);\r\n            b.forEach((el)=>{\r\n                el.onclick = false;\r\n            })\r\n            parent.innerHTML = \"\";\r\n            game.gameLogic();\r\n        }  \r\n    })\r\n}\r\n\r\n\r\n  ","\"use strict\";\nvar root_1 = require('./util/root');\nvar toSubscriber_1 = require('./util/toSubscriber');\nvar observable_1 = require('./symbol/observable');\nvar pipe_1 = require('./util/pipe');\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nvar Observable = (function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    /**\n     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n     *\n     * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n     *\n     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n     * thought.\n     *\n     * Apart from starting the execution of an Observable, this method allows you to listen for values\n     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n     * following ways.\n     *\n     * The first way is creating an object that implements {@link Observer} interface. It should have methods\n     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n     * be left uncaught.\n     *\n     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n     *\n     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n     *\n     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n     * It is an Observable itself that decides when these functions will be called. For example {@link of}\n     * by default emits all its values synchronously. Always check documentation for how given Observable\n     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n     *\n     * @example <caption>Subscribe with an Observer</caption>\n     * const sumObserver = {\n     *   sum: 0,\n     *   next(value) {\n     *     console.log('Adding: ' + value);\n     *     this.sum = this.sum + value;\n     *   },\n     *   error() { // We actually could just remove this method,\n     *   },        // since we do not really care about errors right now.\n     *   complete() {\n     *     console.log('Sum equals: ' + this.sum);\n     *   }\n     * };\n     *\n     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n     * .subscribe(sumObserver);\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Subscribe with functions</caption>\n     * let sum = 0;\n     *\n     * Rx.Observable.of(1, 2, 3)\n     * .subscribe(\n     *   function(value) {\n     *     console.log('Adding: ' + value);\n     *     sum = sum + value;\n     *   },\n     *   undefined,\n     *   function() {\n     *     console.log('Sum equals: ' + sum);\n     *   }\n     * );\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Cancel a subscription</caption>\n     * const subscription = Rx.Observable.interval(1000).subscribe(\n     *   num => console.log(num),\n     *   undefined,\n     *   () => console.log('completed!') // Will not be called, even\n     * );                                // when cancelling subscription\n     *\n     *\n     * setTimeout(() => {\n     *   subscription.unsubscribe();\n     *   console.log('unsubscribed!');\n     * }, 2500);\n     *\n     * // Logs:\n     * // 0 after 1s\n     * // 1 after 2s\n     * // \"unsubscribed!\" after 2.5s\n     *\n     *\n     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n     *  Observable.\n     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n     *  the error will be thrown as unhandled.\n     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n     * @return {ISubscription} a subscription reference to the registered handlers\n     * @method subscribe\n     */\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n        }\n        if (sink.syncErrorThrowable) {\n            sink.syncErrorThrowable = false;\n            if (sink.syncErrorThrown) {\n                throw sink.syncErrorValue;\n            }\n        }\n        return sink;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            sink.syncErrorThrown = true;\n            sink.syncErrorValue = err;\n            sink.error(err);\n        }\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable.prototype.forEach = function (next, PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n                PromiseCtor = root_1.root.Rx.config.Promise;\n            }\n            else if (root_1.root.Promise) {\n                PromiseCtor = root_1.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            // Must be declared in a separate statement to avoid a RefernceError when\n            // accessing subscription below in the closure due to Temporal Dead Zone.\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                if (subscription) {\n                    // if there is a subscription, then we can surmise\n                    // the next handling is asynchronous. Any errors thrown\n                    // need to be rejected explicitly and unsubscribe must be\n                    // called manually\n                    try {\n                        next(value);\n                    }\n                    catch (err) {\n                        reject(err);\n                        subscription.unsubscribe();\n                    }\n                }\n                else {\n                    // if there is NO subscription, then we're getting a nexted\n                    // value synchronously during subscription. We can just call it.\n                    // If it errors, Observable's `subscribe` will ensure the\n                    // unsubscription logic is called, then synchronously rethrow the error.\n                    // After that, Promise will trap the error and send it\n                    // down the rejection path.\n                    next(value);\n                }\n            }, reject, resolve);\n        });\n    };\n    Observable.prototype._subscribe = function (subscriber) {\n        return this.source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable.prototype[observable_1.observable] = function () {\n        return this;\n    };\n    /* tslint:enable:max-line-length */\n    /**\n     * Used to stitch together functional operators into a chain.\n     * @method pipe\n     * @return {Observable} the Observable result of all of the operators having\n     * been called in the order they were passed in.\n     *\n     * @example\n     *\n     * import { map, filter, scan } from 'rxjs/operators';\n     *\n     * Rx.Observable.interval(1000)\n     *   .pipe(\n     *     filter(x => x % 2 === 0),\n     *     map(x => x + x),\n     *     scan((acc, x) => acc + x)\n     *   )\n     *   .subscribe(x => console.log(x))\n     */\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i - 0] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipe_1.pipeFromArray(operations)(this);\n    };\n    /* tslint:enable:max-line-length */\n    Observable.prototype.toPromise = function (PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n                PromiseCtor = root_1.root.Rx.config.Promise;\n            }\n            else if (root_1.root.Promise) {\n                PromiseCtor = root_1.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     */\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\nexports.Observable = Observable;\n//# sourceMappingURL=Observable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isFunction_1 = require('./util/isFunction');\nvar Subscription_1 = require('./Subscription');\nvar Observer_1 = require('./Observer');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nvar Subscriber = (function (_super) {\n    __extends(Subscriber, _super);\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    function Subscriber(destinationOrNext, error, complete) {\n        _super.call(this);\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                this.destination = Observer_1.empty;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = Observer_1.empty;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    // HACK(benlesh): To resolve an issue where Node users may have multiple\n                    // copies of rxjs in their node_modules directory.\n                    if (isTrustedSubscriber(destinationOrNext)) {\n                        var trustedSubscriber = destinationOrNext[rxSubscriber_1.rxSubscriber]();\n                        this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n                        this.destination = trustedSubscriber;\n                        trustedSubscriber.add(this);\n                    }\n                    else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () { return this; };\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     */\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    };\n    return Subscriber;\n}(Subscription_1.Subscription));\nexports.Subscriber = Subscriber;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SafeSubscriber = (function (_super) {\n    __extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        _super.call(this);\n        this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = this;\n        if (isFunction_1.isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== Observer_1.empty) {\n                context = Object.create(observerOrNext);\n                if (isFunction_1.isFunction(context.unsubscribe)) {\n                    this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = this.unsubscribe.bind(this);\n            }\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._error) {\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                throw err;\n            }\n            else {\n                _parentSubscriber.syncErrorValue = err;\n                _parentSubscriber.syncErrorThrown = true;\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            throw err;\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            parent.syncErrorValue = err;\n            parent.syncErrorThrown = true;\n            return true;\n        }\n        return false;\n    };\n    SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\nfunction isTrustedSubscriber(obj) {\n    return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriber_1.rxSubscriber]);\n}\n//# sourceMappingURL=Subscriber.js.map","\"use strict\";\nvar root_1 = require('./root');\nvar isArrayLike_1 = require('./isArrayLike');\nvar isPromise_1 = require('./isPromise');\nvar isObject_1 = require('./isObject');\nvar Observable_1 = require('../Observable');\nvar iterator_1 = require('../symbol/iterator');\nvar InnerSubscriber_1 = require('../InnerSubscriber');\nvar observable_1 = require('../symbol/observable');\nfunction subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n    if (destination.closed) {\n        return null;\n    }\n    if (result instanceof Observable_1.Observable) {\n        if (result._isScalar) {\n            destination.next(result.value);\n            destination.complete();\n            return null;\n        }\n        else {\n            destination.syncErrorThrowable = true;\n            return result.subscribe(destination);\n        }\n    }\n    else if (isArrayLike_1.isArrayLike(result)) {\n        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {\n            destination.next(result[i]);\n        }\n        if (!destination.closed) {\n            destination.complete();\n        }\n    }\n    else if (isPromise_1.isPromise(result)) {\n        result.then(function (value) {\n            if (!destination.closed) {\n                destination.next(value);\n                destination.complete();\n            }\n        }, function (err) { return destination.error(err); })\n            .then(null, function (err) {\n            // Escaping the Promise trap: globally throw unhandled errors\n            root_1.root.setTimeout(function () { throw err; });\n        });\n        return destination;\n    }\n    else if (result && typeof result[iterator_1.iterator] === 'function') {\n        var iterator = result[iterator_1.iterator]();\n        do {\n            var item = iterator.next();\n            if (item.done) {\n                destination.complete();\n                break;\n            }\n            destination.next(item.value);\n            if (destination.closed) {\n                break;\n            }\n        } while (true);\n    }\n    else if (result && typeof result[observable_1.observable] === 'function') {\n        var obs = result[observable_1.observable]();\n        if (typeof obs.subscribe !== 'function') {\n            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n        }\n        else {\n            return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n        }\n    }\n    else {\n        var value = isObject_1.isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n        var msg = (\"You provided \" + value + \" where a stream was expected.\")\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        destination.error(new TypeError(msg));\n    }\n    return null;\n}\nexports.subscribeToResult = subscribeToResult;\n//# sourceMappingURL=subscribeToResult.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('./Subscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar OuterSubscriber = (function (_super) {\n    __extends(OuterSubscriber, _super);\n    function OuterSubscriber() {\n        _super.apply(this, arguments);\n    }\n    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.destination.error(error);\n    };\n    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.destination.complete();\n    };\n    return OuterSubscriber;\n}(Subscriber_1.Subscriber));\nexports.OuterSubscriber = OuterSubscriber;\n//# sourceMappingURL=OuterSubscriber.js.map","\"use strict\";\nvar AsyncAction_1 = require('./AsyncAction');\nvar AsyncScheduler_1 = require('./AsyncScheduler');\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\nexports.async = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);\n//# sourceMappingURL=async.js.map","\"use strict\";\nvar isArray_1 = require('./util/isArray');\nvar isObject_1 = require('./util/isObject');\nvar isFunction_1 = require('./util/isFunction');\nvar tryCatch_1 = require('./util/tryCatch');\nvar errorObject_1 = require('./util/errorObject');\nvar UnsubscriptionError_1 = require('./util/UnsubscriptionError');\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nvar Subscription = (function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction_1.isFunction(_unsubscribe)) {\n            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject_1.errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);\n            }\n        }\n        if (isArray_1.isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject_1.isObject(sub)) {\n                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject_1.errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject_1.errorObject.e;\n                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError_1.UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    };\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nexports.Subscription = Subscription;\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);\n}\n//# sourceMappingURL=Subscription.js.map","\"use strict\";\n// typeof any so that it we don't have to cast when comparing a result to the error object\nexports.errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('./Observable');\nvar Subscriber_1 = require('./Subscriber');\nvar Subscription_1 = require('./Subscription');\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\nvar SubjectSubscription_1 = require('./SubjectSubscription');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\n/**\n * @class SubjectSubscriber<T>\n */\nvar SubjectSubscriber = (function (_super) {\n    __extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        _super.call(this, destination);\n        this.destination = destination;\n    }\n    return SubjectSubscriber;\n}(Subscriber_1.Subscriber));\nexports.SubjectSubscriber = SubjectSubscriber;\n/**\n * @class Subject<T>\n */\nvar Subject = (function (_super) {\n    __extends(Subject, _super);\n    function Subject() {\n        _super.call(this);\n        this.observers = [];\n        this.closed = false;\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    Subject.prototype[rxSubscriber_1.rxSubscriber] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable_1.Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable_1.Observable));\nexports.Subject = Subject;\n/**\n * @class AnonymousSubject<T>\n */\nvar AnonymousSubject = (function (_super) {\n    __extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        _super.call(this);\n        this.destination = destination;\n        this.source = source;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription_1.Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject));\nexports.AnonymousSubject = AnonymousSubject;\n//# sourceMappingURL=Subject.js.map","\"use strict\";\nvar errorObject_1 = require('./errorObject');\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject_1.errorObject.e = e;\n        return errorObject_1.errorObject;\n    }\n}\nfunction tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\nexports.tryCatch = tryCatch;\n;\n//# sourceMappingURL=tryCatch.js.map","\"use strict\";\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\nvar __window = typeof window !== 'undefined' && window;\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nvar __global = typeof global !== 'undefined' && global;\nvar _root = __window || __global || __self;\nexports.root = _root;\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n    if (!_root) {\n        throw new Error('RxJS could not find any global context (window, self, global)');\n    }\n})();\n//# sourceMappingURL=root.js.map","\"use strict\";\nfunction isScheduler(value) {\n    return value && typeof value.schedule === 'function';\n}\nexports.isScheduler = isScheduler;\n//# sourceMappingURL=isScheduler.js.map","\"use strict\";\nexports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArray.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar EmptyObservable = (function (_super) {\n    __extends(EmptyObservable, _super);\n    function EmptyObservable(scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer and immediately\n     * emits a complete notification.\n     *\n     * <span class=\"informal\">Just emits 'complete', and nothing else.\n     * </span>\n     *\n     * <img src=\"./img/empty.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the complete notification. It can be used for composing with other\n     * Observables, such as in a {@link mergeMap}.\n     *\n     * @example <caption>Emit the number 7, then complete.</caption>\n     * var result = Rx.Observable.empty().startWith(7);\n     * result.subscribe(x => console.log(x));\n     *\n     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n     * var interval = Rx.Observable.interval(1000);\n     * var result = interval.mergeMap(x =>\n     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n     * );\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following to the console:\n     * // x is equal to the count on the interval eg(0,1,2,3,...)\n     * // x will occur every 1000ms\n     * // if x % 2 is equal to 1 print abc\n     * // if x % 2 is not equal to 1 nothing will be output\n     *\n     * @see {@link create}\n     * @see {@link never}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emission of the complete notification.\n     * @return {Observable} An \"empty\" Observable: emits only the complete\n     * notification.\n     * @static true\n     * @name empty\n     * @owner Observable\n     */\n    EmptyObservable.create = function (scheduler) {\n        return new EmptyObservable(scheduler);\n    };\n    EmptyObservable.dispatch = function (arg) {\n        var subscriber = arg.subscriber;\n        subscriber.complete();\n    };\n    EmptyObservable.prototype._subscribe = function (subscriber) {\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });\n        }\n        else {\n            subscriber.complete();\n        }\n    };\n    return EmptyObservable;\n}(Observable_1.Observable));\nexports.EmptyObservable = EmptyObservable;\n//# sourceMappingURL=EmptyObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar ScalarObservable_1 = require('./ScalarObservable');\nvar EmptyObservable_1 = require('./EmptyObservable');\nvar isScheduler_1 = require('../util/isScheduler');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ArrayObservable = (function (_super) {\n    __extends(ArrayObservable, _super);\n    function ArrayObservable(array, scheduler) {\n        _super.call(this);\n        this.array = array;\n        this.scheduler = scheduler;\n        if (!scheduler && array.length === 1) {\n            this._isScalar = true;\n            this.value = array[0];\n        }\n    }\n    ArrayObservable.create = function (array, scheduler) {\n        return new ArrayObservable(array, scheduler);\n    };\n    /**\n     * Creates an Observable that emits some values you specify as arguments,\n     * immediately one after the other, and then emits a complete notification.\n     *\n     * <span class=\"informal\">Emits the arguments you provide, then completes.\n     * </span>\n     *\n     * <img src=\"./img/of.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the arguments given, and the complete notification thereafter. It can\n     * be used for composing with other Observables, such as with {@link concat}.\n     * By default, it uses a `null` IScheduler, which means the `next`\n     * notifications are sent synchronously, although with a different IScheduler\n     * it is possible to determine when those notifications will be delivered.\n     *\n     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n     * var numbers = Rx.Observable.of(10, 20, 30);\n     * var letters = Rx.Observable.of('a', 'b', 'c');\n     * var interval = Rx.Observable.interval(1000);\n     * var result = numbers.concat(letters).concat(interval);\n     * result.subscribe(x => console.log(x));\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link throw}\n     *\n     * @param {...T} values Arguments that represent `next` values to be emitted.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emissions of the `next` notifications.\n     * @return {Observable<T>} An Observable that emits each given input value.\n     * @static true\n     * @name of\n     * @owner Observable\n     */\n    ArrayObservable.of = function () {\n        var array = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            array[_i - 0] = arguments[_i];\n        }\n        var scheduler = array[array.length - 1];\n        if (isScheduler_1.isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len > 1) {\n            return new ArrayObservable(array, scheduler);\n        }\n        else if (len === 1) {\n            return new ScalarObservable_1.ScalarObservable(array[0], scheduler);\n        }\n        else {\n            return new EmptyObservable_1.EmptyObservable(scheduler);\n        }\n    };\n    ArrayObservable.dispatch = function (state) {\n        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;\n        if (index >= count) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(array[index]);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    ArrayObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var array = this.array;\n        var count = array.length;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ArrayObservable.dispatch, 0, {\n                array: array, index: index, count: count, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < count && !subscriber.closed; i++) {\n                subscriber.next(array[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayObservable;\n}(Observable_1.Observable));\nexports.ArrayObservable = ArrayObservable;\n//# sourceMappingURL=ArrayObservable.js.map","\"use strict\";\nvar ConnectableObservable_1 = require('../observable/ConnectableObservable');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nfunction multicast(subjectOrSubjectFactory, selector) {\n    return function multicastOperatorFunction(source) {\n        var subjectFactory;\n        if (typeof subjectOrSubjectFactory === 'function') {\n            subjectFactory = subjectOrSubjectFactory;\n        }\n        else {\n            subjectFactory = function subjectFactory() {\n                return subjectOrSubjectFactory;\n            };\n        }\n        if (typeof selector === 'function') {\n            return source.lift(new MulticastOperator(subjectFactory, selector));\n        }\n        var connectable = Object.create(source, ConnectableObservable_1.connectableObservableDescriptor);\n        connectable.source = source;\n        connectable.subjectFactory = subjectFactory;\n        return connectable;\n    };\n}\nexports.multicast = multicast;\nvar MulticastOperator = (function () {\n    function MulticastOperator(subjectFactory, selector) {\n        this.subjectFactory = subjectFactory;\n        this.selector = selector;\n    }\n    MulticastOperator.prototype.call = function (subscriber, source) {\n        var selector = this.selector;\n        var subject = this.subjectFactory();\n        var subscription = selector(subject).subscribe(subscriber);\n        subscription.add(source.subscribe(subject));\n        return subscription;\n    };\n    return MulticastOperator;\n}());\nexports.MulticastOperator = MulticastOperator;\n//# sourceMappingURL=multicast.js.map","\"use strict\";\nvar scan_1 = require('./scan');\nvar takeLast_1 = require('./takeLast');\nvar defaultIfEmpty_1 = require('./defaultIfEmpty');\nvar pipe_1 = require('../util/pipe');\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nfunction reduce(accumulator, seed) {\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        return function reduceOperatorFunctionWithSeed(source) {\n            return pipe_1.pipe(scan_1.scan(accumulator, seed), takeLast_1.takeLast(1), defaultIfEmpty_1.defaultIfEmpty(seed))(source);\n        };\n    }\n    return function reduceOperatorFunction(source) {\n        return pipe_1.pipe(scan_1.scan(function (acc, value, index) {\n            return accumulator(acc, value, index + 1);\n        }), takeLast_1.takeLast(1))(source);\n    };\n}\nexports.reduce = reduce;\n//# sourceMappingURL=reduce.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nvar ArgumentOutOfRangeError = (function (_super) {\n    __extends(ArgumentOutOfRangeError, _super);\n    function ArgumentOutOfRangeError() {\n        var err = _super.call(this, 'argument out of range');\n        this.name = err.name = 'ArgumentOutOfRangeError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ArgumentOutOfRangeError;\n}(Error));\nexports.ArgumentOutOfRangeError = ArgumentOutOfRangeError;\n//# sourceMappingURL=ArgumentOutOfRangeError.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nfunction map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nexports.map = map;\nvar MapOperator = (function () {\n    function MapOperator(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    MapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    };\n    return MapOperator;\n}());\nexports.MapOperator = MapOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapSubscriber = (function (_super) {\n    __extends(MapSubscriber, _super);\n    function MapSubscriber(destination, project, thisArg) {\n        _super.call(this, destination);\n        this.project = project;\n        this.count = 0;\n        this.thisArg = thisArg || this;\n    }\n    // NOTE: This looks unoptimized, but it's actually purposefully NOT\n    // using try/catch optimizations.\n    MapSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return MapSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=map.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Scheduler_1 = require('../Scheduler');\nvar AsyncScheduler = (function (_super) {\n    __extends(AsyncScheduler, _super);\n    function AsyncScheduler() {\n        _super.apply(this, arguments);\n        this.actions = [];\n        /**\n         * A flag to indicate whether the Scheduler is currently executing a batch of\n         * queued actions.\n         * @type {boolean}\n         */\n        this.active = false;\n        /**\n         * An internal ID used to track the latest asynchronous task such as those\n         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n         * others.\n         * @type {any}\n         */\n        this.scheduled = undefined;\n    }\n    AsyncScheduler.prototype.flush = function (action) {\n        var actions = this.actions;\n        if (this.active) {\n            actions.push(action);\n            return;\n        }\n        var error;\n        this.active = true;\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (action = actions.shift()); // exhaust the scheduler queue\n        this.active = false;\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsyncScheduler;\n}(Scheduler_1.Scheduler));\nexports.AsyncScheduler = AsyncScheduler;\n//# sourceMappingURL=AsyncScheduler.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../util/root');\nvar Action_1 = require('./Action');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsyncAction = (function (_super) {\n    __extends(AsyncAction, _super);\n    function AsyncAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.pending = false;\n    }\n    AsyncAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (this.closed) {\n            return this;\n        }\n        // Always replace the current state with the new state.\n        this.state = state;\n        // Set the pending flag indicating that this action has been scheduled, or\n        // has recursively rescheduled itself.\n        this.pending = true;\n        var id = this.id;\n        var scheduler = this.scheduler;\n        //\n        // Important implementation note:\n        //\n        // Actions only execute once by default, unless rescheduled from within the\n        // scheduled callback. This allows us to implement single and repeat\n        // actions via the same code path, without adding API surface area, as well\n        // as mimic traditional recursion but across asynchronous boundaries.\n        //\n        // However, JS runtimes and timers distinguish between intervals achieved by\n        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n        // serial `setTimeout` calls can be individually delayed, which delays\n        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n        // guarantee the interval callback will be invoked more precisely to the\n        // interval period, regardless of load.\n        //\n        // Therefore, we use `setInterval` to schedule single and repeat actions.\n        // If the action reschedules itself with the same delay, the interval is not\n        // canceled. If the action doesn't reschedule, or reschedules with a\n        // different delay, the interval will be canceled after scheduled callback\n        // execution.\n        //\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.delay = delay;\n        // If this action has already an async Id, don't request a new one.\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    };\n    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        return root_1.root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n    };\n    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If this action is rescheduled with the same delay time, don't clear the interval id.\n        if (delay !== null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        // Otherwise, if the action's delay time is different from the current delay,\n        // or the action has been rescheduled before it's executed, clear the interval id\n        return root_1.root.clearInterval(id) && undefined || undefined;\n    };\n    /**\n     * Immediately executes this action and the `work` it contains.\n     * @return {any}\n     */\n    AsyncAction.prototype.execute = function (state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        var error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            // Dequeue if the action didn't reschedule itself. Don't call\n            // unsubscribe(), because the action could reschedule later.\n            // For example:\n            // ```\n            // scheduler.schedule(function doWork(counter) {\n            //   /* ... I'm a busy worker bee ... */\n            //   var originalAction = this;\n            //   /* wait 100ms before rescheduling the action */\n            //   setTimeout(function () {\n            //     originalAction.schedule(counter + 1);\n            //   }, 100);\n            // }, 1000);\n            // ```\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    };\n    AsyncAction.prototype._execute = function (state, delay) {\n        var errored = false;\n        var errorValue = undefined;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    };\n    AsyncAction.prototype._unsubscribe = function () {\n        var id = this.id;\n        var scheduler = this.scheduler;\n        var actions = scheduler.actions;\n        var index = actions.indexOf(this);\n        this.work = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n        this.delay = null;\n    };\n    return AsyncAction;\n}(Action_1.Action));\nexports.AsyncAction = AsyncAction;\n//# sourceMappingURL=AsyncAction.js.map","\"use strict\";\nvar isArray_1 = require('../util/isArray');\nfunction isNumeric(val) {\n    // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n    // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n    // subtraction forces infinities to NaN\n    // adding 1 corrects loss of precision from parseFloat (#15100)\n    return !isArray_1.isArray(val) && (val - parseFloat(val) + 1) >= 0;\n}\nexports.isNumeric = isNumeric;\n;\n//# sourceMappingURL=isNumeric.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nfunction mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return function mergeMapOperatorFunction(source) {\n        if (typeof resultSelector === 'number') {\n            concurrent = resultSelector;\n            resultSelector = null;\n        }\n        return source.lift(new MergeMapOperator(project, resultSelector, concurrent));\n    };\n}\nexports.mergeMap = mergeMap;\nvar MergeMapOperator = (function () {\n    function MergeMapOperator(project, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n    }\n    MergeMapOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));\n    };\n    return MergeMapOperator;\n}());\nexports.MergeMapOperator = MergeMapOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeMapSubscriber = (function (_super) {\n    __extends(MergeMapSubscriber, _super);\n    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeMapSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapSubscriber.prototype._tryNext = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    };\n    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n    };\n    MergeMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            this.destination.next(innerValue);\n        }\n    };\n    MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.MergeMapSubscriber = MergeMapSubscriber;\n//# sourceMappingURL=mergeMap.js.map","\"use strict\";\nvar Observable_1 = require('./Observable');\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nvar Notification = (function () {\n    function Notification(kind, value, error) {\n        this.kind = kind;\n        this.value = value;\n        this.error = error;\n        this.hasValue = kind === 'N';\n    }\n    /**\n     * Delivers to the given `observer` the value wrapped by this Notification.\n     * @param {Observer} observer\n     * @return\n     */\n    Notification.prototype.observe = function (observer) {\n        switch (this.kind) {\n            case 'N':\n                return observer.next && observer.next(this.value);\n            case 'E':\n                return observer.error && observer.error(this.error);\n            case 'C':\n                return observer.complete && observer.complete();\n        }\n    };\n    /**\n     * Given some {@link Observer} callbacks, deliver the value represented by the\n     * current Notification to the correctly corresponding callback.\n     * @param {function(value: T): void} next An Observer `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.do = function (next, error, complete) {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return next && next(this.value);\n            case 'E':\n                return error && error(this.error);\n            case 'C':\n                return complete && complete();\n        }\n    };\n    /**\n     * Takes an Observer or its individual callback functions, and calls `observe`\n     * or `do` methods accordingly.\n     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n     * the `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.accept = function (nextOrObserver, error, complete) {\n        if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n            return this.observe(nextOrObserver);\n        }\n        else {\n            return this.do(nextOrObserver, error, complete);\n        }\n    };\n    /**\n     * Returns a simple Observable that just delivers the notification represented\n     * by this Notification instance.\n     * @return {any}\n     */\n    Notification.prototype.toObservable = function () {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return Observable_1.Observable.of(this.value);\n            case 'E':\n                return Observable_1.Observable.throw(this.error);\n            case 'C':\n                return Observable_1.Observable.empty();\n        }\n        throw new Error('unexpected notification kind value');\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `next` from a\n     * given value.\n     * @param {T} value The `next` value.\n     * @return {Notification<T>} The \"next\" Notification representing the\n     * argument.\n     */\n    Notification.createNext = function (value) {\n        if (typeof value !== 'undefined') {\n            return new Notification('N', value);\n        }\n        return Notification.undefinedValueNotification;\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `error` from a\n     * given error.\n     * @param {any} [err] The `error` error.\n     * @return {Notification<T>} The \"error\" Notification representing the\n     * argument.\n     */\n    Notification.createError = function (err) {\n        return new Notification('E', undefined, err);\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `complete`.\n     * @return {Notification<any>} The valueless \"complete\" Notification.\n     */\n    Notification.createComplete = function () {\n        return Notification.completeNotification;\n    };\n    Notification.completeNotification = new Notification('C');\n    Notification.undefinedValueNotification = new Notification('N', undefined);\n    return Notification;\n}());\nexports.Notification = Notification;\n//# sourceMappingURL=Notification.js.map","\"use strict\";\nvar isScheduler_1 = require('../util/isScheduler');\nvar of_1 = require('./of');\nvar from_1 = require('./from');\nvar concatAll_1 = require('../operators/concatAll');\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nfunction concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    if (observables.length === 1 || (observables.length === 2 && isScheduler_1.isScheduler(observables[1]))) {\n        return from_1.from(observables[0]);\n    }\n    return concatAll_1.concatAll()(of_1.of.apply(void 0, observables));\n}\nexports.concat = concat;\n//# sourceMappingURL=concat.js.map","\"use strict\";\nvar root_1 = require('../util/root');\nfunction symbolIteratorPonyfill(root) {\n    var Symbol = root.Symbol;\n    if (typeof Symbol === 'function') {\n        if (!Symbol.iterator) {\n            Symbol.iterator = Symbol('iterator polyfill');\n        }\n        return Symbol.iterator;\n    }\n    else {\n        // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n        var Set_1 = root.Set;\n        if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {\n            return '@@iterator';\n        }\n        var Map_1 = root.Map;\n        // required for compatability with es6-shim\n        if (Map_1) {\n            var keys = Object.getOwnPropertyNames(Map_1.prototype);\n            for (var i = 0; i < keys.length; ++i) {\n                var key = keys[i];\n                // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n                if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {\n                    return key;\n                }\n            }\n        }\n        return '@@iterator';\n    }\n}\nexports.symbolIteratorPonyfill = symbolIteratorPonyfill;\nexports.iterator = symbolIteratorPonyfill(root_1.root);\n/**\n * @deprecated use iterator instead\n */\nexports.$$iterator = exports.iterator;\n//# sourceMappingURL=iterator.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nexports.defaultThrottleConfig = {\n    leading: true,\n    trailing: false\n};\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nfunction throttle(durationSelector, config) {\n    if (config === void 0) { config = exports.defaultThrottleConfig; }\n    return function (source) { return source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing)); };\n}\nexports.throttle = throttle;\nvar ThrottleOperator = (function () {\n    function ThrottleOperator(durationSelector, leading, trailing) {\n        this.durationSelector = durationSelector;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    ThrottleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));\n    };\n    return ThrottleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nvar ThrottleSubscriber = (function (_super) {\n    __extends(ThrottleSubscriber, _super);\n    function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.durationSelector = durationSelector;\n        this._leading = _leading;\n        this._trailing = _trailing;\n        this._hasTrailingValue = false;\n    }\n    ThrottleSubscriber.prototype._next = function (value) {\n        if (this.throttled) {\n            if (this._trailing) {\n                this._hasTrailingValue = true;\n                this._trailingValue = value;\n            }\n        }\n        else {\n            var duration = this.tryDurationSelector(value);\n            if (duration) {\n                this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));\n            }\n            if (this._leading) {\n                this.destination.next(value);\n                if (this._trailing) {\n                    this._hasTrailingValue = true;\n                    this._trailingValue = value;\n                }\n            }\n        }\n    };\n    ThrottleSubscriber.prototype.tryDurationSelector = function (value) {\n        try {\n            return this.durationSelector(value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return null;\n        }\n    };\n    ThrottleSubscriber.prototype._unsubscribe = function () {\n        var _a = this, throttled = _a.throttled, _trailingValue = _a._trailingValue, _hasTrailingValue = _a._hasTrailingValue, _trailing = _a._trailing;\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = null;\n            throttled.unsubscribe();\n        }\n    };\n    ThrottleSubscriber.prototype._sendTrailing = function () {\n        var _a = this, destination = _a.destination, throttled = _a.throttled, _trailing = _a._trailing, _trailingValue = _a._trailingValue, _hasTrailingValue = _a._hasTrailingValue;\n        if (throttled && _trailing && _hasTrailingValue) {\n            destination.next(_trailingValue);\n            this._trailingValue = null;\n            this._hasTrailingValue = false;\n        }\n    };\n    ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this._sendTrailing();\n        this._unsubscribe();\n    };\n    ThrottleSubscriber.prototype.notifyComplete = function () {\n        this._sendTrailing();\n        this._unsubscribe();\n    };\n    return ThrottleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=throttle.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nvar EmptyError = (function (_super) {\n    __extends(EmptyError, _super);\n    function EmptyError() {\n        var err = _super.call(this, 'no elements in sequence');\n        this.name = err.name = 'EmptyError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return EmptyError;\n}(Error));\nexports.EmptyError = EmptyError;\n//# sourceMappingURL=EmptyError.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('./Subject');\nvar queue_1 = require('./scheduler/queue');\nvar Subscription_1 = require('./Subscription');\nvar observeOn_1 = require('./operators/observeOn');\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\nvar SubjectSubscription_1 = require('./SubjectSubscription');\n/**\n * @class ReplaySubject<T>\n */\nvar ReplaySubject = (function (_super) {\n    __extends(ReplaySubject, _super);\n    function ReplaySubject(bufferSize, windowTime, scheduler) {\n        if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }\n        if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }\n        _super.call(this);\n        this.scheduler = scheduler;\n        this._events = [];\n        this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n        this._windowTime = windowTime < 1 ? 1 : windowTime;\n    }\n    ReplaySubject.prototype.next = function (value) {\n        var now = this._getNow();\n        this._events.push(new ReplayEvent(now, value));\n        this._trimBufferThenGetEvents();\n        _super.prototype.next.call(this, value);\n    };\n    ReplaySubject.prototype._subscribe = function (subscriber) {\n        var _events = this._trimBufferThenGetEvents();\n        var scheduler = this.scheduler;\n        var subscription;\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscription = Subscription_1.Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscription = Subscription_1.Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            subscription = new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n        }\n        if (scheduler) {\n            subscriber.add(subscriber = new observeOn_1.ObserveOnSubscriber(subscriber, scheduler));\n        }\n        var len = _events.length;\n        for (var i = 0; i < len && !subscriber.closed; i++) {\n            subscriber.next(_events[i].value);\n        }\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n        }\n        return subscription;\n    };\n    ReplaySubject.prototype._getNow = function () {\n        return (this.scheduler || queue_1.queue).now();\n    };\n    ReplaySubject.prototype._trimBufferThenGetEvents = function () {\n        var now = this._getNow();\n        var _bufferSize = this._bufferSize;\n        var _windowTime = this._windowTime;\n        var _events = this._events;\n        var eventsCount = _events.length;\n        var spliceCount = 0;\n        // Trim events that fall out of the time window.\n        // Start at the front of the list. Break early once\n        // we encounter an event that falls within the window.\n        while (spliceCount < eventsCount) {\n            if ((now - _events[spliceCount].time) < _windowTime) {\n                break;\n            }\n            spliceCount++;\n        }\n        if (eventsCount > _bufferSize) {\n            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n        }\n        if (spliceCount > 0) {\n            _events.splice(0, spliceCount);\n        }\n        return _events;\n    };\n    return ReplaySubject;\n}(Subject_1.Subject));\nexports.ReplaySubject = ReplaySubject;\nvar ReplayEvent = (function () {\n    function ReplayEvent(time, value) {\n        this.time = time;\n        this.value = value;\n    }\n    return ReplayEvent;\n}());\n//# sourceMappingURL=ReplaySubject.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar isArray_1 = require('../util/isArray');\nvar Subscriber_1 = require('../Subscriber');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar iterator_1 = require('../symbol/iterator');\n/* tslint:enable:max-line-length */\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nfunction zip() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return function zipOperatorFunction(source) {\n        return source.lift.call(zipStatic.apply(void 0, [source].concat(observables)));\n    };\n}\nexports.zip = zip;\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nfunction zipStatic() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = observables[observables.length - 1];\n    if (typeof project === 'function') {\n        observables.pop();\n    }\n    return new ArrayObservable_1.ArrayObservable(observables).lift(new ZipOperator(project));\n}\nexports.zipStatic = zipStatic;\nvar ZipOperator = (function () {\n    function ZipOperator(project) {\n        this.project = project;\n    }\n    ZipOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ZipSubscriber(subscriber, this.project));\n    };\n    return ZipOperator;\n}());\nexports.ZipOperator = ZipOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ZipSubscriber = (function (_super) {\n    __extends(ZipSubscriber, _super);\n    function ZipSubscriber(destination, project, values) {\n        if (values === void 0) { values = Object.create(null); }\n        _super.call(this, destination);\n        this.iterators = [];\n        this.active = 0;\n        this.project = (typeof project === 'function') ? project : null;\n        this.values = values;\n    }\n    ZipSubscriber.prototype._next = function (value) {\n        var iterators = this.iterators;\n        if (isArray_1.isArray(value)) {\n            iterators.push(new StaticArrayIterator(value));\n        }\n        else if (typeof value[iterator_1.iterator] === 'function') {\n            iterators.push(new StaticIterator(value[iterator_1.iterator]()));\n        }\n        else {\n            iterators.push(new ZipBufferIterator(this.destination, this, value));\n        }\n    };\n    ZipSubscriber.prototype._complete = function () {\n        var iterators = this.iterators;\n        var len = iterators.length;\n        if (len === 0) {\n            this.destination.complete();\n            return;\n        }\n        this.active = len;\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            if (iterator.stillUnsubscribed) {\n                this.add(iterator.subscribe(iterator, i));\n            }\n            else {\n                this.active--; // not an observable\n            }\n        }\n    };\n    ZipSubscriber.prototype.notifyInactive = function () {\n        this.active--;\n        if (this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    ZipSubscriber.prototype.checkIterators = function () {\n        var iterators = this.iterators;\n        var len = iterators.length;\n        var destination = this.destination;\n        // abort if not all of them have values\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n                return;\n            }\n        }\n        var shouldComplete = false;\n        var args = [];\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            var result = iterator.next();\n            // check to see if it's completed now that you've gotten\n            // the next value.\n            if (iterator.hasCompleted()) {\n                shouldComplete = true;\n            }\n            if (result.done) {\n                destination.complete();\n                return;\n            }\n            args.push(result.value);\n        }\n        if (this.project) {\n            this._tryProject(args);\n        }\n        else {\n            destination.next(args);\n        }\n        if (shouldComplete) {\n            destination.complete();\n        }\n    };\n    ZipSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return ZipSubscriber;\n}(Subscriber_1.Subscriber));\nexports.ZipSubscriber = ZipSubscriber;\nvar StaticIterator = (function () {\n    function StaticIterator(iterator) {\n        this.iterator = iterator;\n        this.nextResult = iterator.next();\n    }\n    StaticIterator.prototype.hasValue = function () {\n        return true;\n    };\n    StaticIterator.prototype.next = function () {\n        var result = this.nextResult;\n        this.nextResult = this.iterator.next();\n        return result;\n    };\n    StaticIterator.prototype.hasCompleted = function () {\n        var nextResult = this.nextResult;\n        return nextResult && nextResult.done;\n    };\n    return StaticIterator;\n}());\nvar StaticArrayIterator = (function () {\n    function StaticArrayIterator(array) {\n        this.array = array;\n        this.index = 0;\n        this.length = 0;\n        this.length = array.length;\n    }\n    StaticArrayIterator.prototype[iterator_1.iterator] = function () {\n        return this;\n    };\n    StaticArrayIterator.prototype.next = function (value) {\n        var i = this.index++;\n        var array = this.array;\n        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n    };\n    StaticArrayIterator.prototype.hasValue = function () {\n        return this.array.length > this.index;\n    };\n    StaticArrayIterator.prototype.hasCompleted = function () {\n        return this.array.length === this.index;\n    };\n    return StaticArrayIterator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ZipBufferIterator = (function (_super) {\n    __extends(ZipBufferIterator, _super);\n    function ZipBufferIterator(destination, parent, observable) {\n        _super.call(this, destination);\n        this.parent = parent;\n        this.observable = observable;\n        this.stillUnsubscribed = true;\n        this.buffer = [];\n        this.isComplete = false;\n    }\n    ZipBufferIterator.prototype[iterator_1.iterator] = function () {\n        return this;\n    };\n    // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n    //    this is legit because `next()` will never be called by a subscription in this case.\n    ZipBufferIterator.prototype.next = function () {\n        var buffer = this.buffer;\n        if (buffer.length === 0 && this.isComplete) {\n            return { value: null, done: true };\n        }\n        else {\n            return { value: buffer.shift(), done: false };\n        }\n    };\n    ZipBufferIterator.prototype.hasValue = function () {\n        return this.buffer.length > 0;\n    };\n    ZipBufferIterator.prototype.hasCompleted = function () {\n        return this.buffer.length === 0 && this.isComplete;\n    };\n    ZipBufferIterator.prototype.notifyComplete = function () {\n        if (this.buffer.length > 0) {\n            this.isComplete = true;\n            this.parent.notifyInactive();\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.buffer.push(innerValue);\n        this.parent.checkIterators();\n    };\n    ZipBufferIterator.prototype.subscribe = function (value, index) {\n        return subscribeToResult_1.subscribeToResult(this, this.observable, this, index);\n    };\n    return ZipBufferIterator;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=zip.js.map","\"use strict\";\nfunction isDate(value) {\n    return value instanceof Date && !isNaN(+value);\n}\nexports.isDate = isDate;\n//# sourceMappingURL=isDate.js.map","\"use strict\";\nvar Observable_1 = require('../Observable');\nvar ArrayObservable_1 = require('./ArrayObservable');\nvar isScheduler_1 = require('../util/isScheduler');\nvar mergeAll_1 = require('../operators/mergeAll');\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nfunction merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var concurrent = Number.POSITIVE_INFINITY;\n    var scheduler = null;\n    var last = observables[observables.length - 1];\n    if (isScheduler_1.isScheduler(last)) {\n        scheduler = observables.pop();\n        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n            concurrent = observables.pop();\n        }\n    }\n    else if (typeof last === 'number') {\n        concurrent = observables.pop();\n    }\n    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_1.Observable) {\n        return observables[0];\n    }\n    return mergeAll_1.mergeAll(concurrent)(new ArrayObservable_1.ArrayObservable(observables, scheduler));\n}\nexports.merge = merge;\n//# sourceMappingURL=merge.js.map","\"use strict\";\nvar mergeMap_1 = require('./mergeMap');\nvar identity_1 = require('../util/identity');\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nfunction mergeAll(concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeMap_1.mergeMap(identity_1.identity, null, concurrent);\n}\nexports.mergeAll = mergeAll;\n//# sourceMappingURL=mergeAll.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Notification_1 = require('../Notification');\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nfunction observeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return function observeOnOperatorFunction(source) {\n        return source.lift(new ObserveOnOperator(scheduler, delay));\n    };\n}\nexports.observeOn = observeOn;\nvar ObserveOnOperator = (function () {\n    function ObserveOnOperator(scheduler, delay) {\n        if (delay === void 0) { delay = 0; }\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n    };\n    return ObserveOnOperator;\n}());\nexports.ObserveOnOperator = ObserveOnOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ObserveOnSubscriber = (function (_super) {\n    __extends(ObserveOnSubscriber, _super);\n    function ObserveOnSubscriber(destination, scheduler, delay) {\n        if (delay === void 0) { delay = 0; }\n        _super.call(this, destination);\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnSubscriber.dispatch = function (arg) {\n        var notification = arg.notification, destination = arg.destination;\n        notification.observe(destination);\n        this.unsubscribe();\n    };\n    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n    };\n    ObserveOnSubscriber.prototype._next = function (value) {\n        this.scheduleMessage(Notification_1.Notification.createNext(value));\n    };\n    ObserveOnSubscriber.prototype._error = function (err) {\n        this.scheduleMessage(Notification_1.Notification.createError(err));\n    };\n    ObserveOnSubscriber.prototype._complete = function () {\n        this.scheduleMessage(Notification_1.Notification.createComplete());\n    };\n    return ObserveOnSubscriber;\n}(Subscriber_1.Subscriber));\nexports.ObserveOnSubscriber = ObserveOnSubscriber;\nvar ObserveOnMessage = (function () {\n    function ObserveOnMessage(notification, destination) {\n        this.notification = notification;\n        this.destination = destination;\n    }\n    return ObserveOnMessage;\n}());\nexports.ObserveOnMessage = ObserveOnMessage;\n//# sourceMappingURL=observeOn.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar isArray_1 = require('../util/isArray');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar none = {};\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nfunction combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = null;\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n        observables = observables[0].slice();\n    }\n    return function (source) { return source.lift.call(new ArrayObservable_1.ArrayObservable([source].concat(observables)), new CombineLatestOperator(project)); };\n}\nexports.combineLatest = combineLatest;\nvar CombineLatestOperator = (function () {\n    function CombineLatestOperator(project) {\n        this.project = project;\n    }\n    CombineLatestOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n    };\n    return CombineLatestOperator;\n}());\nexports.CombineLatestOperator = CombineLatestOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CombineLatestSubscriber = (function (_super) {\n    __extends(CombineLatestSubscriber, _super);\n    function CombineLatestSubscriber(destination, project) {\n        _super.call(this, destination);\n        this.project = project;\n        this.active = 0;\n        this.values = [];\n        this.observables = [];\n    }\n    CombineLatestSubscriber.prototype._next = function (observable) {\n        this.values.push(none);\n        this.observables.push(observable);\n    };\n    CombineLatestSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            this.active = len;\n            this.toRespond = len;\n            for (var i = 0; i < len; i++) {\n                var observable = observables[i];\n                this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\n        if ((this.active -= 1) === 0) {\n            this.destination.complete();\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var values = this.values;\n        var oldVal = values[outerIndex];\n        var toRespond = !this.toRespond\n            ? 0\n            : oldVal === none ? --this.toRespond : this.toRespond;\n        values[outerIndex] = innerValue;\n        if (toRespond === 0) {\n            if (this.project) {\n                this._tryProject(values);\n            }\n            else {\n                this.destination.next(values.slice());\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype._tryProject = function (values) {\n        var result;\n        try {\n            result = this.project.apply(this, values);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return CombineLatestSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.CombineLatestSubscriber = CombineLatestSubscriber;\n//# sourceMappingURL=combineLatest.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('./Subject');\nvar Subscription_1 = require('./Subscription');\n/**\n * @class AsyncSubject<T>\n */\nvar AsyncSubject = (function (_super) {\n    __extends(AsyncSubject, _super);\n    function AsyncSubject() {\n        _super.apply(this, arguments);\n        this.value = null;\n        this.hasNext = false;\n        this.hasCompleted = false;\n    }\n    AsyncSubject.prototype._subscribe = function (subscriber) {\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else if (this.hasCompleted && this.hasNext) {\n            subscriber.next(this.value);\n            subscriber.complete();\n            return Subscription_1.Subscription.EMPTY;\n        }\n        return _super.prototype._subscribe.call(this, subscriber);\n    };\n    AsyncSubject.prototype.next = function (value) {\n        if (!this.hasCompleted) {\n            this.value = value;\n            this.hasNext = true;\n        }\n    };\n    AsyncSubject.prototype.error = function (error) {\n        if (!this.hasCompleted) {\n            _super.prototype.error.call(this, error);\n        }\n    };\n    AsyncSubject.prototype.complete = function () {\n        this.hasCompleted = true;\n        if (this.hasNext) {\n            _super.prototype.next.call(this, this.value);\n        }\n        _super.prototype.complete.call(this);\n    };\n    return AsyncSubject;\n}(Subject_1.Subject));\nexports.AsyncSubject = AsyncSubject;\n//# sourceMappingURL=AsyncSubject.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nvar ObjectUnsubscribedError = (function (_super) {\n    __extends(ObjectUnsubscribedError, _super);\n    function ObjectUnsubscribedError() {\n        var err = _super.call(this, 'object unsubscribed');\n        this.name = err.name = 'ObjectUnsubscribedError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ObjectUnsubscribedError;\n}(Error));\nexports.ObjectUnsubscribedError = ObjectUnsubscribedError;\n//# sourceMappingURL=ObjectUnsubscribedError.js.map","\"use strict\";\nvar root_1 = require('../util/root');\nfunction getSymbolObservable(context) {\n    var $$observable;\n    var Symbol = context.Symbol;\n    if (typeof Symbol === 'function') {\n        if (Symbol.observable) {\n            $$observable = Symbol.observable;\n        }\n        else {\n            $$observable = Symbol('observable');\n            Symbol.observable = $$observable;\n        }\n    }\n    else {\n        $$observable = '@@observable';\n    }\n    return $$observable;\n}\nexports.getSymbolObservable = getSymbolObservable;\nexports.observable = getSymbolObservable(root_1.root);\n/**\n * @deprecated use observable instead\n */\nexports.$$observable = exports.observable;\n//# sourceMappingURL=observable.js.map","\"use strict\";\nvar root_1 = require('../util/root');\nvar Symbol = root_1.root.Symbol;\nexports.rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n    Symbol.for('rxSubscriber') : '@@rxSubscriber';\n/**\n * @deprecated use rxSubscriber instead\n */\nexports.$$rxSubscriber = exports.rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map","\"use strict\";\nfunction isFunction(x) {\n    return typeof x === 'function';\n}\nexports.isFunction = isFunction;\n//# sourceMappingURL=isFunction.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar map_1 = require('./map');\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nfunction timestamp(scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return map_1.map(function (value) { return new Timestamp(value, scheduler.now()); });\n    // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));\n}\nexports.timestamp = timestamp;\nvar Timestamp = (function () {\n    function Timestamp(value, timestamp) {\n        this.value = value;\n        this.timestamp = timestamp;\n    }\n    return Timestamp;\n}());\nexports.Timestamp = Timestamp;\n;\n//# sourceMappingURL=timestamp.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nfunction switchMap(project, resultSelector) {\n    return function switchMapOperatorFunction(source) {\n        return source.lift(new SwitchMapOperator(project, resultSelector));\n    };\n}\nexports.switchMap = switchMap;\nvar SwitchMapOperator = (function () {\n    function SwitchMapOperator(project, resultSelector) {\n        this.project = project;\n        this.resultSelector = resultSelector;\n    }\n    SwitchMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n    };\n    return SwitchMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapSubscriber = (function (_super) {\n    __extends(SwitchMapSubscriber, _super);\n    function SwitchMapSubscriber(destination, project, resultSelector) {\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.index = 0;\n    }\n    SwitchMapSubscriber.prototype._next = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (error) {\n            this.destination.error(error);\n            return;\n        }\n        this._innerSub(result, value, index);\n    };\n    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index));\n    };\n    SwitchMapSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            this.destination.next(innerValue);\n        }\n    };\n    SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return SwitchMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=switchMap.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nfunction refCount() {\n    return function refCountOperatorFunction(source) {\n        return source.lift(new RefCountOperator(source));\n    };\n}\nexports.refCount = refCount;\nvar RefCountOperator = (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = (function (_super) {\n    __extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=refCount.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nfunction takeLast(count) {\n    return function takeLastOperatorFunction(source) {\n        if (count === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        else {\n            return source.lift(new TakeLastOperator(count));\n        }\n    };\n}\nexports.takeLast = takeLast;\nvar TakeLastOperator = (function () {\n    function TakeLastOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    TakeLastOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n    };\n    return TakeLastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeLastSubscriber = (function (_super) {\n    __extends(TakeLastSubscriber, _super);\n    function TakeLastSubscriber(destination, total) {\n        _super.call(this, destination);\n        this.total = total;\n        this.ring = new Array();\n        this.count = 0;\n    }\n    TakeLastSubscriber.prototype._next = function (value) {\n        var ring = this.ring;\n        var total = this.total;\n        var count = this.count++;\n        if (ring.length < total) {\n            ring.push(value);\n        }\n        else {\n            var index = count % total;\n            ring[index] = value;\n        }\n    };\n    TakeLastSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        var count = this.count;\n        if (count > 0) {\n            var total = this.count >= this.total ? this.total : this.count;\n            var ring = this.ring;\n            for (var i = 0; i < total; i++) {\n                var idx = (count++) % total;\n                destination.next(ring[idx]);\n            }\n        }\n        destination.complete();\n    };\n    return TakeLastSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=takeLast.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nfunction scan(accumulator, seed) {\n    var hasSeed = false;\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        hasSeed = true;\n    }\n    return function scanOperatorFunction(source) {\n        return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n    };\n}\nexports.scan = scan;\nvar ScanOperator = (function () {\n    function ScanOperator(accumulator, seed, hasSeed) {\n        if (hasSeed === void 0) { hasSeed = false; }\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.hasSeed = hasSeed;\n    }\n    ScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n    };\n    return ScanOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ScanSubscriber = (function (_super) {\n    __extends(ScanSubscriber, _super);\n    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {\n        _super.call(this, destination);\n        this.accumulator = accumulator;\n        this._seed = _seed;\n        this.hasSeed = hasSeed;\n        this.index = 0;\n    }\n    Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\n        get: function () {\n            return this._seed;\n        },\n        set: function (value) {\n            this.hasSeed = true;\n            this._seed = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ScanSubscriber.prototype._next = function (value) {\n        if (!this.hasSeed) {\n            this.seed = value;\n            this.destination.next(value);\n        }\n        else {\n            return this._tryNext(value);\n        }\n    };\n    ScanSubscriber.prototype._tryNext = function (value) {\n        var index = this.index++;\n        var result;\n        try {\n            result = this.accumulator(this.seed, value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n        this.seed = result;\n        this.destination.next(result);\n    };\n    return ScanSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=scan.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nfunction audit(durationSelector) {\n    return function auditOperatorFunction(source) {\n        return source.lift(new AuditOperator(durationSelector));\n    };\n}\nexports.audit = audit;\nvar AuditOperator = (function () {\n    function AuditOperator(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    AuditOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));\n    };\n    return AuditOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AuditSubscriber = (function (_super) {\n    __extends(AuditSubscriber, _super);\n    function AuditSubscriber(destination, durationSelector) {\n        _super.call(this, destination);\n        this.durationSelector = durationSelector;\n        this.hasValue = false;\n    }\n    AuditSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n        if (!this.throttled) {\n            var duration = tryCatch_1.tryCatch(this.durationSelector)(value);\n            if (duration === errorObject_1.errorObject) {\n                this.destination.error(errorObject_1.errorObject.e);\n            }\n            else {\n                var innerSubscription = subscribeToResult_1.subscribeToResult(this, duration);\n                if (innerSubscription.closed) {\n                    this.clearThrottle();\n                }\n                else {\n                    this.add(this.throttled = innerSubscription);\n                }\n            }\n        }\n    };\n    AuditSubscriber.prototype.clearThrottle = function () {\n        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = null;\n            throttled.unsubscribe();\n        }\n        if (hasValue) {\n            this.value = null;\n            this.hasValue = false;\n            this.destination.next(value);\n        }\n    };\n    AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        this.clearThrottle();\n    };\n    AuditSubscriber.prototype.notifyComplete = function () {\n        this.clearThrottle();\n    };\n    return AuditSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=audit.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nfunction find(predicate, thisArg) {\n    if (typeof predicate !== 'function') {\n        throw new TypeError('predicate is not a function');\n    }\n    return function (source) { return source.lift(new FindValueOperator(predicate, source, false, thisArg)); };\n}\nexports.find = find;\nvar FindValueOperator = (function () {\n    function FindValueOperator(predicate, source, yieldIndex, thisArg) {\n        this.predicate = predicate;\n        this.source = source;\n        this.yieldIndex = yieldIndex;\n        this.thisArg = thisArg;\n    }\n    FindValueOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n    };\n    return FindValueOperator;\n}());\nexports.FindValueOperator = FindValueOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FindValueSubscriber = (function (_super) {\n    __extends(FindValueSubscriber, _super);\n    function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.source = source;\n        this.yieldIndex = yieldIndex;\n        this.thisArg = thisArg;\n        this.index = 0;\n    }\n    FindValueSubscriber.prototype.notifyComplete = function (value) {\n        var destination = this.destination;\n        destination.next(value);\n        destination.complete();\n    };\n    FindValueSubscriber.prototype._next = function (value) {\n        var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;\n        var index = this.index++;\n        try {\n            var result = predicate.call(thisArg || this, value, index, this.source);\n            if (result) {\n                this.notifyComplete(this.yieldIndex ? index : value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    FindValueSubscriber.prototype._complete = function () {\n        this.notifyComplete(this.yieldIndex ? -1 : undefined);\n    };\n    return FindValueSubscriber;\n}(Subscriber_1.Subscriber));\nexports.FindValueSubscriber = FindValueSubscriber;\n//# sourceMappingURL=find.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nfunction filter(predicate, thisArg) {\n    return function filterOperatorFunction(source) {\n        return source.lift(new FilterOperator(predicate, thisArg));\n    };\n}\nexports.filter = filter;\nvar FilterOperator = (function () {\n    function FilterOperator(predicate, thisArg) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n    }\n    FilterOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n    };\n    return FilterOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FilterSubscriber = (function (_super) {\n    __extends(FilterSubscriber, _super);\n    function FilterSubscriber(destination, predicate, thisArg) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.count = 0;\n    }\n    // the try catch block below is left specifically for\n    // optimization and perf reasons. a tryCatcher is not necessary here.\n    FilterSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.destination.next(value);\n        }\n    };\n    return FilterSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=filter.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nfunction distinctUntilChanged(compare, keySelector) {\n    return function (source) { return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); };\n}\nexports.distinctUntilChanged = distinctUntilChanged;\nvar DistinctUntilChangedOperator = (function () {\n    function DistinctUntilChangedOperator(compare, keySelector) {\n        this.compare = compare;\n        this.keySelector = keySelector;\n    }\n    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n    };\n    return DistinctUntilChangedOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctUntilChangedSubscriber = (function (_super) {\n    __extends(DistinctUntilChangedSubscriber, _super);\n    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {\n        _super.call(this, destination);\n        this.keySelector = keySelector;\n        this.hasKey = false;\n        if (typeof compare === 'function') {\n            this.compare = compare;\n        }\n    }\n    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {\n        return x === y;\n    };\n    DistinctUntilChangedSubscriber.prototype._next = function (value) {\n        var keySelector = this.keySelector;\n        var key = value;\n        if (keySelector) {\n            key = tryCatch_1.tryCatch(this.keySelector)(value);\n            if (key === errorObject_1.errorObject) {\n                return this.destination.error(errorObject_1.errorObject.e);\n            }\n        }\n        var result = false;\n        if (this.hasKey) {\n            result = tryCatch_1.tryCatch(this.compare)(this.key, key);\n            if (result === errorObject_1.errorObject) {\n                return this.destination.error(errorObject_1.errorObject.e);\n            }\n        }\n        else {\n            this.hasKey = true;\n        }\n        if (Boolean(result) === false) {\n            this.key = key;\n            this.destination.next(value);\n        }\n    };\n    return DistinctUntilChangedSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=distinctUntilChanged.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nfunction defaultIfEmpty(defaultValue) {\n    if (defaultValue === void 0) { defaultValue = null; }\n    return function (source) { return source.lift(new DefaultIfEmptyOperator(defaultValue)); };\n}\nexports.defaultIfEmpty = defaultIfEmpty;\nvar DefaultIfEmptyOperator = (function () {\n    function DefaultIfEmptyOperator(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n    DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n    };\n    return DefaultIfEmptyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DefaultIfEmptySubscriber = (function (_super) {\n    __extends(DefaultIfEmptySubscriber, _super);\n    function DefaultIfEmptySubscriber(destination, defaultValue) {\n        _super.call(this, destination);\n        this.defaultValue = defaultValue;\n        this.isEmpty = true;\n    }\n    DefaultIfEmptySubscriber.prototype._next = function (value) {\n        this.isEmpty = false;\n        this.destination.next(value);\n    };\n    DefaultIfEmptySubscriber.prototype._complete = function () {\n        if (this.isEmpty) {\n            this.destination.next(this.defaultValue);\n        }\n        this.destination.complete();\n    };\n    return DefaultIfEmptySubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=defaultIfEmpty.js.map","\"use strict\";\nvar mergeMap_1 = require('./mergeMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nfunction concatMap(project, resultSelector) {\n    return mergeMap_1.mergeMap(project, resultSelector, 1);\n}\nexports.concatMap = concatMap;\n//# sourceMappingURL=concatMap.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar FromObservable_1 = require('../observable/FromObservable');\nvar isArray_1 = require('../util/isArray');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\nfunction onErrorResumeNext() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i - 0] = arguments[_i];\n    }\n    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    return function (source) { return source.lift(new OnErrorResumeNextOperator(nextSources)); };\n}\nexports.onErrorResumeNext = onErrorResumeNext;\n/* tslint:enable:max-line-length */\nfunction onErrorResumeNextStatic() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i - 0] = arguments[_i];\n    }\n    var source = null;\n    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    source = nextSources.shift();\n    return new FromObservable_1.FromObservable(source, null).lift(new OnErrorResumeNextOperator(nextSources));\n}\nexports.onErrorResumeNextStatic = onErrorResumeNextStatic;\nvar OnErrorResumeNextOperator = (function () {\n    function OnErrorResumeNextOperator(nextSources) {\n        this.nextSources = nextSources;\n    }\n    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n    };\n    return OnErrorResumeNextOperator;\n}());\nvar OnErrorResumeNextSubscriber = (function (_super) {\n    __extends(OnErrorResumeNextSubscriber, _super);\n    function OnErrorResumeNextSubscriber(destination, nextSources) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.nextSources = nextSources;\n    }\n    OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype._error = function (err) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype._complete = function () {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {\n        var next = this.nextSources.shift();\n        if (next) {\n            this.add(subscribeToResult_1.subscribeToResult(this, next));\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    return OnErrorResumeNextSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=onErrorResumeNext.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isArray_1 = require('../util/isArray');\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nfunction race() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    // if the only argument is an array, it was most likely called with\n    // `race([obs1, obs2, ...])`\n    if (observables.length === 1) {\n        if (isArray_1.isArray(observables[0])) {\n            observables = observables[0];\n        }\n        else {\n            return observables[0];\n        }\n    }\n    return new ArrayObservable_1.ArrayObservable(observables).lift(new RaceOperator());\n}\nexports.race = race;\nvar RaceOperator = (function () {\n    function RaceOperator() {\n    }\n    RaceOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RaceSubscriber(subscriber));\n    };\n    return RaceOperator;\n}());\nexports.RaceOperator = RaceOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RaceSubscriber = (function (_super) {\n    __extends(RaceSubscriber, _super);\n    function RaceSubscriber(destination) {\n        _super.call(this, destination);\n        this.hasFirst = false;\n        this.observables = [];\n        this.subscriptions = [];\n    }\n    RaceSubscriber.prototype._next = function (observable) {\n        this.observables.push(observable);\n    };\n    RaceSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            for (var i = 0; i < len && !this.hasFirst; i++) {\n                var observable = observables[i];\n                var subscription = subscribeToResult_1.subscribeToResult(this, observable, observable, i);\n                if (this.subscriptions) {\n                    this.subscriptions.push(subscription);\n                }\n                this.add(subscription);\n            }\n            this.observables = null;\n        }\n    };\n    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (!this.hasFirst) {\n            this.hasFirst = true;\n            for (var i = 0; i < this.subscriptions.length; i++) {\n                if (i !== outerIndex) {\n                    var subscription = this.subscriptions[i];\n                    subscription.unsubscribe();\n                    this.remove(subscription);\n                }\n            }\n            this.subscriptions = null;\n        }\n        this.destination.next(innerValue);\n    };\n    return RaceSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.RaceSubscriber = RaceSubscriber;\n//# sourceMappingURL=race.js.map","\"use strict\";\nvar mergeAll_1 = require('./mergeAll');\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nfunction concatAll() {\n    return mergeAll_1.mergeAll(1);\n}\nexports.concatAll = concatAll;\n//# sourceMappingURL=concatAll.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ScalarObservable = (function (_super) {\n    __extends(ScalarObservable, _super);\n    function ScalarObservable(value, scheduler) {\n        _super.call(this);\n        this.value = value;\n        this.scheduler = scheduler;\n        this._isScalar = true;\n        if (scheduler) {\n            this._isScalar = false;\n        }\n    }\n    ScalarObservable.create = function (value, scheduler) {\n        return new ScalarObservable(value, scheduler);\n    };\n    ScalarObservable.dispatch = function (state) {\n        var done = state.done, value = state.value, subscriber = state.subscriber;\n        if (done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(value);\n        if (subscriber.closed) {\n            return;\n        }\n        state.done = true;\n        this.schedule(state);\n    };\n    ScalarObservable.prototype._subscribe = function (subscriber) {\n        var value = this.value;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ScalarObservable.dispatch, 0, {\n                done: false, value: value, subscriber: subscriber\n            });\n        }\n        else {\n            subscriber.next(value);\n            if (!subscriber.closed) {\n                subscriber.complete();\n            }\n        }\n    };\n    return ScalarObservable;\n}(Observable_1.Observable));\nexports.ScalarObservable = ScalarObservable;\n//# sourceMappingURL=ScalarObservable.js.map","\"use strict\";\n/* tslint:disable:no-empty */\nfunction noop() { }\nexports.noop = noop;\n//# sourceMappingURL=noop.js.map","\"use strict\";\nvar noop_1 = require('./noop');\n/* tslint:enable:max-line-length */\nfunction pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i - 0] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\nexports.pipe = pipe;\n/* @internal */\nfunction pipeFromArray(fns) {\n    if (!fns) {\n        return noop_1.noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\nexports.pipeFromArray = pipeFromArray;\n//# sourceMappingURL=pipe.js.map","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncAction_1 = require('./AsyncAction');\nvar AsyncScheduler_1 = require('./AsyncScheduler');\nvar VirtualTimeScheduler = (function (_super) {\n    __extends(VirtualTimeScheduler, _super);\n    function VirtualTimeScheduler(SchedulerAction, maxFrames) {\n        var _this = this;\n        if (SchedulerAction === void 0) { SchedulerAction = VirtualAction; }\n        if (maxFrames === void 0) { maxFrames = Number.POSITIVE_INFINITY; }\n        _super.call(this, SchedulerAction, function () { return _this.frame; });\n        this.maxFrames = maxFrames;\n        this.frame = 0;\n        this.index = -1;\n    }\n    /**\n     * Prompt the Scheduler to execute all of its queued actions, therefore\n     * clearing its queue.\n     * @return {void}\n     */\n    VirtualTimeScheduler.prototype.flush = function () {\n        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;\n        var error, action;\n        while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        }\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    VirtualTimeScheduler.frameTimeFactor = 10;\n    return VirtualTimeScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.VirtualTimeScheduler = VirtualTimeScheduler;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar VirtualAction = (function (_super) {\n    __extends(VirtualAction, _super);\n    function VirtualAction(scheduler, work, index) {\n        if (index === void 0) { index = scheduler.index += 1; }\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.index = index;\n        this.active = true;\n        this.index = scheduler.index = index;\n    }\n    VirtualAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (!this.id) {\n            return _super.prototype.schedule.call(this, state, delay);\n        }\n        this.active = false;\n        // If an action is rescheduled, we save allocations by mutating its state,\n        // pushing it to the end of the scheduler queue, and recycling the action.\n        // But since the VirtualTimeScheduler is used for testing, VirtualActions\n        // must be immutable so they can be inspected later.\n        var action = new VirtualAction(this.scheduler, this.work);\n        this.add(action);\n        return action.schedule(state, delay);\n    };\n    VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        this.delay = scheduler.frame + delay;\n        var actions = scheduler.actions;\n        actions.push(this);\n        actions.sort(VirtualAction.sortActions);\n        return true;\n    };\n    VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        return undefined;\n    };\n    VirtualAction.prototype._execute = function (state, delay) {\n        if (this.active === true) {\n            return _super.prototype._execute.call(this, state, delay);\n        }\n    };\n    VirtualAction.sortActions = function (a, b) {\n        if (a.delay === b.delay) {\n            if (a.index === b.index) {\n                return 0;\n            }\n            else if (a.index > b.index) {\n                return 1;\n            }\n            else {\n                return -1;\n            }\n        }\n        else if (a.delay > b.delay) {\n            return 1;\n        }\n        else {\n            return -1;\n        }\n    };\n    return VirtualAction;\n}(AsyncAction_1.AsyncAction));\nexports.VirtualAction = VirtualAction;\n//# sourceMappingURL=VirtualTimeScheduler.js.map","\"use strict\";\nfunction applyMixins(derivedCtor, baseCtors) {\n    for (var i = 0, len = baseCtors.length; i < len; i++) {\n        var baseCtor = baseCtors[i];\n        var propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n        for (var j = 0, len2 = propertyKeys.length; j < len2; j++) {\n            var name_1 = propertyKeys[j];\n            derivedCtor.prototype[name_1] = baseCtor.prototype[name_1];\n        }\n    }\n}\nexports.applyMixins = applyMixins;\n//# sourceMappingURL=applyMixins.js.map","\"use strict\";\nvar SubscriptionLog = (function () {\n    function SubscriptionLog(subscribedFrame, unsubscribedFrame) {\n        if (unsubscribedFrame === void 0) { unsubscribedFrame = Number.POSITIVE_INFINITY; }\n        this.subscribedFrame = subscribedFrame;\n        this.unsubscribedFrame = unsubscribedFrame;\n    }\n    return SubscriptionLog;\n}());\nexports.SubscriptionLog = SubscriptionLog;\n//# sourceMappingURL=SubscriptionLog.js.map","\"use strict\";\nvar SubscriptionLog_1 = require('./SubscriptionLog');\nvar SubscriptionLoggable = (function () {\n    function SubscriptionLoggable() {\n        this.subscriptions = [];\n    }\n    SubscriptionLoggable.prototype.logSubscribedFrame = function () {\n        this.subscriptions.push(new SubscriptionLog_1.SubscriptionLog(this.scheduler.now()));\n        return this.subscriptions.length - 1;\n    };\n    SubscriptionLoggable.prototype.logUnsubscribedFrame = function (index) {\n        var subscriptionLogs = this.subscriptions;\n        var oldSubscriptionLog = subscriptionLogs[index];\n        subscriptionLogs[index] = new SubscriptionLog_1.SubscriptionLog(oldSubscriptionLog.subscribedFrame, this.scheduler.now());\n    };\n    return SubscriptionLoggable;\n}());\nexports.SubscriptionLoggable = SubscriptionLoggable;\n//# sourceMappingURL=SubscriptionLoggable.js.map","\"use strict\";\nvar zip_1 = require('./zip');\nfunction zipAll(project) {\n    return function (source) { return source.lift(new zip_1.ZipOperator(project)); };\n}\nexports.zipAll = zipAll;\n//# sourceMappingURL=zipAll.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nfunction withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i - 0] = arguments[_i];\n    }\n    return function (source) {\n        var project;\n        if (typeof args[args.length - 1] === 'function') {\n            project = args.pop();\n        }\n        var observables = args;\n        return source.lift(new WithLatestFromOperator(observables, project));\n    };\n}\nexports.withLatestFrom = withLatestFrom;\nvar WithLatestFromOperator = (function () {\n    function WithLatestFromOperator(observables, project) {\n        this.observables = observables;\n        this.project = project;\n    }\n    WithLatestFromOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n    };\n    return WithLatestFromOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WithLatestFromSubscriber = (function (_super) {\n    __extends(WithLatestFromSubscriber, _super);\n    function WithLatestFromSubscriber(destination, observables, project) {\n        _super.call(this, destination);\n        this.observables = observables;\n        this.project = project;\n        this.toRespond = [];\n        var len = observables.length;\n        this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            this.toRespond.push(i);\n        }\n        for (var i = 0; i < len; i++) {\n            var observable = observables[i];\n            this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));\n        }\n    }\n    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        var toRespond = this.toRespond;\n        if (toRespond.length > 0) {\n            var found = toRespond.indexOf(outerIndex);\n            if (found !== -1) {\n                toRespond.splice(found, 1);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    WithLatestFromSubscriber.prototype._next = function (value) {\n        if (this.toRespond.length === 0) {\n            var args = [value].concat(this.values);\n            if (this.project) {\n                this._tryProject(args);\n            }\n            else {\n                this.destination.next(args);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return WithLatestFromSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=withLatestFrom.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nfunction windowWhen(closingSelector) {\n    return function windowWhenOperatorFunction(source) {\n        return source.lift(new WindowOperator(closingSelector));\n    };\n}\nexports.windowWhen = windowWhen;\nvar WindowOperator = (function () {\n    function WindowOperator(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    WindowOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n    };\n    return WindowOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowSubscriber = (function (_super) {\n    __extends(WindowSubscriber, _super);\n    function WindowSubscriber(destination, closingSelector) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.closingSelector = closingSelector;\n        this.openWindow();\n    }\n    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openWindow(innerSub);\n    };\n    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.openWindow(innerSub);\n    };\n    WindowSubscriber.prototype._next = function (value) {\n        this.window.next(value);\n    };\n    WindowSubscriber.prototype._error = function (err) {\n        this.window.error(err);\n        this.destination.error(err);\n        this.unsubscribeClosingNotification();\n    };\n    WindowSubscriber.prototype._complete = function () {\n        this.window.complete();\n        this.destination.complete();\n        this.unsubscribeClosingNotification();\n    };\n    WindowSubscriber.prototype.unsubscribeClosingNotification = function () {\n        if (this.closingNotification) {\n            this.closingNotification.unsubscribe();\n        }\n    };\n    WindowSubscriber.prototype.openWindow = function (innerSub) {\n        if (innerSub === void 0) { innerSub = null; }\n        if (innerSub) {\n            this.remove(innerSub);\n            innerSub.unsubscribe();\n        }\n        var prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        var window = this.window = new Subject_1.Subject();\n        this.destination.next(window);\n        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();\n        if (closingNotifier === errorObject_1.errorObject) {\n            var err = errorObject_1.errorObject.e;\n            this.destination.error(err);\n            this.window.error(err);\n        }\n        else {\n            this.add(this.closingNotification = subscribeToResult_1.subscribeToResult(this, closingNotifier));\n        }\n    };\n    return WindowSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=windowWhen.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar Subscription_1 = require('../Subscription');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nfunction windowToggle(openings, closingSelector) {\n    return function (source) { return source.lift(new WindowToggleOperator(openings, closingSelector)); };\n}\nexports.windowToggle = windowToggle;\nvar WindowToggleOperator = (function () {\n    function WindowToggleOperator(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    WindowToggleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    };\n    return WindowToggleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowToggleSubscriber = (function (_super) {\n    __extends(WindowToggleSubscriber, _super);\n    function WindowToggleSubscriber(destination, openings, closingSelector) {\n        _super.call(this, destination);\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n        this.contexts = [];\n        this.add(this.openSubscription = subscribeToResult_1.subscribeToResult(this, openings, openings));\n    }\n    WindowToggleSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        if (contexts) {\n            var len = contexts.length;\n            for (var i = 0; i < len; i++) {\n                contexts[i].window.next(value);\n            }\n        }\n    };\n    WindowToggleSubscriber.prototype._error = function (err) {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context = contexts[index];\n                context.window.error(err);\n                context.subscription.unsubscribe();\n            }\n        }\n        _super.prototype._error.call(this, err);\n    };\n    WindowToggleSubscriber.prototype._complete = function () {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context = contexts[index];\n                context.window.complete();\n                context.subscription.unsubscribe();\n            }\n        }\n        _super.prototype._complete.call(this);\n    };\n    WindowToggleSubscriber.prototype._unsubscribe = function () {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context = contexts[index];\n                context.window.unsubscribe();\n                context.subscription.unsubscribe();\n            }\n        }\n    };\n    WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (outerValue === this.openings) {\n            var closingSelector = this.closingSelector;\n            var closingNotifier = tryCatch_1.tryCatch(closingSelector)(innerValue);\n            if (closingNotifier === errorObject_1.errorObject) {\n                return this.error(errorObject_1.errorObject.e);\n            }\n            else {\n                var window_1 = new Subject_1.Subject();\n                var subscription = new Subscription_1.Subscription();\n                var context = { window: window_1, subscription: subscription };\n                this.contexts.push(context);\n                var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);\n                if (innerSubscription.closed) {\n                    this.closeWindow(this.contexts.length - 1);\n                }\n                else {\n                    innerSubscription.context = context;\n                    subscription.add(innerSubscription);\n                }\n                this.destination.next(window_1);\n            }\n        }\n        else {\n            this.closeWindow(this.contexts.indexOf(outerValue));\n        }\n    };\n    WindowToggleSubscriber.prototype.notifyError = function (err) {\n        this.error(err);\n    };\n    WindowToggleSubscriber.prototype.notifyComplete = function (inner) {\n        if (inner !== this.openSubscription) {\n            this.closeWindow(this.contexts.indexOf(inner.context));\n        }\n    };\n    WindowToggleSubscriber.prototype.closeWindow = function (index) {\n        if (index === -1) {\n            return;\n        }\n        var contexts = this.contexts;\n        var context = contexts[index];\n        var window = context.window, subscription = context.subscription;\n        contexts.splice(index, 1);\n        window.complete();\n        subscription.unsubscribe();\n    };\n    return WindowToggleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=windowToggle.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar async_1 = require('../scheduler/async');\nvar Subscriber_1 = require('../Subscriber');\nvar isNumeric_1 = require('../util/isNumeric');\nvar isScheduler_1 = require('../util/isScheduler');\nfunction windowTime(windowTimeSpan) {\n    var scheduler = async_1.async;\n    var windowCreationInterval = null;\n    var maxWindowSize = Number.POSITIVE_INFINITY;\n    if (isScheduler_1.isScheduler(arguments[3])) {\n        scheduler = arguments[3];\n    }\n    if (isScheduler_1.isScheduler(arguments[2])) {\n        scheduler = arguments[2];\n    }\n    else if (isNumeric_1.isNumeric(arguments[2])) {\n        maxWindowSize = arguments[2];\n    }\n    if (isScheduler_1.isScheduler(arguments[1])) {\n        scheduler = arguments[1];\n    }\n    else if (isNumeric_1.isNumeric(arguments[1])) {\n        windowCreationInterval = arguments[1];\n    }\n    return function windowTimeOperatorFunction(source) {\n        return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n    };\n}\nexports.windowTime = windowTime;\nvar WindowTimeOperator = (function () {\n    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        this.windowTimeSpan = windowTimeSpan;\n        this.windowCreationInterval = windowCreationInterval;\n        this.maxWindowSize = maxWindowSize;\n        this.scheduler = scheduler;\n    }\n    WindowTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));\n    };\n    return WindowTimeOperator;\n}());\nvar CountedSubject = (function (_super) {\n    __extends(CountedSubject, _super);\n    function CountedSubject() {\n        _super.apply(this, arguments);\n        this._numberOfNextedValues = 0;\n    }\n    CountedSubject.prototype.next = function (value) {\n        this._numberOfNextedValues++;\n        _super.prototype.next.call(this, value);\n    };\n    Object.defineProperty(CountedSubject.prototype, \"numberOfNextedValues\", {\n        get: function () {\n            return this._numberOfNextedValues;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return CountedSubject;\n}(Subject_1.Subject));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowTimeSubscriber = (function (_super) {\n    __extends(WindowTimeSubscriber, _super);\n    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.windowTimeSpan = windowTimeSpan;\n        this.windowCreationInterval = windowCreationInterval;\n        this.maxWindowSize = maxWindowSize;\n        this.scheduler = scheduler;\n        this.windows = [];\n        var window = this.openWindow();\n        if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n            var closeState = { subscriber: this, window: window, context: null };\n            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: this, scheduler: scheduler };\n            this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n            this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n        }\n        else {\n            var timeSpanOnlyState = { subscriber: this, window: window, windowTimeSpan: windowTimeSpan };\n            this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n        }\n    }\n    WindowTimeSubscriber.prototype._next = function (value) {\n        var windows = this.windows;\n        var len = windows.length;\n        for (var i = 0; i < len; i++) {\n            var window_1 = windows[i];\n            if (!window_1.closed) {\n                window_1.next(value);\n                if (window_1.numberOfNextedValues >= this.maxWindowSize) {\n                    this.closeWindow(window_1);\n                }\n            }\n        }\n    };\n    WindowTimeSubscriber.prototype._error = function (err) {\n        var windows = this.windows;\n        while (windows.length > 0) {\n            windows.shift().error(err);\n        }\n        this.destination.error(err);\n    };\n    WindowTimeSubscriber.prototype._complete = function () {\n        var windows = this.windows;\n        while (windows.length > 0) {\n            var window_2 = windows.shift();\n            if (!window_2.closed) {\n                window_2.complete();\n            }\n        }\n        this.destination.complete();\n    };\n    WindowTimeSubscriber.prototype.openWindow = function () {\n        var window = new CountedSubject();\n        this.windows.push(window);\n        var destination = this.destination;\n        destination.next(window);\n        return window;\n    };\n    WindowTimeSubscriber.prototype.closeWindow = function (window) {\n        window.complete();\n        var windows = this.windows;\n        windows.splice(windows.indexOf(window), 1);\n    };\n    return WindowTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchWindowTimeSpanOnly(state) {\n    var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;\n    if (window) {\n        subscriber.closeWindow(window);\n    }\n    state.window = subscriber.openWindow();\n    this.schedule(state, windowTimeSpan);\n}\nfunction dispatchWindowCreation(state) {\n    var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;\n    var window = subscriber.openWindow();\n    var action = this;\n    var context = { action: action, subscription: null };\n    var timeSpanState = { subscriber: subscriber, window: window, context: context };\n    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n    action.add(context.subscription);\n    action.schedule(state, windowCreationInterval);\n}\nfunction dispatchWindowClose(state) {\n    var subscriber = state.subscriber, window = state.window, context = state.context;\n    if (context && context.action && context.subscription) {\n        context.action.remove(context.subscription);\n    }\n    subscriber.closeWindow(window);\n}\n//# sourceMappingURL=windowTime.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Subject_1 = require('../Subject');\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nfunction windowCount(windowSize, startWindowEvery) {\n    if (startWindowEvery === void 0) { startWindowEvery = 0; }\n    return function windowCountOperatorFunction(source) {\n        return source.lift(new WindowCountOperator(windowSize, startWindowEvery));\n    };\n}\nexports.windowCount = windowCount;\nvar WindowCountOperator = (function () {\n    function WindowCountOperator(windowSize, startWindowEvery) {\n        this.windowSize = windowSize;\n        this.startWindowEvery = startWindowEvery;\n    }\n    WindowCountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n    };\n    return WindowCountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowCountSubscriber = (function (_super) {\n    __extends(WindowCountSubscriber, _super);\n    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.windowSize = windowSize;\n        this.startWindowEvery = startWindowEvery;\n        this.windows = [new Subject_1.Subject()];\n        this.count = 0;\n        destination.next(this.windows[0]);\n    }\n    WindowCountSubscriber.prototype._next = function (value) {\n        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n        var destination = this.destination;\n        var windowSize = this.windowSize;\n        var windows = this.windows;\n        var len = windows.length;\n        for (var i = 0; i < len && !this.closed; i++) {\n            windows[i].next(value);\n        }\n        var c = this.count - windowSize + 1;\n        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n            windows.shift().complete();\n        }\n        if (++this.count % startWindowEvery === 0 && !this.closed) {\n            var window_1 = new Subject_1.Subject();\n            windows.push(window_1);\n            destination.next(window_1);\n        }\n    };\n    WindowCountSubscriber.prototype._error = function (err) {\n        var windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().error(err);\n            }\n        }\n        this.destination.error(err);\n    };\n    WindowCountSubscriber.prototype._complete = function () {\n        var windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().complete();\n            }\n        }\n        this.destination.complete();\n    };\n    WindowCountSubscriber.prototype._unsubscribe = function () {\n        this.count = 0;\n        this.windows = null;\n    };\n    return WindowCountSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=windowCount.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nfunction window(windowBoundaries) {\n    return function windowOperatorFunction(source) {\n        return source.lift(new WindowOperator(windowBoundaries));\n    };\n}\nexports.window = window;\nvar WindowOperator = (function () {\n    function WindowOperator(windowBoundaries) {\n        this.windowBoundaries = windowBoundaries;\n    }\n    WindowOperator.prototype.call = function (subscriber, source) {\n        var windowSubscriber = new WindowSubscriber(subscriber);\n        var sourceSubscription = source.subscribe(windowSubscriber);\n        if (!sourceSubscription.closed) {\n            windowSubscriber.add(subscribeToResult_1.subscribeToResult(windowSubscriber, this.windowBoundaries));\n        }\n        return sourceSubscription;\n    };\n    return WindowOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowSubscriber = (function (_super) {\n    __extends(WindowSubscriber, _super);\n    function WindowSubscriber(destination) {\n        _super.call(this, destination);\n        this.window = new Subject_1.Subject();\n        destination.next(this.window);\n    }\n    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openWindow();\n    };\n    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n        this._complete();\n    };\n    WindowSubscriber.prototype._next = function (value) {\n        this.window.next(value);\n    };\n    WindowSubscriber.prototype._error = function (err) {\n        this.window.error(err);\n        this.destination.error(err);\n    };\n    WindowSubscriber.prototype._complete = function () {\n        this.window.complete();\n        this.destination.complete();\n    };\n    WindowSubscriber.prototype._unsubscribe = function () {\n        this.window = null;\n    };\n    WindowSubscriber.prototype.openWindow = function () {\n        var prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        var destination = this.destination;\n        var newWindow = this.window = new Subject_1.Subject();\n        destination.next(newWindow);\n    };\n    return WindowSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=window.js.map","\"use strict\";\nvar reduce_1 = require('./reduce');\nfunction toArrayReducer(arr, item, index) {\n    if (index === 0) {\n        return [item];\n    }\n    arr.push(item);\n    return arr;\n}\nfunction toArray() {\n    return reduce_1.reduce(toArrayReducer, []);\n}\nexports.toArray = toArray;\n//# sourceMappingURL=toArray.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar async_1 = require('../scheduler/async');\nvar isDate_1 = require('../util/isDate');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nfunction timeoutWith(due, withObservable, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return function (source) {\n        var absoluteTimeout = isDate_1.isDate(due);\n        var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n        return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n    };\n}\nexports.timeoutWith = timeoutWith;\nvar TimeoutWithOperator = (function () {\n    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {\n        this.waitFor = waitFor;\n        this.absoluteTimeout = absoluteTimeout;\n        this.withObservable = withObservable;\n        this.scheduler = scheduler;\n    }\n    TimeoutWithOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));\n    };\n    return TimeoutWithOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeoutWithSubscriber = (function (_super) {\n    __extends(TimeoutWithSubscriber, _super);\n    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {\n        _super.call(this, destination);\n        this.absoluteTimeout = absoluteTimeout;\n        this.waitFor = waitFor;\n        this.withObservable = withObservable;\n        this.scheduler = scheduler;\n        this.action = null;\n        this.scheduleTimeout();\n    }\n    TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {\n        var withObservable = subscriber.withObservable;\n        subscriber._unsubscribeAndRecycle();\n        subscriber.add(subscribeToResult_1.subscribeToResult(subscriber, withObservable));\n    };\n    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {\n        var action = this.action;\n        if (action) {\n            // Recycle the action if we've already scheduled one. All the production\n            // Scheduler Actions mutate their state/delay time and return themeselves.\n            // VirtualActions are immutable, so they create and return a clone. In this\n            // case, we need to set the action reference to the most recent VirtualAction,\n            // to ensure that's the one we clone from next time.\n            this.action = action.schedule(this, this.waitFor);\n        }\n        else {\n            this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));\n        }\n    };\n    TimeoutWithSubscriber.prototype._next = function (value) {\n        if (!this.absoluteTimeout) {\n            this.scheduleTimeout();\n        }\n        _super.prototype._next.call(this, value);\n    };\n    TimeoutWithSubscriber.prototype._unsubscribe = function () {\n        this.action = null;\n        this.scheduler = null;\n        this.withObservable = null;\n    };\n    return TimeoutWithSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=timeoutWith.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when duetime elapses.\n *\n * @see {@link timeout}\n *\n * @class TimeoutError\n */\nvar TimeoutError = (function (_super) {\n    __extends(TimeoutError, _super);\n    function TimeoutError() {\n        var err = _super.call(this, 'Timeout has occurred');\n        this.name = err.name = 'TimeoutError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return TimeoutError;\n}(Error));\nexports.TimeoutError = TimeoutError;\n//# sourceMappingURL=TimeoutError.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar async_1 = require('../scheduler/async');\nvar isDate_1 = require('../util/isDate');\nvar Subscriber_1 = require('../Subscriber');\nvar TimeoutError_1 = require('../util/TimeoutError');\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nfunction timeout(due, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    var absoluteTimeout = isDate_1.isDate(due);\n    var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n    return function (source) { return source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError_1.TimeoutError())); };\n}\nexports.timeout = timeout;\nvar TimeoutOperator = (function () {\n    function TimeoutOperator(waitFor, absoluteTimeout, scheduler, errorInstance) {\n        this.waitFor = waitFor;\n        this.absoluteTimeout = absoluteTimeout;\n        this.scheduler = scheduler;\n        this.errorInstance = errorInstance;\n    }\n    TimeoutOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TimeoutSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance));\n    };\n    return TimeoutOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeoutSubscriber = (function (_super) {\n    __extends(TimeoutSubscriber, _super);\n    function TimeoutSubscriber(destination, absoluteTimeout, waitFor, scheduler, errorInstance) {\n        _super.call(this, destination);\n        this.absoluteTimeout = absoluteTimeout;\n        this.waitFor = waitFor;\n        this.scheduler = scheduler;\n        this.errorInstance = errorInstance;\n        this.action = null;\n        this.scheduleTimeout();\n    }\n    TimeoutSubscriber.dispatchTimeout = function (subscriber) {\n        subscriber.error(subscriber.errorInstance);\n    };\n    TimeoutSubscriber.prototype.scheduleTimeout = function () {\n        var action = this.action;\n        if (action) {\n            // Recycle the action if we've already scheduled one. All the production\n            // Scheduler Actions mutate their state/delay time and return themeselves.\n            // VirtualActions are immutable, so they create and return a clone. In this\n            // case, we need to set the action reference to the most recent VirtualAction,\n            // to ensure that's the one we clone from next time.\n            this.action = action.schedule(this, this.waitFor);\n        }\n        else {\n            this.add(this.action = this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, this));\n        }\n    };\n    TimeoutSubscriber.prototype._next = function (value) {\n        if (!this.absoluteTimeout) {\n            this.scheduleTimeout();\n        }\n        _super.prototype._next.call(this, value);\n    };\n    TimeoutSubscriber.prototype._unsubscribe = function () {\n        this.action = null;\n        this.scheduler = null;\n        this.errorInstance = null;\n    };\n    return TimeoutSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=timeout.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar async_1 = require('../scheduler/async');\nfunction timeInterval(scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return function (source) { return source.lift(new TimeIntervalOperator(scheduler)); };\n}\nexports.timeInterval = timeInterval;\nvar TimeInterval = (function () {\n    function TimeInterval(value, interval) {\n        this.value = value;\n        this.interval = interval;\n    }\n    return TimeInterval;\n}());\nexports.TimeInterval = TimeInterval;\n;\nvar TimeIntervalOperator = (function () {\n    function TimeIntervalOperator(scheduler) {\n        this.scheduler = scheduler;\n    }\n    TimeIntervalOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n    };\n    return TimeIntervalOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeIntervalSubscriber = (function (_super) {\n    __extends(TimeIntervalSubscriber, _super);\n    function TimeIntervalSubscriber(destination, scheduler) {\n        _super.call(this, destination);\n        this.scheduler = scheduler;\n        this.lastTime = 0;\n        this.lastTime = scheduler.now();\n    }\n    TimeIntervalSubscriber.prototype._next = function (value) {\n        var now = this.scheduler.now();\n        var span = now - this.lastTime;\n        this.lastTime = now;\n        this.destination.next(new TimeInterval(value, span));\n    };\n    return TimeIntervalSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=timeInterval.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar timeInterval_1 = require('../operators/timeInterval');\nexports.TimeInterval = timeInterval_1.TimeInterval;\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nfunction timeInterval(scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return timeInterval_1.timeInterval(scheduler)(this);\n}\nexports.timeInterval = timeInterval;\n//# sourceMappingURL=timeInterval.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar async_1 = require('../scheduler/async');\nvar throttle_1 = require('./throttle');\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nfunction throttleTime(duration, scheduler, config) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    if (config === void 0) { config = throttle_1.defaultThrottleConfig; }\n    return function (source) { return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing)); };\n}\nexports.throttleTime = throttleTime;\nvar ThrottleTimeOperator = (function () {\n    function ThrottleTimeOperator(duration, scheduler, leading, trailing) {\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    ThrottleTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));\n    };\n    return ThrottleTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ThrottleTimeSubscriber = (function (_super) {\n    __extends(ThrottleTimeSubscriber, _super);\n    function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {\n        _super.call(this, destination);\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n        this._hasTrailingValue = false;\n        this._trailingValue = null;\n    }\n    ThrottleTimeSubscriber.prototype._next = function (value) {\n        if (this.throttled) {\n            if (this.trailing) {\n                this._trailingValue = value;\n                this._hasTrailingValue = true;\n            }\n        }\n        else {\n            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n            if (this.leading) {\n                this.destination.next(value);\n            }\n        }\n    };\n    ThrottleTimeSubscriber.prototype.clearThrottle = function () {\n        var throttled = this.throttled;\n        if (throttled) {\n            if (this.trailing && this._hasTrailingValue) {\n                this.destination.next(this._trailingValue);\n                this._trailingValue = null;\n                this._hasTrailingValue = false;\n            }\n            throttled.unsubscribe();\n            this.remove(throttled);\n            this.throttled = null;\n        }\n    };\n    return ThrottleTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchNext(arg) {\n    var subscriber = arg.subscriber;\n    subscriber.clearThrottle();\n}\n//# sourceMappingURL=throttleTime.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nfunction takeWhile(predicate) {\n    return function (source) { return source.lift(new TakeWhileOperator(predicate)); };\n}\nexports.takeWhile = takeWhile;\nvar TakeWhileOperator = (function () {\n    function TakeWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    TakeWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n    };\n    return TakeWhileOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeWhileSubscriber = (function (_super) {\n    __extends(TakeWhileSubscriber, _super);\n    function TakeWhileSubscriber(destination, predicate) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.index = 0;\n    }\n    TakeWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        var result;\n        try {\n            result = this.predicate(value, this.index++);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this.nextOrComplete(value, result);\n    };\n    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {\n        var destination = this.destination;\n        if (Boolean(predicateResult)) {\n            destination.next(value);\n        }\n        else {\n            destination.complete();\n        }\n    };\n    return TakeWhileSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=takeWhile.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nfunction takeUntil(notifier) {\n    return function (source) { return source.lift(new TakeUntilOperator(notifier)); };\n}\nexports.takeUntil = takeUntil;\nvar TakeUntilOperator = (function () {\n    function TakeUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    TakeUntilOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n    };\n    return TakeUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeUntilSubscriber = (function (_super) {\n    __extends(TakeUntilSubscriber, _super);\n    function TakeUntilSubscriber(destination, notifier) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.add(subscribeToResult_1.subscribeToResult(this, notifier));\n    }\n    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.complete();\n    };\n    TakeUntilSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    return TakeUntilSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=takeUntil.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nfunction take(count) {\n    return function (source) {\n        if (count === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        else {\n            return source.lift(new TakeOperator(count));\n        }\n    };\n}\nexports.take = take;\nvar TakeOperator = (function () {\n    function TakeOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    TakeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeSubscriber(subscriber, this.total));\n    };\n    return TakeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeSubscriber = (function (_super) {\n    __extends(TakeSubscriber, _super);\n    function TakeSubscriber(destination, total) {\n        _super.call(this, destination);\n        this.total = total;\n        this.count = 0;\n    }\n    TakeSubscriber.prototype._next = function (value) {\n        var total = this.total;\n        var count = ++this.count;\n        if (count <= total) {\n            this.destination.next(value);\n            if (count === total) {\n                this.destination.complete();\n                this.unsubscribe();\n            }\n        }\n    };\n    return TakeSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=take.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nfunction switchMapTo(innerObservable, resultSelector) {\n    return function (source) { return source.lift(new SwitchMapToOperator(innerObservable, resultSelector)); };\n}\nexports.switchMapTo = switchMapTo;\nvar SwitchMapToOperator = (function () {\n    function SwitchMapToOperator(observable, resultSelector) {\n        this.observable = observable;\n        this.resultSelector = resultSelector;\n    }\n    SwitchMapToOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n    };\n    return SwitchMapToOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapToSubscriber = (function (_super) {\n    __extends(SwitchMapToSubscriber, _super);\n    function SwitchMapToSubscriber(destination, inner, resultSelector) {\n        _super.call(this, destination);\n        this.inner = inner;\n        this.resultSelector = resultSelector;\n        this.index = 0;\n    }\n    SwitchMapToSubscriber.prototype._next = function (value) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, this.inner, value, this.index++));\n    };\n    SwitchMapToSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapToSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapToSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        if (resultSelector) {\n            this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            destination.next(innerValue);\n        }\n    };\n    SwitchMapToSubscriber.prototype.tryResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        var result;\n        try {\n            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        destination.next(result);\n    };\n    return SwitchMapToSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=switchMapTo.js.map","\"use strict\";\nvar switchMap_1 = require('./switchMap');\nvar identity_1 = require('../util/identity');\nfunction switchAll() {\n    return switchMap_1.switchMap(identity_1.identity);\n}\nexports.switchAll = switchAll;\n//# sourceMappingURL=switchAll.js.map","var apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmeidate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","\"use strict\";\nvar AsapAction_1 = require('./AsapAction');\nvar AsapScheduler_1 = require('./AsapScheduler');\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * @example <caption>Compare async and asap scheduler</caption>\n *\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n *\n * @static true\n * @name asap\n * @owner Scheduler\n */\nexports.asap = new AsapScheduler_1.AsapScheduler(AsapAction_1.AsapAction);\n//# sourceMappingURL=asap.js.map","\"use strict\";\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar ScalarObservable_1 = require('../observable/ScalarObservable');\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\nvar concat_1 = require('../observable/concat');\nvar isScheduler_1 = require('../util/isScheduler');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nfunction startWith() {\n    var array = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        array[_i - 0] = arguments[_i];\n    }\n    return function (source) {\n        var scheduler = array[array.length - 1];\n        if (isScheduler_1.isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len === 1) {\n            return concat_1.concat(new ScalarObservable_1.ScalarObservable(array[0], scheduler), source);\n        }\n        else if (len > 1) {\n            return concat_1.concat(new ArrayObservable_1.ArrayObservable(array, scheduler), source);\n        }\n        else {\n            return concat_1.concat(new EmptyObservable_1.EmptyObservable(scheduler), source);\n        }\n    };\n}\nexports.startWith = startWith;\n//# sourceMappingURL=startWith.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nfunction skipWhile(predicate) {\n    return function (source) { return source.lift(new SkipWhileOperator(predicate)); };\n}\nexports.skipWhile = skipWhile;\nvar SkipWhileOperator = (function () {\n    function SkipWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    SkipWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n    };\n    return SkipWhileOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipWhileSubscriber = (function (_super) {\n    __extends(SkipWhileSubscriber, _super);\n    function SkipWhileSubscriber(destination, predicate) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.skipping = true;\n        this.index = 0;\n    }\n    SkipWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (this.skipping) {\n            this.tryCallPredicate(value);\n        }\n        if (!this.skipping) {\n            destination.next(value);\n        }\n    };\n    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {\n        try {\n            var result = this.predicate(value, this.index++);\n            this.skipping = Boolean(result);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    return SkipWhileSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=skipWhile.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nfunction skipUntil(notifier) {\n    return function (source) { return source.lift(new SkipUntilOperator(notifier)); };\n}\nexports.skipUntil = skipUntil;\nvar SkipUntilOperator = (function () {\n    function SkipUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SkipUntilOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n    };\n    return SkipUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipUntilSubscriber = (function (_super) {\n    __extends(SkipUntilSubscriber, _super);\n    function SkipUntilSubscriber(destination, notifier) {\n        _super.call(this, destination);\n        this.hasValue = false;\n        this.isInnerStopped = false;\n        this.add(subscribeToResult_1.subscribeToResult(this, notifier));\n    }\n    SkipUntilSubscriber.prototype._next = function (value) {\n        if (this.hasValue) {\n            _super.prototype._next.call(this, value);\n        }\n    };\n    SkipUntilSubscriber.prototype._complete = function () {\n        if (this.isInnerStopped) {\n            _super.prototype._complete.call(this);\n        }\n        else {\n            this.unsubscribe();\n        }\n    };\n    SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.hasValue = true;\n    };\n    SkipUntilSubscriber.prototype.notifyComplete = function () {\n        this.isInnerStopped = true;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    return SkipUntilSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=skipUntil.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nfunction skipLast(count) {\n    return function (source) { return source.lift(new SkipLastOperator(count)); };\n}\nexports.skipLast = skipLast;\nvar SkipLastOperator = (function () {\n    function SkipLastOperator(_skipCount) {\n        this._skipCount = _skipCount;\n        if (this._skipCount < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    SkipLastOperator.prototype.call = function (subscriber, source) {\n        if (this._skipCount === 0) {\n            // If we don't want to skip any values then just subscribe\n            // to Subscriber without any further logic.\n            return source.subscribe(new Subscriber_1.Subscriber(subscriber));\n        }\n        else {\n            return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n        }\n    };\n    return SkipLastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipLastSubscriber = (function (_super) {\n    __extends(SkipLastSubscriber, _super);\n    function SkipLastSubscriber(destination, _skipCount) {\n        _super.call(this, destination);\n        this._skipCount = _skipCount;\n        this._count = 0;\n        this._ring = new Array(_skipCount);\n    }\n    SkipLastSubscriber.prototype._next = function (value) {\n        var skipCount = this._skipCount;\n        var count = this._count++;\n        if (count < skipCount) {\n            this._ring[count] = value;\n        }\n        else {\n            var currentIndex = count % skipCount;\n            var ring = this._ring;\n            var oldValue = ring[currentIndex];\n            ring[currentIndex] = value;\n            this.destination.next(oldValue);\n        }\n    };\n    return SkipLastSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=skipLast.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nfunction skip(count) {\n    return function (source) { return source.lift(new SkipOperator(count)); };\n}\nexports.skip = skip;\nvar SkipOperator = (function () {\n    function SkipOperator(total) {\n        this.total = total;\n    }\n    SkipOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipSubscriber(subscriber, this.total));\n    };\n    return SkipOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipSubscriber = (function (_super) {\n    __extends(SkipSubscriber, _super);\n    function SkipSubscriber(destination, total) {\n        _super.call(this, destination);\n        this.total = total;\n        this.count = 0;\n    }\n    SkipSubscriber.prototype._next = function (x) {\n        if (++this.count > this.total) {\n            this.destination.next(x);\n        }\n    };\n    return SkipSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=skip.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar EmptyError_1 = require('../util/EmptyError');\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nfunction single(predicate) {\n    return function (source) { return source.lift(new SingleOperator(predicate, source)); };\n}\nexports.single = single;\nvar SingleOperator = (function () {\n    function SingleOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    SingleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n    };\n    return SingleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SingleSubscriber = (function (_super) {\n    __extends(SingleSubscriber, _super);\n    function SingleSubscriber(destination, predicate, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.source = source;\n        this.seenValue = false;\n        this.index = 0;\n    }\n    SingleSubscriber.prototype.applySingleValue = function (value) {\n        if (this.seenValue) {\n            this.destination.error('Sequence contains more than one element');\n        }\n        else {\n            this.seenValue = true;\n            this.singleValue = value;\n        }\n    };\n    SingleSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this.tryNext(value, index);\n        }\n        else {\n            this.applySingleValue(value);\n        }\n    };\n    SingleSubscriber.prototype.tryNext = function (value, index) {\n        try {\n            if (this.predicate(value, index, this.source)) {\n                this.applySingleValue(value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    SingleSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.index > 0) {\n            destination.next(this.seenValue ? this.singleValue : undefined);\n            destination.complete();\n        }\n        else {\n            destination.error(new EmptyError_1.EmptyError);\n        }\n    };\n    return SingleSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=single.js.map","\"use strict\";\nvar ReplaySubject_1 = require('../ReplaySubject');\n/**\n * @method shareReplay\n * @owner Observable\n */\nfunction shareReplay(bufferSize, windowTime, scheduler) {\n    return function (source) { return source.lift(shareReplayOperator(bufferSize, windowTime, scheduler)); };\n}\nexports.shareReplay = shareReplay;\nfunction shareReplayOperator(bufferSize, windowTime, scheduler) {\n    var subject;\n    var refCount = 0;\n    var subscription;\n    var hasError = false;\n    var isComplete = false;\n    return function shareReplayOperation(source) {\n        refCount++;\n        if (!subject || hasError) {\n            hasError = false;\n            subject = new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);\n            subscription = source.subscribe({\n                next: function (value) { subject.next(value); },\n                error: function (err) {\n                    hasError = true;\n                    subject.error(err);\n                },\n                complete: function () {\n                    isComplete = true;\n                    subject.complete();\n                },\n            });\n        }\n        var innerSub = subject.subscribe(this);\n        return function () {\n            refCount--;\n            innerSub.unsubscribe();\n            if (subscription && refCount === 0 && isComplete) {\n                subscription.unsubscribe();\n            }\n        };\n    };\n}\n;\n//# sourceMappingURL=shareReplay.js.map","\"use strict\";\nvar multicast_1 = require('./multicast');\nvar refCount_1 = require('./refCount');\nvar Subject_1 = require('../Subject');\nfunction shareSubjectFactory() {\n    return new Subject_1.Subject();\n}\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nfunction share() {\n    return function (source) { return refCount_1.refCount()(multicast_1.multicast(shareSubjectFactory)(source)); };\n}\nexports.share = share;\n;\n//# sourceMappingURL=share.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nfunction sequenceEqual(compareTo, comparor) {\n    return function (source) { return source.lift(new SequenceEqualOperator(compareTo, comparor)); };\n}\nexports.sequenceEqual = sequenceEqual;\nvar SequenceEqualOperator = (function () {\n    function SequenceEqualOperator(compareTo, comparor) {\n        this.compareTo = compareTo;\n        this.comparor = comparor;\n    }\n    SequenceEqualOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n    };\n    return SequenceEqualOperator;\n}());\nexports.SequenceEqualOperator = SequenceEqualOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SequenceEqualSubscriber = (function (_super) {\n    __extends(SequenceEqualSubscriber, _super);\n    function SequenceEqualSubscriber(destination, compareTo, comparor) {\n        _super.call(this, destination);\n        this.compareTo = compareTo;\n        this.comparor = comparor;\n        this._a = [];\n        this._b = [];\n        this._oneComplete = false;\n        this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n    }\n    SequenceEqualSubscriber.prototype._next = function (value) {\n        if (this._oneComplete && this._b.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._a.push(value);\n            this.checkValues();\n        }\n    };\n    SequenceEqualSubscriber.prototype._complete = function () {\n        if (this._oneComplete) {\n            this.emit(this._a.length === 0 && this._b.length === 0);\n        }\n        else {\n            this._oneComplete = true;\n        }\n    };\n    SequenceEqualSubscriber.prototype.checkValues = function () {\n        var _c = this, _a = _c._a, _b = _c._b, comparor = _c.comparor;\n        while (_a.length > 0 && _b.length > 0) {\n            var a = _a.shift();\n            var b = _b.shift();\n            var areEqual = false;\n            if (comparor) {\n                areEqual = tryCatch_1.tryCatch(comparor)(a, b);\n                if (areEqual === errorObject_1.errorObject) {\n                    this.destination.error(errorObject_1.errorObject.e);\n                }\n            }\n            else {\n                areEqual = a === b;\n            }\n            if (!areEqual) {\n                this.emit(false);\n            }\n        }\n    };\n    SequenceEqualSubscriber.prototype.emit = function (value) {\n        var destination = this.destination;\n        destination.next(value);\n        destination.complete();\n    };\n    SequenceEqualSubscriber.prototype.nextB = function (value) {\n        if (this._oneComplete && this._a.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._b.push(value);\n            this.checkValues();\n        }\n    };\n    return SequenceEqualSubscriber;\n}(Subscriber_1.Subscriber));\nexports.SequenceEqualSubscriber = SequenceEqualSubscriber;\nvar SequenceEqualCompareToSubscriber = (function (_super) {\n    __extends(SequenceEqualCompareToSubscriber, _super);\n    function SequenceEqualCompareToSubscriber(destination, parent) {\n        _super.call(this, destination);\n        this.parent = parent;\n    }\n    SequenceEqualCompareToSubscriber.prototype._next = function (value) {\n        this.parent.nextB(value);\n    };\n    SequenceEqualCompareToSubscriber.prototype._error = function (err) {\n        this.parent.error(err);\n    };\n    SequenceEqualCompareToSubscriber.prototype._complete = function () {\n        this.parent._complete();\n    };\n    return SequenceEqualCompareToSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=sequenceEqual.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar async_1 = require('../scheduler/async');\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nfunction sampleTime(period, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return function (source) { return source.lift(new SampleTimeOperator(period, scheduler)); };\n}\nexports.sampleTime = sampleTime;\nvar SampleTimeOperator = (function () {\n    function SampleTimeOperator(period, scheduler) {\n        this.period = period;\n        this.scheduler = scheduler;\n    }\n    SampleTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n    };\n    return SampleTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleTimeSubscriber = (function (_super) {\n    __extends(SampleTimeSubscriber, _super);\n    function SampleTimeSubscriber(destination, period, scheduler) {\n        _super.call(this, destination);\n        this.period = period;\n        this.scheduler = scheduler;\n        this.hasValue = false;\n        this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period: period }));\n    }\n    SampleTimeSubscriber.prototype._next = function (value) {\n        this.lastValue = value;\n        this.hasValue = true;\n    };\n    SampleTimeSubscriber.prototype.notifyNext = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.lastValue);\n        }\n    };\n    return SampleTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchNotification(state) {\n    var subscriber = state.subscriber, period = state.period;\n    subscriber.notifyNext();\n    this.schedule(state, period);\n}\n//# sourceMappingURL=sampleTime.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nfunction sample(notifier) {\n    return function (source) { return source.lift(new SampleOperator(notifier)); };\n}\nexports.sample = sample;\nvar SampleOperator = (function () {\n    function SampleOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SampleOperator.prototype.call = function (subscriber, source) {\n        var sampleSubscriber = new SampleSubscriber(subscriber);\n        var subscription = source.subscribe(sampleSubscriber);\n        subscription.add(subscribeToResult_1.subscribeToResult(sampleSubscriber, this.notifier));\n        return subscription;\n    };\n    return SampleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleSubscriber = (function (_super) {\n    __extends(SampleSubscriber, _super);\n    function SampleSubscriber() {\n        _super.apply(this, arguments);\n        this.hasValue = false;\n    }\n    SampleSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n    };\n    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.value);\n        }\n    };\n    return SampleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=sample.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nfunction retryWhen(notifier) {\n    return function (source) { return source.lift(new RetryWhenOperator(notifier, source)); };\n}\nexports.retryWhen = retryWhen;\nvar RetryWhenOperator = (function () {\n    function RetryWhenOperator(notifier, source) {\n        this.notifier = notifier;\n        this.source = source;\n    }\n    RetryWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    };\n    return RetryWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RetryWhenSubscriber = (function (_super) {\n    __extends(RetryWhenSubscriber, _super);\n    function RetryWhenSubscriber(destination, notifier, source) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.source = source;\n    }\n    RetryWhenSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var errors = this.errors;\n            var retries = this.retries;\n            var retriesSubscription = this.retriesSubscription;\n            if (!retries) {\n                errors = new Subject_1.Subject();\n                retries = tryCatch_1.tryCatch(this.notifier)(errors);\n                if (retries === errorObject_1.errorObject) {\n                    return _super.prototype.error.call(this, errorObject_1.errorObject.e);\n                }\n                retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);\n            }\n            else {\n                this.errors = null;\n                this.retriesSubscription = null;\n            }\n            this._unsubscribeAndRecycle();\n            this.errors = errors;\n            this.retries = retries;\n            this.retriesSubscription = retriesSubscription;\n            errors.next(err);\n        }\n    };\n    RetryWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;\n        if (errors) {\n            errors.unsubscribe();\n            this.errors = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, errors = _a.errors, retries = _a.retries, retriesSubscription = _a.retriesSubscription;\n        this.errors = null;\n        this.retries = null;\n        this.retriesSubscription = null;\n        this._unsubscribeAndRecycle();\n        this.errors = errors;\n        this.retries = retries;\n        this.retriesSubscription = retriesSubscription;\n        this.source.subscribe(this);\n    };\n    return RetryWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=retryWhen.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nfunction retry(count) {\n    if (count === void 0) { count = -1; }\n    return function (source) { return source.lift(new RetryOperator(count, source)); };\n}\nexports.retry = retry;\nvar RetryOperator = (function () {\n    function RetryOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RetryOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n    };\n    return RetryOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RetrySubscriber = (function (_super) {\n    __extends(RetrySubscriber, _super);\n    function RetrySubscriber(destination, count, source) {\n        _super.call(this, destination);\n        this.count = count;\n        this.source = source;\n    }\n    RetrySubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.error.call(this, err);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    };\n    return RetrySubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=retry.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nfunction repeatWhen(notifier) {\n    return function (source) { return source.lift(new RepeatWhenOperator(notifier)); };\n}\nexports.repeatWhen = repeatWhen;\nvar RepeatWhenOperator = (function () {\n    function RepeatWhenOperator(notifier) {\n        this.notifier = notifier;\n    }\n    RepeatWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n    };\n    return RepeatWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RepeatWhenSubscriber = (function (_super) {\n    __extends(RepeatWhenSubscriber, _super);\n    function RepeatWhenSubscriber(destination, notifier, source) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.source = source;\n        this.sourceIsBeingSubscribedTo = true;\n    }\n    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.sourceIsBeingSubscribedTo = true;\n        this.source.subscribe(this);\n    };\n    RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        if (this.sourceIsBeingSubscribedTo === false) {\n            return _super.prototype.complete.call(this);\n        }\n    };\n    RepeatWhenSubscriber.prototype.complete = function () {\n        this.sourceIsBeingSubscribedTo = false;\n        if (!this.isStopped) {\n            if (!this.retries) {\n                this.subscribeToRetries();\n            }\n            if (!this.retriesSubscription || this.retriesSubscription.closed) {\n                return _super.prototype.complete.call(this);\n            }\n            this._unsubscribeAndRecycle();\n            this.notifications.next();\n        }\n    };\n    RepeatWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;\n        if (notifications) {\n            notifications.unsubscribe();\n            this.notifications = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, notifications = _a.notifications, retries = _a.retries, retriesSubscription = _a.retriesSubscription;\n        this.notifications = null;\n        this.retries = null;\n        this.retriesSubscription = null;\n        _super.prototype._unsubscribeAndRecycle.call(this);\n        this.notifications = notifications;\n        this.retries = retries;\n        this.retriesSubscription = retriesSubscription;\n        return this;\n    };\n    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {\n        this.notifications = new Subject_1.Subject();\n        var retries = tryCatch_1.tryCatch(this.notifier)(this.notifications);\n        if (retries === errorObject_1.errorObject) {\n            return _super.prototype.complete.call(this);\n        }\n        this.retries = retries;\n        this.retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);\n    };\n    return RepeatWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=repeatWhen.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nfunction repeat(count) {\n    if (count === void 0) { count = -1; }\n    return function (source) {\n        if (count === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        else if (count < 0) {\n            return source.lift(new RepeatOperator(-1, source));\n        }\n        else {\n            return source.lift(new RepeatOperator(count - 1, source));\n        }\n    };\n}\nexports.repeat = repeat;\nvar RepeatOperator = (function () {\n    function RepeatOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RepeatOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n    };\n    return RepeatOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RepeatSubscriber = (function (_super) {\n    __extends(RepeatSubscriber, _super);\n    function RepeatSubscriber(destination, count, source) {\n        _super.call(this, destination);\n        this.count = count;\n        this.source = source;\n    }\n    RepeatSubscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.complete.call(this);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    };\n    return RepeatSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=repeat.js.map","\"use strict\";\nvar isArray_1 = require('../util/isArray');\nvar race_1 = require('../observable/race');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nfunction race() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return function raceOperatorFunction(source) {\n        // if the only argument is an array, it was most likely called with\n        // `pair([obs1, obs2, ...])`\n        if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n            observables = observables[0];\n        }\n        return source.lift.call(race_1.race.apply(void 0, [source].concat(observables)));\n    };\n}\nexports.race = race;\n//# sourceMappingURL=race.js.map","\"use strict\";\nvar AsyncSubject_1 = require('../AsyncSubject');\nvar multicast_1 = require('./multicast');\nfunction publishLast() {\n    return function (source) { return multicast_1.multicast(new AsyncSubject_1.AsyncSubject())(source); };\n}\nexports.publishLast = publishLast;\n//# sourceMappingURL=publishLast.js.map","\"use strict\";\nvar ReplaySubject_1 = require('../ReplaySubject');\nvar multicast_1 = require('./multicast');\n/* tslint:enable:max-line-length */\nfunction publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {\n    if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {\n        scheduler = selectorOrScheduler;\n    }\n    var selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;\n    var subject = new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);\n    return function (source) { return multicast_1.multicast(function () { return subject; }, selector)(source); };\n}\nexports.publishReplay = publishReplay;\n//# sourceMappingURL=publishReplay.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('./Subject');\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\n/**\n * @class BehaviorSubject<T>\n */\nvar BehaviorSubject = (function (_super) {\n    __extends(BehaviorSubject, _super);\n    function BehaviorSubject(_value) {\n        _super.call(this);\n        this._value = _value;\n    }\n    Object.defineProperty(BehaviorSubject.prototype, \"value\", {\n        get: function () {\n            return this.getValue();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    BehaviorSubject.prototype._subscribe = function (subscriber) {\n        var subscription = _super.prototype._subscribe.call(this, subscriber);\n        if (subscription && !subscription.closed) {\n            subscriber.next(this._value);\n        }\n        return subscription;\n    };\n    BehaviorSubject.prototype.getValue = function () {\n        if (this.hasError) {\n            throw this.thrownError;\n        }\n        else if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else {\n            return this._value;\n        }\n    };\n    BehaviorSubject.prototype.next = function (value) {\n        _super.prototype.next.call(this, this._value = value);\n    };\n    return BehaviorSubject;\n}(Subject_1.Subject));\nexports.BehaviorSubject = BehaviorSubject;\n//# sourceMappingURL=BehaviorSubject.js.map","\"use strict\";\nvar BehaviorSubject_1 = require('../BehaviorSubject');\nvar multicast_1 = require('./multicast');\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nfunction publishBehavior(value) {\n    return function (source) { return multicast_1.multicast(new BehaviorSubject_1.BehaviorSubject(value))(source); };\n}\nexports.publishBehavior = publishBehavior;\n//# sourceMappingURL=publishBehavior.js.map","\"use strict\";\nvar Subject_1 = require('../Subject');\nvar multicast_1 = require('./multicast');\n/* tslint:enable:max-line-length */\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nfunction publish(selector) {\n    return selector ?\n        multicast_1.multicast(function () { return new Subject_1.Subject(); }, selector) :\n        multicast_1.multicast(new Subject_1.Subject());\n}\nexports.publish = publish;\n//# sourceMappingURL=publish.js.map","\"use strict\";\nvar map_1 = require('./map');\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nfunction pluck() {\n    var properties = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        properties[_i - 0] = arguments[_i];\n    }\n    var length = properties.length;\n    if (length === 0) {\n        throw new Error('list of properties cannot be empty.');\n    }\n    return function (source) { return map_1.map(plucker(properties, length))(source); };\n}\nexports.pluck = pluck;\nfunction plucker(props, length) {\n    var mapper = function (x) {\n        var currentProp = x;\n        for (var i = 0; i < length; i++) {\n            var p = currentProp[props[i]];\n            if (typeof p !== 'undefined') {\n                currentProp = p;\n            }\n            else {\n                return undefined;\n            }\n        }\n        return currentProp;\n    };\n    return mapper;\n}\n//# sourceMappingURL=pluck.js.map","\"use strict\";\nvar not_1 = require('../util/not');\nvar filter_1 = require('./filter');\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nfunction partition(predicate, thisArg) {\n    return function (source) { return [\n        filter_1.filter(predicate, thisArg)(source),\n        filter_1.filter(not_1.not(predicate, thisArg))(source)\n    ]; };\n}\nexports.partition = partition;\n//# sourceMappingURL=partition.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nfunction pairwise() {\n    return function (source) { return source.lift(new PairwiseOperator()); };\n}\nexports.pairwise = pairwise;\nvar PairwiseOperator = (function () {\n    function PairwiseOperator() {\n    }\n    PairwiseOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new PairwiseSubscriber(subscriber));\n    };\n    return PairwiseOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar PairwiseSubscriber = (function (_super) {\n    __extends(PairwiseSubscriber, _super);\n    function PairwiseSubscriber(destination) {\n        _super.call(this, destination);\n        this.hasPrev = false;\n    }\n    PairwiseSubscriber.prototype._next = function (value) {\n        if (this.hasPrev) {\n            this.destination.next([this.prev, value]);\n        }\n        else {\n            this.hasPrev = true;\n        }\n        this.prev = value;\n    };\n    return PairwiseSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=pairwise.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar Observable_1 = require('../Observable');\nvar Subscriber_1 = require('../Subscriber');\nvar Subscription_1 = require('../Subscription');\nvar refCount_1 = require('../operators/refCount');\n/**\n * @class ConnectableObservable<T>\n */\nvar ConnectableObservable = (function (_super) {\n    __extends(ConnectableObservable, _super);\n    function ConnectableObservable(source, subjectFactory) {\n        _super.call(this);\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        this._refCount = 0;\n        this._isComplete = false;\n    }\n    ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription_1.Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription_1.Subscription.EMPTY;\n            }\n            else {\n                this._connection = connection;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return refCount_1.refCount()(this);\n    };\n    return ConnectableObservable;\n}(Observable_1.Observable));\nexports.ConnectableObservable = ConnectableObservable;\nvar connectableProto = ConnectableObservable.prototype;\nexports.connectableObservableDescriptor = {\n    operator: { value: null },\n    _refCount: { value: 0, writable: true },\n    _subject: { value: null, writable: true },\n    _connection: { value: null, writable: true },\n    _subscribe: { value: connectableProto._subscribe },\n    _isComplete: { value: connectableProto._isComplete, writable: true },\n    getSubject: { value: connectableProto.getSubject },\n    connect: { value: connectableProto.connect },\n    refCount: { value: connectableProto.refCount }\n};\nvar ConnectableSubscriber = (function (_super) {\n    __extends(ConnectableSubscriber, _super);\n    function ConnectableSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    ConnectableSubscriber.prototype._error = function (err) {\n        this._unsubscribe();\n        _super.prototype._error.call(this, err);\n    };\n    ConnectableSubscriber.prototype._complete = function () {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        _super.prototype._complete.call(this);\n    };\n    ConnectableSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            var connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    };\n    return ConnectableSubscriber;\n}(Subject_1.SubjectSubscriber));\nvar RefCountOperator = (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = (function (_super) {\n    __extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=ConnectableObservable.js.map","\"use strict\";\nvar reduce_1 = require('./reduce');\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nfunction min(comparer) {\n    var min = (typeof comparer === 'function')\n        ? function (x, y) { return comparer(x, y) < 0 ? x : y; }\n        : function (x, y) { return x < y ? x : y; };\n    return reduce_1.reduce(min);\n}\nexports.min = min;\n//# sourceMappingURL=min.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nfunction mergeScan(accumulator, seed, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return function (source) { return source.lift(new MergeScanOperator(accumulator, seed, concurrent)); };\n}\nexports.mergeScan = mergeScan;\nvar MergeScanOperator = (function () {\n    function MergeScanOperator(accumulator, seed, concurrent) {\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.concurrent = concurrent;\n    }\n    MergeScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n    };\n    return MergeScanOperator;\n}());\nexports.MergeScanOperator = MergeScanOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeScanSubscriber = (function (_super) {\n    __extends(MergeScanSubscriber, _super);\n    function MergeScanSubscriber(destination, accumulator, acc, concurrent) {\n        _super.call(this, destination);\n        this.accumulator = accumulator;\n        this.acc = acc;\n        this.concurrent = concurrent;\n        this.hasValue = false;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeScanSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            var index = this.index++;\n            var ish = tryCatch_1.tryCatch(this.accumulator)(this.acc, value);\n            var destination = this.destination;\n            if (ish === errorObject_1.errorObject) {\n                destination.error(errorObject_1.errorObject.e);\n            }\n            else {\n                this.active++;\n                this._innerSub(ish, value, index);\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n    };\n    MergeScanSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var destination = this.destination;\n        this.acc = innerValue;\n        this.hasValue = true;\n        destination.next(innerValue);\n    };\n    MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    return MergeScanSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.MergeScanSubscriber = MergeScanSubscriber;\n//# sourceMappingURL=mergeScan.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nfunction mergeMapTo(innerObservable, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n        resultSelector = null;\n    }\n    return function (source) { return source.lift(new MergeMapToOperator(innerObservable, resultSelector, concurrent)); };\n}\nexports.mergeMapTo = mergeMapTo;\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nvar MergeMapToOperator = (function () {\n    function MergeMapToOperator(ish, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        this.ish = ish;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n    }\n    MergeMapToOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n    };\n    return MergeMapToOperator;\n}());\nexports.MergeMapToOperator = MergeMapToOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeMapToSubscriber = (function (_super) {\n    __extends(MergeMapToSubscriber, _super);\n    function MergeMapToSubscriber(destination, ish, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        _super.call(this, destination);\n        this.ish = ish;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeMapToSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            var resultSelector = this.resultSelector;\n            var index = this.index++;\n            var ish = this.ish;\n            var destination = this.destination;\n            this.active++;\n            this._innerSub(ish, destination, resultSelector, value, index);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapToSubscriber.prototype._innerSub = function (ish, destination, resultSelector, value, index) {\n        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n    };\n    MergeMapToSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        if (resultSelector) {\n            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            destination.next(innerValue);\n        }\n    };\n    MergeMapToSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        var result;\n        try {\n            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        destination.next(result);\n    };\n    MergeMapToSubscriber.prototype.notifyError = function (err) {\n        this.destination.error(err);\n    };\n    MergeMapToSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapToSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.MergeMapToSubscriber = MergeMapToSubscriber;\n//# sourceMappingURL=mergeMapTo.js.map","\"use strict\";\nvar merge_1 = require('../observable/merge');\nvar merge_2 = require('../observable/merge');\nexports.mergeStatic = merge_2.merge;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nfunction merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return function (source) { return source.lift.call(merge_1.merge.apply(void 0, [source].concat(observables))); };\n}\nexports.merge = merge;\n//# sourceMappingURL=merge.js.map","\"use strict\";\nvar reduce_1 = require('./reduce');\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nfunction max(comparer) {\n    var max = (typeof comparer === 'function')\n        ? function (x, y) { return comparer(x, y) > 0 ? x : y; }\n        : function (x, y) { return x > y ? x : y; };\n    return reduce_1.reduce(max);\n}\nexports.max = max;\n//# sourceMappingURL=max.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Notification_1 = require('../Notification');\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nfunction materialize() {\n    return function materializeOperatorFunction(source) {\n        return source.lift(new MaterializeOperator());\n    };\n}\nexports.materialize = materialize;\nvar MaterializeOperator = (function () {\n    function MaterializeOperator() {\n    }\n    MaterializeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MaterializeSubscriber(subscriber));\n    };\n    return MaterializeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MaterializeSubscriber = (function (_super) {\n    __extends(MaterializeSubscriber, _super);\n    function MaterializeSubscriber(destination) {\n        _super.call(this, destination);\n    }\n    MaterializeSubscriber.prototype._next = function (value) {\n        this.destination.next(Notification_1.Notification.createNext(value));\n    };\n    MaterializeSubscriber.prototype._error = function (err) {\n        var destination = this.destination;\n        destination.next(Notification_1.Notification.createError(err));\n        destination.complete();\n    };\n    MaterializeSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        destination.next(Notification_1.Notification.createComplete());\n        destination.complete();\n    };\n    return MaterializeSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=materialize.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nfunction mapTo(value) {\n    return function (source) { return source.lift(new MapToOperator(value)); };\n}\nexports.mapTo = mapTo;\nvar MapToOperator = (function () {\n    function MapToOperator(value) {\n        this.value = value;\n    }\n    MapToOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapToSubscriber(subscriber, this.value));\n    };\n    return MapToOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapToSubscriber = (function (_super) {\n    __extends(MapToSubscriber, _super);\n    function MapToSubscriber(destination, value) {\n        _super.call(this, destination);\n        this.value = value;\n    }\n    MapToSubscriber.prototype._next = function (x) {\n        this.destination.next(this.value);\n    };\n    return MapToSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=mapTo.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nfunction every(predicate, thisArg) {\n    return function (source) { return source.lift(new EveryOperator(predicate, thisArg, source)); };\n}\nexports.every = every;\nvar EveryOperator = (function () {\n    function EveryOperator(predicate, thisArg, source) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n    }\n    EveryOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n    };\n    return EveryOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar EverySubscriber = (function (_super) {\n    __extends(EverySubscriber, _super);\n    function EverySubscriber(destination, predicate, thisArg, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n        this.index = 0;\n        this.thisArg = thisArg || this;\n    }\n    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {\n        this.destination.next(everyValueMatch);\n        this.destination.complete();\n    };\n    EverySubscriber.prototype._next = function (value) {\n        var result = false;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (!result) {\n            this.notifyComplete(false);\n        }\n    };\n    EverySubscriber.prototype._complete = function () {\n        this.notifyComplete(true);\n    };\n    return EverySubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=every.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar EmptyError_1 = require('../util/EmptyError');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nfunction last(predicate, resultSelector, defaultValue) {\n    return function (source) { return source.lift(new LastOperator(predicate, resultSelector, defaultValue, source)); };\n}\nexports.last = last;\nvar LastOperator = (function () {\n    function LastOperator(predicate, resultSelector, defaultValue, source) {\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n    }\n    LastOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n    };\n    return LastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar LastSubscriber = (function (_super) {\n    __extends(LastSubscriber, _super);\n    function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n        this.hasValue = false;\n        this.index = 0;\n        if (typeof defaultValue !== 'undefined') {\n            this.lastValue = defaultValue;\n            this.hasValue = true;\n        }\n    }\n    LastSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this._tryPredicate(value, index);\n        }\n        else {\n            if (this.resultSelector) {\n                this._tryResultSelector(value, index);\n                return;\n            }\n            this.lastValue = value;\n            this.hasValue = true;\n        }\n    };\n    LastSubscriber.prototype._tryPredicate = function (value, index) {\n        var result;\n        try {\n            result = this.predicate(value, index, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            if (this.resultSelector) {\n                this._tryResultSelector(value, index);\n                return;\n            }\n            this.lastValue = value;\n            this.hasValue = true;\n        }\n    };\n    LastSubscriber.prototype._tryResultSelector = function (value, index) {\n        var result;\n        try {\n            result = this.resultSelector(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.lastValue = result;\n        this.hasValue = true;\n    };\n    LastSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.hasValue) {\n            destination.next(this.lastValue);\n            destination.complete();\n        }\n        else {\n            destination.error(new EmptyError_1.EmptyError);\n        }\n    };\n    return LastSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=last.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar audit_1 = require('./audit');\nvar timer_1 = require('../observable/timer');\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nfunction auditTime(duration, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return audit_1.audit(function () { return timer_1.timer(duration, scheduler); });\n}\nexports.auditTime = auditTime;\n//# sourceMappingURL=auditTime.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nfunction isEmpty() {\n    return function (source) { return source.lift(new IsEmptyOperator()); };\n}\nexports.isEmpty = isEmpty;\nvar IsEmptyOperator = (function () {\n    function IsEmptyOperator() {\n    }\n    IsEmptyOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new IsEmptySubscriber(observer));\n    };\n    return IsEmptyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar IsEmptySubscriber = (function (_super) {\n    __extends(IsEmptySubscriber, _super);\n    function IsEmptySubscriber(destination) {\n        _super.call(this, destination);\n    }\n    IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {\n        var destination = this.destination;\n        destination.next(isEmpty);\n        destination.complete();\n    };\n    IsEmptySubscriber.prototype._next = function (value) {\n        this.notifyComplete(false);\n    };\n    IsEmptySubscriber.prototype._complete = function () {\n        this.notifyComplete(true);\n    };\n    return IsEmptySubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=isEmpty.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar noop_1 = require('../util/noop');\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nfunction ignoreElements() {\n    return function ignoreElementsOperatorFunction(source) {\n        return source.lift(new IgnoreElementsOperator());\n    };\n}\nexports.ignoreElements = ignoreElements;\nvar IgnoreElementsOperator = (function () {\n    function IgnoreElementsOperator() {\n    }\n    IgnoreElementsOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n    };\n    return IgnoreElementsOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar IgnoreElementsSubscriber = (function (_super) {\n    __extends(IgnoreElementsSubscriber, _super);\n    function IgnoreElementsSubscriber() {\n        _super.apply(this, arguments);\n    }\n    IgnoreElementsSubscriber.prototype._next = function (unused) {\n        noop_1.noop();\n    };\n    return IgnoreElementsSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=ignoreElements.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Subscription_1 = require('../Subscription');\nvar Observable_1 = require('../Observable');\nvar Subject_1 = require('../Subject');\nvar Map_1 = require('../util/Map');\nvar FastMap_1 = require('../util/FastMap');\n/* tslint:enable:max-line-length */\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nfunction groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n    return function (source) {\n        return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n    };\n}\nexports.groupBy = groupBy;\nvar GroupByOperator = (function () {\n    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.subjectSelector = subjectSelector;\n    }\n    GroupByOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\n    };\n    return GroupByOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar GroupBySubscriber = (function (_super) {\n    __extends(GroupBySubscriber, _super);\n    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n        _super.call(this, destination);\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.subjectSelector = subjectSelector;\n        this.groups = null;\n        this.attemptedToUnsubscribe = false;\n        this.count = 0;\n    }\n    GroupBySubscriber.prototype._next = function (value) {\n        var key;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            this.error(err);\n            return;\n        }\n        this._group(value, key);\n    };\n    GroupBySubscriber.prototype._group = function (value, key) {\n        var groups = this.groups;\n        if (!groups) {\n            groups = this.groups = typeof key === 'string' ? new FastMap_1.FastMap() : new Map_1.Map();\n        }\n        var group = groups.get(key);\n        var element;\n        if (this.elementSelector) {\n            try {\n                element = this.elementSelector(value);\n            }\n            catch (err) {\n                this.error(err);\n            }\n        }\n        else {\n            element = value;\n        }\n        if (!group) {\n            group = this.subjectSelector ? this.subjectSelector() : new Subject_1.Subject();\n            groups.set(key, group);\n            var groupedObservable = new GroupedObservable(key, group, this);\n            this.destination.next(groupedObservable);\n            if (this.durationSelector) {\n                var duration = void 0;\n                try {\n                    duration = this.durationSelector(new GroupedObservable(key, group));\n                }\n                catch (err) {\n                    this.error(err);\n                    return;\n                }\n                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n            }\n        }\n        if (!group.closed) {\n            group.next(element);\n        }\n    };\n    GroupBySubscriber.prototype._error = function (err) {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.error(err);\n            });\n            groups.clear();\n        }\n        this.destination.error(err);\n    };\n    GroupBySubscriber.prototype._complete = function () {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.complete();\n            });\n            groups.clear();\n        }\n        this.destination.complete();\n    };\n    GroupBySubscriber.prototype.removeGroup = function (key) {\n        this.groups.delete(key);\n    };\n    GroupBySubscriber.prototype.unsubscribe = function () {\n        if (!this.closed) {\n            this.attemptedToUnsubscribe = true;\n            if (this.count === 0) {\n                _super.prototype.unsubscribe.call(this);\n            }\n        }\n    };\n    return GroupBySubscriber;\n}(Subscriber_1.Subscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar GroupDurationSubscriber = (function (_super) {\n    __extends(GroupDurationSubscriber, _super);\n    function GroupDurationSubscriber(key, group, parent) {\n        _super.call(this, group);\n        this.key = key;\n        this.group = group;\n        this.parent = parent;\n    }\n    GroupDurationSubscriber.prototype._next = function (value) {\n        this.complete();\n    };\n    GroupDurationSubscriber.prototype._unsubscribe = function () {\n        var _a = this, parent = _a.parent, key = _a.key;\n        this.key = this.parent = null;\n        if (parent) {\n            parent.removeGroup(key);\n        }\n    };\n    return GroupDurationSubscriber;\n}(Subscriber_1.Subscriber));\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nvar GroupedObservable = (function (_super) {\n    __extends(GroupedObservable, _super);\n    function GroupedObservable(key, groupSubject, refCountSubscription) {\n        _super.call(this);\n        this.key = key;\n        this.groupSubject = groupSubject;\n        this.refCountSubscription = refCountSubscription;\n    }\n    GroupedObservable.prototype._subscribe = function (subscriber) {\n        var subscription = new Subscription_1.Subscription();\n        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;\n        if (refCountSubscription && !refCountSubscription.closed) {\n            subscription.add(new InnerRefCountSubscription(refCountSubscription));\n        }\n        subscription.add(groupSubject.subscribe(subscriber));\n        return subscription;\n    };\n    return GroupedObservable;\n}(Observable_1.Observable));\nexports.GroupedObservable = GroupedObservable;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerRefCountSubscription = (function (_super) {\n    __extends(InnerRefCountSubscription, _super);\n    function InnerRefCountSubscription(parent) {\n        _super.call(this);\n        this.parent = parent;\n        parent.count++;\n    }\n    InnerRefCountSubscription.prototype.unsubscribe = function () {\n        var parent = this.parent;\n        if (!parent.closed && !this.closed) {\n            _super.prototype.unsubscribe.call(this);\n            parent.count -= 1;\n            if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n                parent.unsubscribe();\n            }\n        }\n    };\n    return InnerRefCountSubscription;\n}(Subscription_1.Subscription));\n//# sourceMappingURL=groupBy.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar EmptyError_1 = require('../util/EmptyError');\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nfunction first(predicate, resultSelector, defaultValue) {\n    return function (source) { return source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source)); };\n}\nexports.first = first;\nvar FirstOperator = (function () {\n    function FirstOperator(predicate, resultSelector, defaultValue, source) {\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n    }\n    FirstOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n    };\n    return FirstOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FirstSubscriber = (function (_super) {\n    __extends(FirstSubscriber, _super);\n    function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n        this.index = 0;\n        this.hasCompleted = false;\n        this._emitted = false;\n    }\n    FirstSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this._tryPredicate(value, index);\n        }\n        else {\n            this._emit(value, index);\n        }\n    };\n    FirstSubscriber.prototype._tryPredicate = function (value, index) {\n        var result;\n        try {\n            result = this.predicate(value, index, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this._emit(value, index);\n        }\n    };\n    FirstSubscriber.prototype._emit = function (value, index) {\n        if (this.resultSelector) {\n            this._tryResultSelector(value, index);\n            return;\n        }\n        this._emitFinal(value);\n    };\n    FirstSubscriber.prototype._tryResultSelector = function (value, index) {\n        var result;\n        try {\n            result = this.resultSelector(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this._emitFinal(result);\n    };\n    FirstSubscriber.prototype._emitFinal = function (value) {\n        var destination = this.destination;\n        if (!this._emitted) {\n            this._emitted = true;\n            destination.next(value);\n            destination.complete();\n            this.hasCompleted = true;\n        }\n    };\n    FirstSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n            destination.next(this.defaultValue);\n            destination.complete();\n        }\n        else if (!this.hasCompleted) {\n            destination.error(new EmptyError_1.EmptyError);\n        }\n    };\n    return FirstSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=first.js.map","\"use strict\";\nvar find_1 = require('../operators/find');\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nfunction findIndex(predicate, thisArg) {\n    return function (source) { return source.lift(new find_1.FindValueOperator(predicate, source, true, thisArg)); };\n}\nexports.findIndex = findIndex;\n//# sourceMappingURL=findIndex.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Subscription_1 = require('../Subscription');\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nfunction finalize(callback) {\n    return function (source) { return source.lift(new FinallyOperator(callback)); };\n}\nexports.finalize = finalize;\nvar FinallyOperator = (function () {\n    function FinallyOperator(callback) {\n        this.callback = callback;\n    }\n    FinallyOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n    };\n    return FinallyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FinallySubscriber = (function (_super) {\n    __extends(FinallySubscriber, _super);\n    function FinallySubscriber(destination, callback) {\n        _super.call(this, destination);\n        this.add(new Subscription_1.Subscription(callback));\n    }\n    return FinallySubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=finalize.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nfunction elementAt(index, defaultValue) {\n    return function (source) { return source.lift(new ElementAtOperator(index, defaultValue)); };\n}\nexports.elementAt = elementAt;\nvar ElementAtOperator = (function () {\n    function ElementAtOperator(index, defaultValue) {\n        this.index = index;\n        this.defaultValue = defaultValue;\n        if (index < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    ElementAtOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n    };\n    return ElementAtOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ElementAtSubscriber = (function (_super) {\n    __extends(ElementAtSubscriber, _super);\n    function ElementAtSubscriber(destination, index, defaultValue) {\n        _super.call(this, destination);\n        this.index = index;\n        this.defaultValue = defaultValue;\n    }\n    ElementAtSubscriber.prototype._next = function (x) {\n        if (this.index-- === 0) {\n            this.destination.next(x);\n            this.destination.complete();\n        }\n    };\n    ElementAtSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.index >= 0) {\n            if (typeof this.defaultValue !== 'undefined') {\n                destination.next(this.defaultValue);\n            }\n            else {\n                destination.error(new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError);\n            }\n        }\n        destination.complete();\n    };\n    return ElementAtSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=elementAt.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nfunction expand(project, concurrent, scheduler) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    if (scheduler === void 0) { scheduler = undefined; }\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n    return function (source) { return source.lift(new ExpandOperator(project, concurrent, scheduler)); };\n}\nexports.expand = expand;\nvar ExpandOperator = (function () {\n    function ExpandOperator(project, concurrent, scheduler) {\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n    }\n    ExpandOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n    };\n    return ExpandOperator;\n}());\nexports.ExpandOperator = ExpandOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ExpandSubscriber = (function (_super) {\n    __extends(ExpandSubscriber, _super);\n    function ExpandSubscriber(destination, project, concurrent, scheduler) {\n        _super.call(this, destination);\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n        this.index = 0;\n        this.active = 0;\n        this.hasCompleted = false;\n        if (concurrent < Number.POSITIVE_INFINITY) {\n            this.buffer = [];\n        }\n    }\n    ExpandSubscriber.dispatch = function (arg) {\n        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;\n        subscriber.subscribeToProjection(result, value, index);\n    };\n    ExpandSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (destination.closed) {\n            this._complete();\n            return;\n        }\n        var index = this.index++;\n        if (this.active < this.concurrent) {\n            destination.next(value);\n            var result = tryCatch_1.tryCatch(this.project)(value, index);\n            if (result === errorObject_1.errorObject) {\n                destination.error(errorObject_1.errorObject.e);\n            }\n            else if (!this.scheduler) {\n                this.subscribeToProjection(result, value, index);\n            }\n            else {\n                var state = { subscriber: this, result: result, value: value, index: index };\n                this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {\n        this.active++;\n        this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));\n    };\n    ExpandSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this._next(innerValue);\n    };\n    ExpandSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer && buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    return ExpandSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.ExpandSubscriber = ExpandSubscriber;\n//# sourceMappingURL=expand.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nfunction exhaustMap(project, resultSelector) {\n    return function (source) { return source.lift(new SwitchFirstMapOperator(project, resultSelector)); };\n}\nexports.exhaustMap = exhaustMap;\nvar SwitchFirstMapOperator = (function () {\n    function SwitchFirstMapOperator(project, resultSelector) {\n        this.project = project;\n        this.resultSelector = resultSelector;\n    }\n    SwitchFirstMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n    };\n    return SwitchFirstMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchFirstMapSubscriber = (function (_super) {\n    __extends(SwitchFirstMapSubscriber, _super);\n    function SwitchFirstMapSubscriber(destination, project, resultSelector) {\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.hasSubscription = false;\n        this.hasCompleted = false;\n        this.index = 0;\n    }\n    SwitchFirstMapSubscriber.prototype._next = function (value) {\n        if (!this.hasSubscription) {\n            this.tryNext(value);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.tryNext = function (value) {\n        var index = this.index++;\n        var destination = this.destination;\n        try {\n            var result = this.project(value, index);\n            this.hasSubscription = true;\n            this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));\n        }\n        catch (err) {\n            destination.error(err);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        if (resultSelector) {\n            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            destination.next(innerValue);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        try {\n            var result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n            destination.next(result);\n        }\n        catch (err) {\n            destination.error(err);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.notifyError = function (err) {\n        this.destination.error(err);\n    };\n    SwitchFirstMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return SwitchFirstMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=exhaustMap.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nfunction exhaust() {\n    return function (source) { return source.lift(new SwitchFirstOperator()); };\n}\nexports.exhaust = exhaust;\nvar SwitchFirstOperator = (function () {\n    function SwitchFirstOperator() {\n    }\n    SwitchFirstOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchFirstSubscriber(subscriber));\n    };\n    return SwitchFirstOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchFirstSubscriber = (function (_super) {\n    __extends(SwitchFirstSubscriber, _super);\n    function SwitchFirstSubscriber(destination) {\n        _super.call(this, destination);\n        this.hasCompleted = false;\n        this.hasSubscription = false;\n    }\n    SwitchFirstSubscriber.prototype._next = function (value) {\n        if (!this.hasSubscription) {\n            this.hasSubscription = true;\n            this.add(subscribeToResult_1.subscribeToResult(this, value));\n        }\n    };\n    SwitchFirstSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n    };\n    SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return SwitchFirstSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=exhaust.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nfunction tap(nextOrObserver, error, complete) {\n    return function tapOperatorFunction(source) {\n        return source.lift(new DoOperator(nextOrObserver, error, complete));\n    };\n}\nexports.tap = tap;\nvar DoOperator = (function () {\n    function DoOperator(nextOrObserver, error, complete) {\n        this.nextOrObserver = nextOrObserver;\n        this.error = error;\n        this.complete = complete;\n    }\n    DoOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n    };\n    return DoOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DoSubscriber = (function (_super) {\n    __extends(DoSubscriber, _super);\n    function DoSubscriber(destination, nextOrObserver, error, complete) {\n        _super.call(this, destination);\n        var safeSubscriber = new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n        safeSubscriber.syncErrorThrowable = true;\n        this.add(safeSubscriber);\n        this.safeSubscriber = safeSubscriber;\n    }\n    DoSubscriber.prototype._next = function (value) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.next(value);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.next(value);\n        }\n    };\n    DoSubscriber.prototype._error = function (err) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.error(err);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.error(err);\n        }\n    };\n    DoSubscriber.prototype._complete = function () {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.complete();\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    return DoSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=tap.js.map","\"use strict\";\nvar distinctUntilChanged_1 = require('./distinctUntilChanged');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nfunction distinctUntilKeyChanged(key, compare) {\n    return distinctUntilChanged_1.distinctUntilChanged(function (x, y) { return compare ? compare(x[key], y[key]) : x[key] === y[key]; });\n}\nexports.distinctUntilKeyChanged = distinctUntilKeyChanged;\n//# sourceMappingURL=distinctUntilKeyChanged.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar Set_1 = require('../util/Set');\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nfunction distinct(keySelector, flushes) {\n    return function (source) { return source.lift(new DistinctOperator(keySelector, flushes)); };\n}\nexports.distinct = distinct;\nvar DistinctOperator = (function () {\n    function DistinctOperator(keySelector, flushes) {\n        this.keySelector = keySelector;\n        this.flushes = flushes;\n    }\n    DistinctOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n    };\n    return DistinctOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctSubscriber = (function (_super) {\n    __extends(DistinctSubscriber, _super);\n    function DistinctSubscriber(destination, keySelector, flushes) {\n        _super.call(this, destination);\n        this.keySelector = keySelector;\n        this.values = new Set_1.Set();\n        if (flushes) {\n            this.add(subscribeToResult_1.subscribeToResult(this, flushes));\n        }\n    }\n    DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values.clear();\n    };\n    DistinctSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DistinctSubscriber.prototype._next = function (value) {\n        if (this.keySelector) {\n            this._useKeySelector(value);\n        }\n        else {\n            this._finalizeNext(value, value);\n        }\n    };\n    DistinctSubscriber.prototype._useKeySelector = function (value) {\n        var key;\n        var destination = this.destination;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this._finalizeNext(key, value);\n    };\n    DistinctSubscriber.prototype._finalizeNext = function (key, value) {\n        var values = this.values;\n        if (!values.has(key)) {\n            values.add(key);\n            this.destination.next(value);\n        }\n    };\n    return DistinctSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.DistinctSubscriber = DistinctSubscriber;\n//# sourceMappingURL=distinct.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Observable_1 = require('../Observable');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nfunction delayWhen(delayDurationSelector, subscriptionDelay) {\n    if (subscriptionDelay) {\n        return function (source) {\n            return new SubscriptionDelayObservable(source, subscriptionDelay)\n                .lift(new DelayWhenOperator(delayDurationSelector));\n        };\n    }\n    return function (source) { return source.lift(new DelayWhenOperator(delayDurationSelector)); };\n}\nexports.delayWhen = delayWhen;\nvar DelayWhenOperator = (function () {\n    function DelayWhenOperator(delayDurationSelector) {\n        this.delayDurationSelector = delayDurationSelector;\n    }\n    DelayWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n    };\n    return DelayWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DelayWhenSubscriber = (function (_super) {\n    __extends(DelayWhenSubscriber, _super);\n    function DelayWhenSubscriber(destination, delayDurationSelector) {\n        _super.call(this, destination);\n        this.delayDurationSelector = delayDurationSelector;\n        this.completed = false;\n        this.delayNotifierSubscriptions = [];\n        this.values = [];\n    }\n    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(outerValue);\n        this.removeSubscription(innerSub);\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        var value = this.removeSubscription(innerSub);\n        if (value) {\n            this.destination.next(value);\n        }\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype._next = function (value) {\n        try {\n            var delayNotifier = this.delayDurationSelector(value);\n            if (delayNotifier) {\n                this.tryDelay(delayNotifier, value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    DelayWhenSubscriber.prototype._complete = function () {\n        this.completed = true;\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {\n        subscription.unsubscribe();\n        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n        var value = null;\n        if (subscriptionIdx !== -1) {\n            value = this.values[subscriptionIdx];\n            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n            this.values.splice(subscriptionIdx, 1);\n        }\n        return value;\n    };\n    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {\n        var notifierSubscription = subscribeToResult_1.subscribeToResult(this, delayNotifier, value);\n        if (notifierSubscription && !notifierSubscription.closed) {\n            this.add(notifierSubscription);\n            this.delayNotifierSubscriptions.push(notifierSubscription);\n        }\n        this.values.push(value);\n    };\n    DelayWhenSubscriber.prototype.tryComplete = function () {\n        if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n            this.destination.complete();\n        }\n    };\n    return DelayWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelayObservable = (function (_super) {\n    __extends(SubscriptionDelayObservable, _super);\n    function SubscriptionDelayObservable(source, subscriptionDelay) {\n        _super.call(this);\n        this.source = source;\n        this.subscriptionDelay = subscriptionDelay;\n    }\n    SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {\n        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n    };\n    return SubscriptionDelayObservable;\n}(Observable_1.Observable));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelaySubscriber = (function (_super) {\n    __extends(SubscriptionDelaySubscriber, _super);\n    function SubscriptionDelaySubscriber(parent, source) {\n        _super.call(this);\n        this.parent = parent;\n        this.source = source;\n        this.sourceSubscribed = false;\n    }\n    SubscriptionDelaySubscriber.prototype._next = function (unused) {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype._error = function (err) {\n        this.unsubscribe();\n        this.parent.error(err);\n    };\n    SubscriptionDelaySubscriber.prototype._complete = function () {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {\n        if (!this.sourceSubscribed) {\n            this.sourceSubscribed = true;\n            this.unsubscribe();\n            this.source.subscribe(this.parent);\n        }\n    };\n    return SubscriptionDelaySubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=delayWhen.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar async_1 = require('../scheduler/async');\nvar isDate_1 = require('../util/isDate');\nvar Subscriber_1 = require('../Subscriber');\nvar Notification_1 = require('../Notification');\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nfunction delay(delay, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    var absoluteDelay = isDate_1.isDate(delay);\n    var delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);\n    return function (source) { return source.lift(new DelayOperator(delayFor, scheduler)); };\n}\nexports.delay = delay;\nvar DelayOperator = (function () {\n    function DelayOperator(delay, scheduler) {\n        this.delay = delay;\n        this.scheduler = scheduler;\n    }\n    DelayOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n    };\n    return DelayOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DelaySubscriber = (function (_super) {\n    __extends(DelaySubscriber, _super);\n    function DelaySubscriber(destination, delay, scheduler) {\n        _super.call(this, destination);\n        this.delay = delay;\n        this.scheduler = scheduler;\n        this.queue = [];\n        this.active = false;\n        this.errored = false;\n    }\n    DelaySubscriber.dispatch = function (state) {\n        var source = state.source;\n        var queue = source.queue;\n        var scheduler = state.scheduler;\n        var destination = state.destination;\n        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n            queue.shift().notification.observe(destination);\n        }\n        if (queue.length > 0) {\n            var delay_1 = Math.max(0, queue[0].time - scheduler.now());\n            this.schedule(state, delay_1);\n        }\n        else {\n            source.active = false;\n        }\n    };\n    DelaySubscriber.prototype._schedule = function (scheduler) {\n        this.active = true;\n        this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n            source: this, destination: this.destination, scheduler: scheduler\n        }));\n    };\n    DelaySubscriber.prototype.scheduleNotification = function (notification) {\n        if (this.errored === true) {\n            return;\n        }\n        var scheduler = this.scheduler;\n        var message = new DelayMessage(scheduler.now() + this.delay, notification);\n        this.queue.push(message);\n        if (this.active === false) {\n            this._schedule(scheduler);\n        }\n    };\n    DelaySubscriber.prototype._next = function (value) {\n        this.scheduleNotification(Notification_1.Notification.createNext(value));\n    };\n    DelaySubscriber.prototype._error = function (err) {\n        this.errored = true;\n        this.queue = [];\n        this.destination.error(err);\n    };\n    DelaySubscriber.prototype._complete = function () {\n        this.scheduleNotification(Notification_1.Notification.createComplete());\n    };\n    return DelaySubscriber;\n}(Subscriber_1.Subscriber));\nvar DelayMessage = (function () {\n    function DelayMessage(time, notification) {\n        this.time = time;\n        this.notification = notification;\n    }\n    return DelayMessage;\n}());\n//# sourceMappingURL=delay.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar async_1 = require('../scheduler/async');\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nfunction debounceTime(dueTime, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return function (source) { return source.lift(new DebounceTimeOperator(dueTime, scheduler)); };\n}\nexports.debounceTime = debounceTime;\nvar DebounceTimeOperator = (function () {\n    function DebounceTimeOperator(dueTime, scheduler) {\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n    }\n    DebounceTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n    };\n    return DebounceTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DebounceTimeSubscriber = (function (_super) {\n    __extends(DebounceTimeSubscriber, _super);\n    function DebounceTimeSubscriber(destination, dueTime, scheduler) {\n        _super.call(this, destination);\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n        this.debouncedSubscription = null;\n        this.lastValue = null;\n        this.hasValue = false;\n    }\n    DebounceTimeSubscriber.prototype._next = function (value) {\n        this.clearDebounce();\n        this.lastValue = value;\n        this.hasValue = true;\n        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n    };\n    DebounceTimeSubscriber.prototype._complete = function () {\n        this.debouncedNext();\n        this.destination.complete();\n    };\n    DebounceTimeSubscriber.prototype.debouncedNext = function () {\n        this.clearDebounce();\n        if (this.hasValue) {\n            this.destination.next(this.lastValue);\n            this.lastValue = null;\n            this.hasValue = false;\n        }\n    };\n    DebounceTimeSubscriber.prototype.clearDebounce = function () {\n        var debouncedSubscription = this.debouncedSubscription;\n        if (debouncedSubscription !== null) {\n            this.remove(debouncedSubscription);\n            debouncedSubscription.unsubscribe();\n            this.debouncedSubscription = null;\n        }\n    };\n    return DebounceTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchNext(subscriber) {\n    subscriber.debouncedNext();\n}\n//# sourceMappingURL=debounceTime.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nfunction debounce(durationSelector) {\n    return function (source) { return source.lift(new DebounceOperator(durationSelector)); };\n}\nexports.debounce = debounce;\nvar DebounceOperator = (function () {\n    function DebounceOperator(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    DebounceOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n    };\n    return DebounceOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DebounceSubscriber = (function (_super) {\n    __extends(DebounceSubscriber, _super);\n    function DebounceSubscriber(destination, durationSelector) {\n        _super.call(this, destination);\n        this.durationSelector = durationSelector;\n        this.hasValue = false;\n        this.durationSubscription = null;\n    }\n    DebounceSubscriber.prototype._next = function (value) {\n        try {\n            var result = this.durationSelector.call(this, value);\n            if (result) {\n                this._tryNext(value, result);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    DebounceSubscriber.prototype._complete = function () {\n        this.emitValue();\n        this.destination.complete();\n    };\n    DebounceSubscriber.prototype._tryNext = function (value, duration) {\n        var subscription = this.durationSubscription;\n        this.value = value;\n        this.hasValue = true;\n        if (subscription) {\n            subscription.unsubscribe();\n            this.remove(subscription);\n        }\n        subscription = subscribeToResult_1.subscribeToResult(this, duration);\n        if (!subscription.closed) {\n            this.add(this.durationSubscription = subscription);\n        }\n    };\n    DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    DebounceSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    DebounceSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            var value = this.value;\n            var subscription = this.durationSubscription;\n            if (subscription) {\n                this.durationSubscription = null;\n                subscription.unsubscribe();\n                this.remove(subscription);\n            }\n            this.value = null;\n            this.hasValue = false;\n            _super.prototype._next.call(this, value);\n        }\n    };\n    return DebounceSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=debounce.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nfunction dematerialize() {\n    return function dematerializeOperatorFunction(source) {\n        return source.lift(new DeMaterializeOperator());\n    };\n}\nexports.dematerialize = dematerialize;\nvar DeMaterializeOperator = (function () {\n    function DeMaterializeOperator() {\n    }\n    DeMaterializeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DeMaterializeSubscriber(subscriber));\n    };\n    return DeMaterializeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DeMaterializeSubscriber = (function (_super) {\n    __extends(DeMaterializeSubscriber, _super);\n    function DeMaterializeSubscriber(destination) {\n        _super.call(this, destination);\n    }\n    DeMaterializeSubscriber.prototype._next = function (value) {\n        value.observe(this.destination);\n    };\n    return DeMaterializeSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=dematerialize.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nfunction count(predicate) {\n    return function (source) { return source.lift(new CountOperator(predicate, source)); };\n}\nexports.count = count;\nvar CountOperator = (function () {\n    function CountOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    CountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n    };\n    return CountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CountSubscriber = (function (_super) {\n    __extends(CountSubscriber, _super);\n    function CountSubscriber(destination, predicate, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.source = source;\n        this.count = 0;\n        this.index = 0;\n    }\n    CountSubscriber.prototype._next = function (value) {\n        if (this.predicate) {\n            this._tryPredicate(value);\n        }\n        else {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._tryPredicate = function (value) {\n        var result;\n        try {\n            result = this.predicate(value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._complete = function () {\n        this.destination.next(this.count);\n        this.destination.complete();\n    };\n    return CountSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=count.js.map","\"use strict\";\nvar concatMap_1 = require('./concatMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nfunction concatMapTo(innerObservable, resultSelector) {\n    return concatMap_1.concatMap(function () { return innerObservable; }, resultSelector);\n}\nexports.concatMapTo = concatMapTo;\n//# sourceMappingURL=concatMapTo.js.map","\"use strict\";\nvar concat_1 = require('../observable/concat');\nvar concat_2 = require('../observable/concat');\nexports.concatStatic = concat_2.concat;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nfunction concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return function (source) { return source.lift.call(concat_1.concat.apply(void 0, [source].concat(observables))); };\n}\nexports.concat = concat;\n//# sourceMappingURL=concat.js.map","\"use strict\";\nvar combineLatest_1 = require('../operators/combineLatest');\nfunction combineAll(project) {\n    return function (source) { return source.lift(new combineLatest_1.CombineLatestOperator(project)); };\n}\nexports.combineAll = combineAll;\n//# sourceMappingURL=combineAll.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nfunction catchError(selector) {\n    return function catchErrorOperatorFunction(source) {\n        var operator = new CatchOperator(selector);\n        var caught = source.lift(operator);\n        return (operator.caught = caught);\n    };\n}\nexports.catchError = catchError;\nvar CatchOperator = (function () {\n    function CatchOperator(selector) {\n        this.selector = selector;\n    }\n    CatchOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n    };\n    return CatchOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CatchSubscriber = (function (_super) {\n    __extends(CatchSubscriber, _super);\n    function CatchSubscriber(destination, selector, caught) {\n        _super.call(this, destination);\n        this.selector = selector;\n        this.caught = caught;\n    }\n    // NOTE: overriding `error` instead of `_error` because we don't want\n    // to have this flag this subscriber as `isStopped`. We can mimic the\n    // behavior of the RetrySubscriber (from the `retry` operator), where\n    // we unsubscribe from our source chain, reset our Subscriber flags,\n    // then subscribe to the selector result.\n    CatchSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var result = void 0;\n            try {\n                result = this.selector(err, this.caught);\n            }\n            catch (err2) {\n                _super.prototype.error.call(this, err2);\n                return;\n            }\n            this._unsubscribeAndRecycle();\n            this.add(subscribeToResult_1.subscribeToResult(this, result));\n        }\n    };\n    return CatchSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=catchError.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('../Subscription');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nfunction bufferWhen(closingSelector) {\n    return function (source) {\n        return source.lift(new BufferWhenOperator(closingSelector));\n    };\n}\nexports.bufferWhen = bufferWhen;\nvar BufferWhenOperator = (function () {\n    function BufferWhenOperator(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    BufferWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n    };\n    return BufferWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferWhenSubscriber = (function (_super) {\n    __extends(BufferWhenSubscriber, _super);\n    function BufferWhenSubscriber(destination, closingSelector) {\n        _super.call(this, destination);\n        this.closingSelector = closingSelector;\n        this.subscribing = false;\n        this.openBuffer();\n    }\n    BufferWhenSubscriber.prototype._next = function (value) {\n        this.buffer.push(value);\n    };\n    BufferWhenSubscriber.prototype._complete = function () {\n        var buffer = this.buffer;\n        if (buffer) {\n            this.destination.next(buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    BufferWhenSubscriber.prototype._unsubscribe = function () {\n        this.buffer = null;\n        this.subscribing = false;\n    };\n    BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openBuffer();\n    };\n    BufferWhenSubscriber.prototype.notifyComplete = function () {\n        if (this.subscribing) {\n            this.complete();\n        }\n        else {\n            this.openBuffer();\n        }\n    };\n    BufferWhenSubscriber.prototype.openBuffer = function () {\n        var closingSubscription = this.closingSubscription;\n        if (closingSubscription) {\n            this.remove(closingSubscription);\n            closingSubscription.unsubscribe();\n        }\n        var buffer = this.buffer;\n        if (this.buffer) {\n            this.destination.next(buffer);\n        }\n        this.buffer = [];\n        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();\n        if (closingNotifier === errorObject_1.errorObject) {\n            this.error(errorObject_1.errorObject.e);\n        }\n        else {\n            closingSubscription = new Subscription_1.Subscription();\n            this.closingSubscription = closingSubscription;\n            this.add(closingSubscription);\n            this.subscribing = true;\n            closingSubscription.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));\n            this.subscribing = false;\n        }\n    };\n    return BufferWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=bufferWhen.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('../Subscription');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nfunction bufferToggle(openings, closingSelector) {\n    return function bufferToggleOperatorFunction(source) {\n        return source.lift(new BufferToggleOperator(openings, closingSelector));\n    };\n}\nexports.bufferToggle = bufferToggle;\nvar BufferToggleOperator = (function () {\n    function BufferToggleOperator(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    BufferToggleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    };\n    return BufferToggleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferToggleSubscriber = (function (_super) {\n    __extends(BufferToggleSubscriber, _super);\n    function BufferToggleSubscriber(destination, openings, closingSelector) {\n        _super.call(this, destination);\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n        this.contexts = [];\n        this.add(subscribeToResult_1.subscribeToResult(this, openings));\n    }\n    BufferToggleSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        var len = contexts.length;\n        for (var i = 0; i < len; i++) {\n            contexts[i].buffer.push(value);\n        }\n    };\n    BufferToggleSubscriber.prototype._error = function (err) {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context = contexts.shift();\n            context.subscription.unsubscribe();\n            context.buffer = null;\n            context.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._error.call(this, err);\n    };\n    BufferToggleSubscriber.prototype._complete = function () {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context = contexts.shift();\n            this.destination.next(context.buffer);\n            context.subscription.unsubscribe();\n            context.buffer = null;\n            context.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._complete.call(this);\n    };\n    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n    };\n    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.closeBuffer(innerSub.context);\n    };\n    BufferToggleSubscriber.prototype.openBuffer = function (value) {\n        try {\n            var closingSelector = this.closingSelector;\n            var closingNotifier = closingSelector.call(this, value);\n            if (closingNotifier) {\n                this.trySubscribe(closingNotifier);\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    BufferToggleSubscriber.prototype.closeBuffer = function (context) {\n        var contexts = this.contexts;\n        if (contexts && context) {\n            var buffer = context.buffer, subscription = context.subscription;\n            this.destination.next(buffer);\n            contexts.splice(contexts.indexOf(context), 1);\n            this.remove(subscription);\n            subscription.unsubscribe();\n        }\n    };\n    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {\n        var contexts = this.contexts;\n        var buffer = [];\n        var subscription = new Subscription_1.Subscription();\n        var context = { buffer: buffer, subscription: subscription };\n        contexts.push(context);\n        var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);\n        if (!innerSubscription || innerSubscription.closed) {\n            this.closeBuffer(context);\n        }\n        else {\n            innerSubscription.context = context;\n            this.add(innerSubscription);\n            subscription.add(innerSubscription);\n        }\n    };\n    return BufferToggleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=bufferToggle.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar async_1 = require('../scheduler/async');\nvar Subscriber_1 = require('../Subscriber');\nvar isScheduler_1 = require('../util/isScheduler');\n/* tslint:enable:max-line-length */\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nfunction bufferTime(bufferTimeSpan) {\n    var length = arguments.length;\n    var scheduler = async_1.async;\n    if (isScheduler_1.isScheduler(arguments[arguments.length - 1])) {\n        scheduler = arguments[arguments.length - 1];\n        length--;\n    }\n    var bufferCreationInterval = null;\n    if (length >= 2) {\n        bufferCreationInterval = arguments[1];\n    }\n    var maxBufferSize = Number.POSITIVE_INFINITY;\n    if (length >= 3) {\n        maxBufferSize = arguments[2];\n    }\n    return function bufferTimeOperatorFunction(source) {\n        return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n    };\n}\nexports.bufferTime = bufferTime;\nvar BufferTimeOperator = (function () {\n    function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        this.bufferTimeSpan = bufferTimeSpan;\n        this.bufferCreationInterval = bufferCreationInterval;\n        this.maxBufferSize = maxBufferSize;\n        this.scheduler = scheduler;\n    }\n    BufferTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));\n    };\n    return BufferTimeOperator;\n}());\nvar Context = (function () {\n    function Context() {\n        this.buffer = [];\n    }\n    return Context;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferTimeSubscriber = (function (_super) {\n    __extends(BufferTimeSubscriber, _super);\n    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        _super.call(this, destination);\n        this.bufferTimeSpan = bufferTimeSpan;\n        this.bufferCreationInterval = bufferCreationInterval;\n        this.maxBufferSize = maxBufferSize;\n        this.scheduler = scheduler;\n        this.contexts = [];\n        var context = this.openContext();\n        this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n        if (this.timespanOnly) {\n            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };\n            this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n        else {\n            var closeState = { subscriber: this, context: context };\n            var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: this, scheduler: scheduler };\n            this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n            this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n        }\n    }\n    BufferTimeSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        var len = contexts.length;\n        var filledBufferContext;\n        for (var i = 0; i < len; i++) {\n            var context = contexts[i];\n            var buffer = context.buffer;\n            buffer.push(value);\n            if (buffer.length == this.maxBufferSize) {\n                filledBufferContext = context;\n            }\n        }\n        if (filledBufferContext) {\n            this.onBufferFull(filledBufferContext);\n        }\n    };\n    BufferTimeSubscriber.prototype._error = function (err) {\n        this.contexts.length = 0;\n        _super.prototype._error.call(this, err);\n    };\n    BufferTimeSubscriber.prototype._complete = function () {\n        var _a = this, contexts = _a.contexts, destination = _a.destination;\n        while (contexts.length > 0) {\n            var context = contexts.shift();\n            destination.next(context.buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    BufferTimeSubscriber.prototype._unsubscribe = function () {\n        this.contexts = null;\n    };\n    BufferTimeSubscriber.prototype.onBufferFull = function (context) {\n        this.closeContext(context);\n        var closeAction = context.closeAction;\n        closeAction.unsubscribe();\n        this.remove(closeAction);\n        if (!this.closed && this.timespanOnly) {\n            context = this.openContext();\n            var bufferTimeSpan = this.bufferTimeSpan;\n            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };\n            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n    };\n    BufferTimeSubscriber.prototype.openContext = function () {\n        var context = new Context();\n        this.contexts.push(context);\n        return context;\n    };\n    BufferTimeSubscriber.prototype.closeContext = function (context) {\n        this.destination.next(context.buffer);\n        var contexts = this.contexts;\n        var spliceIndex = contexts ? contexts.indexOf(context) : -1;\n        if (spliceIndex >= 0) {\n            contexts.splice(contexts.indexOf(context), 1);\n        }\n    };\n    return BufferTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchBufferTimeSpanOnly(state) {\n    var subscriber = state.subscriber;\n    var prevContext = state.context;\n    if (prevContext) {\n        subscriber.closeContext(prevContext);\n    }\n    if (!subscriber.closed) {\n        state.context = subscriber.openContext();\n        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n    }\n}\nfunction dispatchBufferCreation(state) {\n    var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;\n    var context = subscriber.openContext();\n    var action = this;\n    if (!subscriber.closed) {\n        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));\n        action.schedule(state, bufferCreationInterval);\n    }\n}\nfunction dispatchBufferClose(arg) {\n    var subscriber = arg.subscriber, context = arg.context;\n    subscriber.closeContext(context);\n}\n//# sourceMappingURL=bufferTime.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nfunction bufferCount(bufferSize, startBufferEvery) {\n    if (startBufferEvery === void 0) { startBufferEvery = null; }\n    return function bufferCountOperatorFunction(source) {\n        return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));\n    };\n}\nexports.bufferCount = bufferCount;\nvar BufferCountOperator = (function () {\n    function BufferCountOperator(bufferSize, startBufferEvery) {\n        this.bufferSize = bufferSize;\n        this.startBufferEvery = startBufferEvery;\n        if (!startBufferEvery || bufferSize === startBufferEvery) {\n            this.subscriberClass = BufferCountSubscriber;\n        }\n        else {\n            this.subscriberClass = BufferSkipCountSubscriber;\n        }\n    }\n    BufferCountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n    };\n    return BufferCountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferCountSubscriber = (function (_super) {\n    __extends(BufferCountSubscriber, _super);\n    function BufferCountSubscriber(destination, bufferSize) {\n        _super.call(this, destination);\n        this.bufferSize = bufferSize;\n        this.buffer = [];\n    }\n    BufferCountSubscriber.prototype._next = function (value) {\n        var buffer = this.buffer;\n        buffer.push(value);\n        if (buffer.length == this.bufferSize) {\n            this.destination.next(buffer);\n            this.buffer = [];\n        }\n    };\n    BufferCountSubscriber.prototype._complete = function () {\n        var buffer = this.buffer;\n        if (buffer.length > 0) {\n            this.destination.next(buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    return BufferCountSubscriber;\n}(Subscriber_1.Subscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferSkipCountSubscriber = (function (_super) {\n    __extends(BufferSkipCountSubscriber, _super);\n    function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {\n        _super.call(this, destination);\n        this.bufferSize = bufferSize;\n        this.startBufferEvery = startBufferEvery;\n        this.buffers = [];\n        this.count = 0;\n    }\n    BufferSkipCountSubscriber.prototype._next = function (value) {\n        var _a = this, bufferSize = _a.bufferSize, startBufferEvery = _a.startBufferEvery, buffers = _a.buffers, count = _a.count;\n        this.count++;\n        if (count % startBufferEvery === 0) {\n            buffers.push([]);\n        }\n        for (var i = buffers.length; i--;) {\n            var buffer = buffers[i];\n            buffer.push(value);\n            if (buffer.length === bufferSize) {\n                buffers.splice(i, 1);\n                this.destination.next(buffer);\n            }\n        }\n    };\n    BufferSkipCountSubscriber.prototype._complete = function () {\n        var _a = this, buffers = _a.buffers, destination = _a.destination;\n        while (buffers.length > 0) {\n            var buffer = buffers.shift();\n            if (buffer.length > 0) {\n                destination.next(buffer);\n            }\n        }\n        _super.prototype._complete.call(this);\n    };\n    return BufferSkipCountSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=bufferCount.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nfunction buffer(closingNotifier) {\n    return function bufferOperatorFunction(source) {\n        return source.lift(new BufferOperator(closingNotifier));\n    };\n}\nexports.buffer = buffer;\nvar BufferOperator = (function () {\n    function BufferOperator(closingNotifier) {\n        this.closingNotifier = closingNotifier;\n    }\n    BufferOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n    };\n    return BufferOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferSubscriber = (function (_super) {\n    __extends(BufferSubscriber, _super);\n    function BufferSubscriber(destination, closingNotifier) {\n        _super.call(this, destination);\n        this.buffer = [];\n        this.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));\n    }\n    BufferSubscriber.prototype._next = function (value) {\n        this.buffer.push(value);\n    };\n    BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var buffer = this.buffer;\n        this.buffer = [];\n        this.destination.next(buffer);\n    };\n    return BufferSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=buffer.js.map","\"use strict\";\nvar QueueAction_1 = require('./QueueAction');\nvar QueueScheduler_1 = require('./QueueScheduler');\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\nexports.queue = new QueueScheduler_1.QueueScheduler(QueueAction_1.QueueAction);\n//# sourceMappingURL=queue.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../../util/root');\nvar tryCatch_1 = require('../../util/tryCatch');\nvar errorObject_1 = require('../../util/errorObject');\nvar Observable_1 = require('../../Observable');\nvar Subscriber_1 = require('../../Subscriber');\nvar map_1 = require('../../operators/map');\nfunction getCORSRequest() {\n    if (root_1.root.XMLHttpRequest) {\n        return new root_1.root.XMLHttpRequest();\n    }\n    else if (!!root_1.root.XDomainRequest) {\n        return new root_1.root.XDomainRequest();\n    }\n    else {\n        throw new Error('CORS is not supported by your browser');\n    }\n}\nfunction getXMLHttpRequest() {\n    if (root_1.root.XMLHttpRequest) {\n        return new root_1.root.XMLHttpRequest();\n    }\n    else {\n        var progId = void 0;\n        try {\n            var progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n            for (var i = 0; i < 3; i++) {\n                try {\n                    progId = progIds[i];\n                    if (new root_1.root.ActiveXObject(progId)) {\n                        break;\n                    }\n                }\n                catch (e) {\n                }\n            }\n            return new root_1.root.ActiveXObject(progId);\n        }\n        catch (e) {\n            throw new Error('XMLHttpRequest is not supported by your browser');\n        }\n    }\n}\nfunction ajaxGet(url, headers) {\n    if (headers === void 0) { headers = null; }\n    return new AjaxObservable({ method: 'GET', url: url, headers: headers });\n}\nexports.ajaxGet = ajaxGet;\n;\nfunction ajaxPost(url, body, headers) {\n    return new AjaxObservable({ method: 'POST', url: url, body: body, headers: headers });\n}\nexports.ajaxPost = ajaxPost;\n;\nfunction ajaxDelete(url, headers) {\n    return new AjaxObservable({ method: 'DELETE', url: url, headers: headers });\n}\nexports.ajaxDelete = ajaxDelete;\n;\nfunction ajaxPut(url, body, headers) {\n    return new AjaxObservable({ method: 'PUT', url: url, body: body, headers: headers });\n}\nexports.ajaxPut = ajaxPut;\n;\nfunction ajaxPatch(url, body, headers) {\n    return new AjaxObservable({ method: 'PATCH', url: url, body: body, headers: headers });\n}\nexports.ajaxPatch = ajaxPatch;\n;\nvar mapResponse = map_1.map(function (x, index) { return x.response; });\nfunction ajaxGetJSON(url, headers) {\n    return mapResponse(new AjaxObservable({\n        method: 'GET',\n        url: url,\n        responseType: 'json',\n        headers: headers\n    }));\n}\nexports.ajaxGetJSON = ajaxGetJSON;\n;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar AjaxObservable = (function (_super) {\n    __extends(AjaxObservable, _super);\n    function AjaxObservable(urlOrRequest) {\n        _super.call(this);\n        var request = {\n            async: true,\n            createXHR: function () {\n                return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n            },\n            crossDomain: false,\n            withCredentials: false,\n            headers: {},\n            method: 'GET',\n            responseType: 'json',\n            timeout: 0\n        };\n        if (typeof urlOrRequest === 'string') {\n            request.url = urlOrRequest;\n        }\n        else {\n            for (var prop in urlOrRequest) {\n                if (urlOrRequest.hasOwnProperty(prop)) {\n                    request[prop] = urlOrRequest[prop];\n                }\n            }\n        }\n        this.request = request;\n    }\n    AjaxObservable.prototype._subscribe = function (subscriber) {\n        return new AjaxSubscriber(subscriber, this.request);\n    };\n    /**\n     * Creates an observable for an Ajax request with either a request object with\n     * url, headers, etc or a string for a URL.\n     *\n     * @example\n     * source = Rx.Observable.ajax('/products');\n     * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n     *\n     * @param {string|Object} request Can be one of the following:\n     *   A string of the URL to make the Ajax call.\n     *   An object with the following properties\n     *   - url: URL of the request\n     *   - body: The body of the request\n     *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n     *   - async: Whether the request is async\n     *   - headers: Optional headers\n     *   - crossDomain: true if a cross domain request, else false\n     *   - createXHR: a function to override if you need to use an alternate\n     *   XMLHttpRequest implementation.\n     *   - resultSelector: a function to use to alter the output value type of\n     *   the Observable. Gets {@link AjaxResponse} as an argument.\n     * @return {Observable} An observable sequence containing the XMLHttpRequest.\n     * @static true\n     * @name ajax\n     * @owner Observable\n    */\n    AjaxObservable.create = (function () {\n        var create = function (urlOrRequest) {\n            return new AjaxObservable(urlOrRequest);\n        };\n        create.get = ajaxGet;\n        create.post = ajaxPost;\n        create.delete = ajaxDelete;\n        create.put = ajaxPut;\n        create.patch = ajaxPatch;\n        create.getJSON = ajaxGetJSON;\n        return create;\n    })();\n    return AjaxObservable;\n}(Observable_1.Observable));\nexports.AjaxObservable = AjaxObservable;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AjaxSubscriber = (function (_super) {\n    __extends(AjaxSubscriber, _super);\n    function AjaxSubscriber(destination, request) {\n        _super.call(this, destination);\n        this.request = request;\n        this.done = false;\n        var headers = request.headers = request.headers || {};\n        // force CORS if requested\n        if (!request.crossDomain && !headers['X-Requested-With']) {\n            headers['X-Requested-With'] = 'XMLHttpRequest';\n        }\n        // ensure content type is set\n        if (!('Content-Type' in headers) && !(root_1.root.FormData && request.body instanceof root_1.root.FormData) && typeof request.body !== 'undefined') {\n            headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n        }\n        // properly serialize body\n        request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n        this.send();\n    }\n    AjaxSubscriber.prototype.next = function (e) {\n        this.done = true;\n        var _a = this, xhr = _a.xhr, request = _a.request, destination = _a.destination;\n        var response = new AjaxResponse(e, xhr, request);\n        destination.next(response);\n    };\n    AjaxSubscriber.prototype.send = function () {\n        var _a = this, request = _a.request, _b = _a.request, user = _b.user, method = _b.method, url = _b.url, async = _b.async, password = _b.password, headers = _b.headers, body = _b.body;\n        var createXHR = request.createXHR;\n        var xhr = tryCatch_1.tryCatch(createXHR).call(request);\n        if (xhr === errorObject_1.errorObject) {\n            this.error(errorObject_1.errorObject.e);\n        }\n        else {\n            this.xhr = xhr;\n            // set up the events before open XHR\n            // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n            // You need to add the event listeners before calling open() on the request.\n            // Otherwise the progress events will not fire.\n            this.setupEvents(xhr, request);\n            // open XHR\n            var result = void 0;\n            if (user) {\n                result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n            }\n            else {\n                result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async);\n            }\n            if (result === errorObject_1.errorObject) {\n                this.error(errorObject_1.errorObject.e);\n                return null;\n            }\n            // timeout, responseType and withCredentials can be set once the XHR is open\n            if (async) {\n                xhr.timeout = request.timeout;\n                xhr.responseType = request.responseType;\n            }\n            if ('withCredentials' in xhr) {\n                xhr.withCredentials = !!request.withCredentials;\n            }\n            // set headers\n            this.setHeaders(xhr, headers);\n            // finally send the request\n            result = body ? tryCatch_1.tryCatch(xhr.send).call(xhr, body) : tryCatch_1.tryCatch(xhr.send).call(xhr);\n            if (result === errorObject_1.errorObject) {\n                this.error(errorObject_1.errorObject.e);\n                return null;\n            }\n        }\n        return xhr;\n    };\n    AjaxSubscriber.prototype.serializeBody = function (body, contentType) {\n        if (!body || typeof body === 'string') {\n            return body;\n        }\n        else if (root_1.root.FormData && body instanceof root_1.root.FormData) {\n            return body;\n        }\n        if (contentType) {\n            var splitIndex = contentType.indexOf(';');\n            if (splitIndex !== -1) {\n                contentType = contentType.substring(0, splitIndex);\n            }\n        }\n        switch (contentType) {\n            case 'application/x-www-form-urlencoded':\n                return Object.keys(body).map(function (key) { return (encodeURI(key) + \"=\" + encodeURI(body[key])); }).join('&');\n            case 'application/json':\n                return JSON.stringify(body);\n            default:\n                return body;\n        }\n    };\n    AjaxSubscriber.prototype.setHeaders = function (xhr, headers) {\n        for (var key in headers) {\n            if (headers.hasOwnProperty(key)) {\n                xhr.setRequestHeader(key, headers[key]);\n            }\n        }\n    };\n    AjaxSubscriber.prototype.setupEvents = function (xhr, request) {\n        var progressSubscriber = request.progressSubscriber;\n        function xhrTimeout(e) {\n            var _a = xhrTimeout, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;\n            if (progressSubscriber) {\n                progressSubscriber.error(e);\n            }\n            subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n        }\n        ;\n        xhr.ontimeout = xhrTimeout;\n        xhrTimeout.request = request;\n        xhrTimeout.subscriber = this;\n        xhrTimeout.progressSubscriber = progressSubscriber;\n        if (xhr.upload && 'withCredentials' in xhr) {\n            if (progressSubscriber) {\n                var xhrProgress_1;\n                xhrProgress_1 = function (e) {\n                    var progressSubscriber = xhrProgress_1.progressSubscriber;\n                    progressSubscriber.next(e);\n                };\n                if (root_1.root.XDomainRequest) {\n                    xhr.onprogress = xhrProgress_1;\n                }\n                else {\n                    xhr.upload.onprogress = xhrProgress_1;\n                }\n                xhrProgress_1.progressSubscriber = progressSubscriber;\n            }\n            var xhrError_1;\n            xhrError_1 = function (e) {\n                var _a = xhrError_1, progressSubscriber = _a.progressSubscriber, subscriber = _a.subscriber, request = _a.request;\n                if (progressSubscriber) {\n                    progressSubscriber.error(e);\n                }\n                subscriber.error(new AjaxError('ajax error', this, request));\n            };\n            xhr.onerror = xhrError_1;\n            xhrError_1.request = request;\n            xhrError_1.subscriber = this;\n            xhrError_1.progressSubscriber = progressSubscriber;\n        }\n        function xhrReadyStateChange(e) {\n            var _a = xhrReadyStateChange, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;\n            if (this.readyState === 4) {\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                var status_1 = this.status === 1223 ? 204 : this.status;\n                var response = (this.responseType === 'text' ? (this.response || this.responseText) : this.response);\n                // fix status code when it is 0 (0 status is undocumented).\n                // Occurs when accessing file resources or on Android 4.1 stock browser\n                // while retrieving files from application cache.\n                if (status_1 === 0) {\n                    status_1 = response ? 200 : 0;\n                }\n                if (200 <= status_1 && status_1 < 300) {\n                    if (progressSubscriber) {\n                        progressSubscriber.complete();\n                    }\n                    subscriber.next(e);\n                    subscriber.complete();\n                }\n                else {\n                    if (progressSubscriber) {\n                        progressSubscriber.error(e);\n                    }\n                    subscriber.error(new AjaxError('ajax error ' + status_1, this, request));\n                }\n            }\n        }\n        ;\n        xhr.onreadystatechange = xhrReadyStateChange;\n        xhrReadyStateChange.subscriber = this;\n        xhrReadyStateChange.progressSubscriber = progressSubscriber;\n        xhrReadyStateChange.request = request;\n    };\n    AjaxSubscriber.prototype.unsubscribe = function () {\n        var _a = this, done = _a.done, xhr = _a.xhr;\n        if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n            xhr.abort();\n        }\n        _super.prototype.unsubscribe.call(this);\n    };\n    return AjaxSubscriber;\n}(Subscriber_1.Subscriber));\nexports.AjaxSubscriber = AjaxSubscriber;\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nvar AjaxResponse = (function () {\n    function AjaxResponse(originalEvent, xhr, request) {\n        this.originalEvent = originalEvent;\n        this.xhr = xhr;\n        this.request = request;\n        this.status = xhr.status;\n        this.responseType = xhr.responseType || request.responseType;\n        this.response = parseXhrResponse(this.responseType, xhr);\n    }\n    return AjaxResponse;\n}());\nexports.AjaxResponse = AjaxResponse;\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nvar AjaxError = (function (_super) {\n    __extends(AjaxError, _super);\n    function AjaxError(message, xhr, request) {\n        _super.call(this, message);\n        this.message = message;\n        this.xhr = xhr;\n        this.request = request;\n        this.status = xhr.status;\n        this.responseType = xhr.responseType || request.responseType;\n        this.response = parseXhrResponse(this.responseType, xhr);\n    }\n    return AjaxError;\n}(Error));\nexports.AjaxError = AjaxError;\nfunction parseXhrResponse(responseType, xhr) {\n    switch (responseType) {\n        case 'json':\n            if ('response' in xhr) {\n                //IE does not support json as responseType, parse it internally\n                return xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n            }\n            else {\n                // HACK(benlesh): TypeScript shennanigans\n                // tslint:disable-next-line:no-any latest TS seems to think xhr is \"never\" here.\n                return JSON.parse(xhr.responseText || 'null');\n            }\n        case 'xml':\n            return xhr.responseXML;\n        case 'text':\n        default:\n            // HACK(benlesh): TypeScript shennanigans\n            // tslint:disable-next-line:no-any latest TS seems to think xhr is \"never\" here.\n            return ('response' in xhr) ? xhr.response : xhr.responseText;\n    }\n}\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nvar AjaxTimeoutError = (function (_super) {\n    __extends(AjaxTimeoutError, _super);\n    function AjaxTimeoutError(xhr, request) {\n        _super.call(this, 'ajax timeout', xhr, request);\n    }\n    return AjaxTimeoutError;\n}(AjaxError));\nexports.AjaxTimeoutError = AjaxTimeoutError;\n//# sourceMappingURL=AjaxObservable.js.map","\"use strict\";\nvar TimerObservable_1 = require('./TimerObservable');\nexports.timer = TimerObservable_1.TimerObservable.create;\n//# sourceMappingURL=timer.js.map","\"use strict\";\nfunction identity(x) {\n    return x;\n}\nexports.identity = identity;\n//# sourceMappingURL=identity.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../util/root');\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar PromiseObservable = (function (_super) {\n    __extends(PromiseObservable, _super);\n    function PromiseObservable(promise, scheduler) {\n        _super.call(this);\n        this.promise = promise;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Converts a Promise to an Observable.\n     *\n     * <span class=\"informal\">Returns an Observable that just emits the Promise's\n     * resolved value, then completes.</span>\n     *\n     * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n     * Observable. If the Promise resolves with a value, the output Observable\n     * emits that resolved value as a `next`, and then completes. If the Promise\n     * is rejected, then the output Observable emits the corresponding Error.\n     *\n     * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n     * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @see {@link bindCallback}\n     * @see {@link from}\n     *\n     * @param {PromiseLike<T>} promise The promise to be converted.\n     * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n     * the delivery of the resolved value (or the rejection).\n     * @return {Observable<T>} An Observable which wraps the Promise.\n     * @static true\n     * @name fromPromise\n     * @owner Observable\n     */\n    PromiseObservable.create = function (promise, scheduler) {\n        return new PromiseObservable(promise, scheduler);\n    };\n    PromiseObservable.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var promise = this.promise;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    subscriber.next(this.value);\n                    subscriber.complete();\n                }\n            }\n            else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.next(value);\n                        subscriber.complete();\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.error(err);\n                    }\n                })\n                    .then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root_1.root.setTimeout(function () { throw err; });\n                });\n            }\n        }\n        else {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });\n                }\n            }\n            else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));\n                    }\n                })\n                    .then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root_1.root.setTimeout(function () { throw err; });\n                });\n            }\n        }\n    };\n    return PromiseObservable;\n}(Observable_1.Observable));\nexports.PromiseObservable = PromiseObservable;\nfunction dispatchNext(arg) {\n    var value = arg.value, subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n    }\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.error(err);\n    }\n}\n//# sourceMappingURL=PromiseObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isArray_1 = require('../util/isArray');\nvar isArrayLike_1 = require('../util/isArrayLike');\nvar isPromise_1 = require('../util/isPromise');\nvar PromiseObservable_1 = require('./PromiseObservable');\nvar IteratorObservable_1 = require('./IteratorObservable');\nvar ArrayObservable_1 = require('./ArrayObservable');\nvar ArrayLikeObservable_1 = require('./ArrayLikeObservable');\nvar iterator_1 = require('../symbol/iterator');\nvar Observable_1 = require('../Observable');\nvar observeOn_1 = require('../operators/observeOn');\nvar observable_1 = require('../symbol/observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromObservable = (function (_super) {\n    __extends(FromObservable, _super);\n    function FromObservable(ish, scheduler) {\n        _super.call(this, null);\n        this.ish = ish;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable from an Array, an array-like object, a Promise, an\n     * iterable object, or an Observable-like object.\n     *\n     * <span class=\"informal\">Converts almost anything to an Observable.</span>\n     *\n     * <img src=\"./img/from.png\" width=\"100%\">\n     *\n     * Convert various other objects and data types into Observables. `from`\n     * converts a Promise or an array-like or an\n     * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n     * object into an Observable that emits the items in that promise or array or\n     * iterable. A String, in this context, is treated as an array of characters.\n     * Observable-like objects (contains a function named with the ES2015 Symbol\n     * for Observable) can also be converted through this operator.\n     *\n     * @example <caption>Converts an array to an Observable</caption>\n     * var array = [10, 20, 30];\n     * var result = Rx.Observable.from(array);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 10 20 30\n     *\n     * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n     * function* generateDoubles(seed) {\n     *   var i = seed;\n     *   while (true) {\n     *     yield i;\n     *     i = 2 * i; // double it\n     *   }\n     * }\n     *\n     * var iterator = generateDoubles(3);\n     * var result = Rx.Observable.from(iterator).take(10);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 3 6 12 24 48 96 192 384 768 1536\n     *\n     * @see {@link create}\n     * @see {@link fromEvent}\n     * @see {@link fromEventPattern}\n     * @see {@link fromPromise}\n     *\n     * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n     * Observable-like, an Array, an iterable or an array-like object to be\n     * converted.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * emissions of values.\n     * @return {Observable<T>} The Observable whose values are originally from the\n     * input object that was converted.\n     * @static true\n     * @name from\n     * @owner Observable\n     */\n    FromObservable.create = function (ish, scheduler) {\n        if (ish != null) {\n            if (typeof ish[observable_1.observable] === 'function') {\n                if (ish instanceof Observable_1.Observable && !scheduler) {\n                    return ish;\n                }\n                return new FromObservable(ish, scheduler);\n            }\n            else if (isArray_1.isArray(ish)) {\n                return new ArrayObservable_1.ArrayObservable(ish, scheduler);\n            }\n            else if (isPromise_1.isPromise(ish)) {\n                return new PromiseObservable_1.PromiseObservable(ish, scheduler);\n            }\n            else if (typeof ish[iterator_1.iterator] === 'function' || typeof ish === 'string') {\n                return new IteratorObservable_1.IteratorObservable(ish, scheduler);\n            }\n            else if (isArrayLike_1.isArrayLike(ish)) {\n                return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);\n            }\n        }\n        throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n    };\n    FromObservable.prototype._subscribe = function (subscriber) {\n        var ish = this.ish;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            return ish[observable_1.observable]().subscribe(subscriber);\n        }\n        else {\n            return ish[observable_1.observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));\n        }\n    };\n    return FromObservable;\n}(Observable_1.Observable));\nexports.FromObservable = FromObservable;\n//# sourceMappingURL=FromObservable.js.map","\"use strict\";\nvar FromObservable_1 = require('./FromObservable');\nexports.from = FromObservable_1.FromObservable.create;\n//# sourceMappingURL=from.js.map","\"use strict\";\nvar ArrayObservable_1 = require('./ArrayObservable');\nexports.of = ArrayObservable_1.ArrayObservable.of;\n//# sourceMappingURL=of.js.map","\"use strict\";\nfunction isPromise(value) {\n    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\nexports.isPromise = isPromise;\n//# sourceMappingURL=isPromise.js.map","\"use strict\";\nexports.isArrayLike = (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArrayLike.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('./Subscription');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubjectSubscription = (function (_super) {\n    __extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        _super.call(this);\n        this.subject = subject;\n        this.subscriber = subscriber;\n        this.closed = false;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription_1.Subscription));\nexports.SubjectSubscription = SubjectSubscription;\n//# sourceMappingURL=SubjectSubscription.js.map","\"use strict\";\nexports.empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) { throw err; },\n    complete: function () { }\n};\n//# sourceMappingURL=Observer.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nvar UnsubscriptionError = (function (_super) {\n    __extends(UnsubscriptionError, _super);\n    function UnsubscriptionError(errors) {\n        _super.call(this);\n        this.errors = errors;\n        var err = Error.call(this, errors ?\n            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return ((i + 1) + \") \" + err.toString()); }).join('\\n  ') : '');\n        this.name = err.name = 'UnsubscriptionError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return UnsubscriptionError;\n}(Error));\nexports.UnsubscriptionError = UnsubscriptionError;\n//# sourceMappingURL=UnsubscriptionError.js.map","\"use strict\";\nfunction isObject(x) {\n    return x != null && typeof x === 'object';\n}\nexports.isObject = isObject;\n//# sourceMappingURL=isObject.js.map","\"use strict\";\nvar audit_1 = require('./operators/audit');\nexports.audit = audit_1.audit;\nvar auditTime_1 = require('./operators/auditTime');\nexports.auditTime = auditTime_1.auditTime;\nvar buffer_1 = require('./operators/buffer');\nexports.buffer = buffer_1.buffer;\nvar bufferCount_1 = require('./operators/bufferCount');\nexports.bufferCount = bufferCount_1.bufferCount;\nvar bufferTime_1 = require('./operators/bufferTime');\nexports.bufferTime = bufferTime_1.bufferTime;\nvar bufferToggle_1 = require('./operators/bufferToggle');\nexports.bufferToggle = bufferToggle_1.bufferToggle;\nvar bufferWhen_1 = require('./operators/bufferWhen');\nexports.bufferWhen = bufferWhen_1.bufferWhen;\nvar catchError_1 = require('./operators/catchError');\nexports.catchError = catchError_1.catchError;\nvar combineAll_1 = require('./operators/combineAll');\nexports.combineAll = combineAll_1.combineAll;\nvar combineLatest_1 = require('./operators/combineLatest');\nexports.combineLatest = combineLatest_1.combineLatest;\nvar concat_1 = require('./operators/concat');\nexports.concat = concat_1.concat;\nvar concatAll_1 = require('./operators/concatAll');\nexports.concatAll = concatAll_1.concatAll;\nvar concatMap_1 = require('./operators/concatMap');\nexports.concatMap = concatMap_1.concatMap;\nvar concatMapTo_1 = require('./operators/concatMapTo');\nexports.concatMapTo = concatMapTo_1.concatMapTo;\nvar count_1 = require('./operators/count');\nexports.count = count_1.count;\nvar debounce_1 = require('./operators/debounce');\nexports.debounce = debounce_1.debounce;\nvar debounceTime_1 = require('./operators/debounceTime');\nexports.debounceTime = debounceTime_1.debounceTime;\nvar defaultIfEmpty_1 = require('./operators/defaultIfEmpty');\nexports.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;\nvar delay_1 = require('./operators/delay');\nexports.delay = delay_1.delay;\nvar delayWhen_1 = require('./operators/delayWhen');\nexports.delayWhen = delayWhen_1.delayWhen;\nvar dematerialize_1 = require('./operators/dematerialize');\nexports.dematerialize = dematerialize_1.dematerialize;\nvar distinct_1 = require('./operators/distinct');\nexports.distinct = distinct_1.distinct;\nvar distinctUntilChanged_1 = require('./operators/distinctUntilChanged');\nexports.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;\nvar distinctUntilKeyChanged_1 = require('./operators/distinctUntilKeyChanged');\nexports.distinctUntilKeyChanged = distinctUntilKeyChanged_1.distinctUntilKeyChanged;\nvar elementAt_1 = require('./operators/elementAt');\nexports.elementAt = elementAt_1.elementAt;\nvar every_1 = require('./operators/every');\nexports.every = every_1.every;\nvar exhaust_1 = require('./operators/exhaust');\nexports.exhaust = exhaust_1.exhaust;\nvar exhaustMap_1 = require('./operators/exhaustMap');\nexports.exhaustMap = exhaustMap_1.exhaustMap;\nvar expand_1 = require('./operators/expand');\nexports.expand = expand_1.expand;\nvar filter_1 = require('./operators/filter');\nexports.filter = filter_1.filter;\nvar finalize_1 = require('./operators/finalize');\nexports.finalize = finalize_1.finalize;\nvar find_1 = require('./operators/find');\nexports.find = find_1.find;\nvar findIndex_1 = require('./operators/findIndex');\nexports.findIndex = findIndex_1.findIndex;\nvar first_1 = require('./operators/first');\nexports.first = first_1.first;\nvar groupBy_1 = require('./operators/groupBy');\nexports.groupBy = groupBy_1.groupBy;\nvar ignoreElements_1 = require('./operators/ignoreElements');\nexports.ignoreElements = ignoreElements_1.ignoreElements;\nvar isEmpty_1 = require('./operators/isEmpty');\nexports.isEmpty = isEmpty_1.isEmpty;\nvar last_1 = require('./operators/last');\nexports.last = last_1.last;\nvar map_1 = require('./operators/map');\nexports.map = map_1.map;\nvar mapTo_1 = require('./operators/mapTo');\nexports.mapTo = mapTo_1.mapTo;\nvar materialize_1 = require('./operators/materialize');\nexports.materialize = materialize_1.materialize;\nvar max_1 = require('./operators/max');\nexports.max = max_1.max;\nvar merge_1 = require('./operators/merge');\nexports.merge = merge_1.merge;\nvar mergeAll_1 = require('./operators/mergeAll');\nexports.mergeAll = mergeAll_1.mergeAll;\nvar mergeMap_1 = require('./operators/mergeMap');\nexports.mergeMap = mergeMap_1.mergeMap;\nvar mergeMap_2 = require('./operators/mergeMap');\nexports.flatMap = mergeMap_2.mergeMap;\nvar mergeMapTo_1 = require('./operators/mergeMapTo');\nexports.mergeMapTo = mergeMapTo_1.mergeMapTo;\nvar mergeScan_1 = require('./operators/mergeScan');\nexports.mergeScan = mergeScan_1.mergeScan;\nvar min_1 = require('./operators/min');\nexports.min = min_1.min;\nvar multicast_1 = require('./operators/multicast');\nexports.multicast = multicast_1.multicast;\nvar observeOn_1 = require('./operators/observeOn');\nexports.observeOn = observeOn_1.observeOn;\nvar onErrorResumeNext_1 = require('./operators/onErrorResumeNext');\nexports.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;\nvar pairwise_1 = require('./operators/pairwise');\nexports.pairwise = pairwise_1.pairwise;\nvar partition_1 = require('./operators/partition');\nexports.partition = partition_1.partition;\nvar pluck_1 = require('./operators/pluck');\nexports.pluck = pluck_1.pluck;\nvar publish_1 = require('./operators/publish');\nexports.publish = publish_1.publish;\nvar publishBehavior_1 = require('./operators/publishBehavior');\nexports.publishBehavior = publishBehavior_1.publishBehavior;\nvar publishLast_1 = require('./operators/publishLast');\nexports.publishLast = publishLast_1.publishLast;\nvar publishReplay_1 = require('./operators/publishReplay');\nexports.publishReplay = publishReplay_1.publishReplay;\nvar race_1 = require('./operators/race');\nexports.race = race_1.race;\nvar reduce_1 = require('./operators/reduce');\nexports.reduce = reduce_1.reduce;\nvar repeat_1 = require('./operators/repeat');\nexports.repeat = repeat_1.repeat;\nvar repeatWhen_1 = require('./operators/repeatWhen');\nexports.repeatWhen = repeatWhen_1.repeatWhen;\nvar retry_1 = require('./operators/retry');\nexports.retry = retry_1.retry;\nvar retryWhen_1 = require('./operators/retryWhen');\nexports.retryWhen = retryWhen_1.retryWhen;\nvar refCount_1 = require('./operators/refCount');\nexports.refCount = refCount_1.refCount;\nvar sample_1 = require('./operators/sample');\nexports.sample = sample_1.sample;\nvar sampleTime_1 = require('./operators/sampleTime');\nexports.sampleTime = sampleTime_1.sampleTime;\nvar scan_1 = require('./operators/scan');\nexports.scan = scan_1.scan;\nvar sequenceEqual_1 = require('./operators/sequenceEqual');\nexports.sequenceEqual = sequenceEqual_1.sequenceEqual;\nvar share_1 = require('./operators/share');\nexports.share = share_1.share;\nvar shareReplay_1 = require('./operators/shareReplay');\nexports.shareReplay = shareReplay_1.shareReplay;\nvar single_1 = require('./operators/single');\nexports.single = single_1.single;\nvar skip_1 = require('./operators/skip');\nexports.skip = skip_1.skip;\nvar skipLast_1 = require('./operators/skipLast');\nexports.skipLast = skipLast_1.skipLast;\nvar skipUntil_1 = require('./operators/skipUntil');\nexports.skipUntil = skipUntil_1.skipUntil;\nvar skipWhile_1 = require('./operators/skipWhile');\nexports.skipWhile = skipWhile_1.skipWhile;\nvar startWith_1 = require('./operators/startWith');\nexports.startWith = startWith_1.startWith;\n/**\n * TODO(https://github.com/ReactiveX/rxjs/issues/2900): Add back subscribeOn once it can be\n * treeshaken. Currently if this export is added back, it\n * forces apps to bring in asap scheduler along with\n * Immediate, root, and other supporting code.\n */\n// export { subscribeOn } from './operators/subscribeOn';\nvar switchAll_1 = require('./operators/switchAll');\nexports.switchAll = switchAll_1.switchAll;\nvar switchMap_1 = require('./operators/switchMap');\nexports.switchMap = switchMap_1.switchMap;\nvar switchMapTo_1 = require('./operators/switchMapTo');\nexports.switchMapTo = switchMapTo_1.switchMapTo;\nvar take_1 = require('./operators/take');\nexports.take = take_1.take;\nvar takeLast_1 = require('./operators/takeLast');\nexports.takeLast = takeLast_1.takeLast;\nvar takeUntil_1 = require('./operators/takeUntil');\nexports.takeUntil = takeUntil_1.takeUntil;\nvar takeWhile_1 = require('./operators/takeWhile');\nexports.takeWhile = takeWhile_1.takeWhile;\nvar tap_1 = require('./operators/tap');\nexports.tap = tap_1.tap;\nvar throttle_1 = require('./operators/throttle');\nexports.throttle = throttle_1.throttle;\nvar throttleTime_1 = require('./operators/throttleTime');\nexports.throttleTime = throttleTime_1.throttleTime;\nvar timeInterval_1 = require('./operators/timeInterval');\nexports.timeInterval = timeInterval_1.timeInterval;\nvar timeout_1 = require('./operators/timeout');\nexports.timeout = timeout_1.timeout;\nvar timeoutWith_1 = require('./operators/timeoutWith');\nexports.timeoutWith = timeoutWith_1.timeoutWith;\nvar timestamp_1 = require('./operators/timestamp');\nexports.timestamp = timestamp_1.timestamp;\nvar toArray_1 = require('./operators/toArray');\nexports.toArray = toArray_1.toArray;\nvar window_1 = require('./operators/window');\nexports.window = window_1.window;\nvar windowCount_1 = require('./operators/windowCount');\nexports.windowCount = windowCount_1.windowCount;\nvar windowTime_1 = require('./operators/windowTime');\nexports.windowTime = windowTime_1.windowTime;\nvar windowToggle_1 = require('./operators/windowToggle');\nexports.windowToggle = windowToggle_1.windowToggle;\nvar windowWhen_1 = require('./operators/windowWhen');\nexports.windowWhen = windowWhen_1.windowWhen;\nvar withLatestFrom_1 = require('./operators/withLatestFrom');\nexports.withLatestFrom = withLatestFrom_1.withLatestFrom;\nvar zip_1 = require('./operators/zip');\nexports.zip = zip_1.zip;\nvar zipAll_1 = require('./operators/zipAll');\nexports.zipAll = zipAll_1.zipAll;\n//# sourceMappingURL=operators.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncScheduler_1 = require('./AsyncScheduler');\nvar AnimationFrameScheduler = (function (_super) {\n    __extends(AnimationFrameScheduler, _super);\n    function AnimationFrameScheduler() {\n        _super.apply(this, arguments);\n    }\n    AnimationFrameScheduler.prototype.flush = function (action) {\n        this.active = true;\n        this.scheduled = undefined;\n        var actions = this.actions;\n        var error;\n        var index = -1;\n        var count = actions.length;\n        action = action || actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AnimationFrameScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.AnimationFrameScheduler = AnimationFrameScheduler;\n//# sourceMappingURL=AnimationFrameScheduler.js.map","\"use strict\";\nvar root_1 = require('./root');\nvar RequestAnimationFrameDefinition = (function () {\n    function RequestAnimationFrameDefinition(root) {\n        if (root.requestAnimationFrame) {\n            this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n        }\n        else if (root.mozRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n        }\n        else if (root.webkitRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n        }\n        else if (root.msRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n        }\n        else if (root.oRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n        }\n        else {\n            this.cancelAnimationFrame = root.clearTimeout.bind(root);\n            this.requestAnimationFrame = function (cb) { return root.setTimeout(cb, 1000 / 60); };\n        }\n    }\n    return RequestAnimationFrameDefinition;\n}());\nexports.RequestAnimationFrameDefinition = RequestAnimationFrameDefinition;\nexports.AnimationFrame = new RequestAnimationFrameDefinition(root_1.root);\n//# sourceMappingURL=AnimationFrame.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncAction_1 = require('./AsyncAction');\nvar AnimationFrame_1 = require('../util/AnimationFrame');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AnimationFrameAction = (function (_super) {\n    __extends(AnimationFrameAction, _super);\n    function AnimationFrameAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay is greater than 0, request as an async action.\n        if (delay !== null && delay > 0) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Push the action to the end of the scheduler queue.\n        scheduler.actions.push(this);\n        // If an animation frame has already been requested, don't request another\n        // one. If an animation frame hasn't been requested yet, request one. Return\n        // the current animation frame request id.\n        return scheduler.scheduled || (scheduler.scheduled = AnimationFrame_1.AnimationFrame.requestAnimationFrame(scheduler.flush.bind(scheduler, null)));\n    };\n    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n        }\n        // If the scheduler queue is empty, cancel the requested animation frame and\n        // set the scheduled flag to undefined so the next AnimationFrameAction will\n        // request its own.\n        if (scheduler.actions.length === 0) {\n            AnimationFrame_1.AnimationFrame.cancelAnimationFrame(id);\n            scheduler.scheduled = undefined;\n        }\n        // Return undefined so the action knows to request a new async id if it's rescheduled.\n        return undefined;\n    };\n    return AnimationFrameAction;\n}(AsyncAction_1.AsyncAction));\nexports.AnimationFrameAction = AnimationFrameAction;\n//# sourceMappingURL=AnimationFrameAction.js.map","\"use strict\";\nvar AnimationFrameAction_1 = require('./AnimationFrameAction');\nvar AnimationFrameScheduler_1 = require('./AnimationFrameScheduler');\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * @example <caption>Schedule div height animation</caption>\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see .some-div element growing in height\n *\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n */\nexports.animationFrame = new AnimationFrameScheduler_1.AnimationFrameScheduler(AnimationFrameAction_1.AnimationFrameAction);\n//# sourceMappingURL=animationFrame.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar Subscription_1 = require('../Subscription');\nvar SubscriptionLoggable_1 = require('./SubscriptionLoggable');\nvar applyMixins_1 = require('../util/applyMixins');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar HotObservable = (function (_super) {\n    __extends(HotObservable, _super);\n    function HotObservable(messages, scheduler) {\n        _super.call(this);\n        this.messages = messages;\n        this.subscriptions = [];\n        this.scheduler = scheduler;\n    }\n    HotObservable.prototype._subscribe = function (subscriber) {\n        var subject = this;\n        var index = subject.logSubscribedFrame();\n        subscriber.add(new Subscription_1.Subscription(function () {\n            subject.logUnsubscribedFrame(index);\n        }));\n        return _super.prototype._subscribe.call(this, subscriber);\n    };\n    HotObservable.prototype.setup = function () {\n        var subject = this;\n        var messagesLength = subject.messages.length;\n        /* tslint:disable:no-var-keyword */\n        for (var i = 0; i < messagesLength; i++) {\n            (function () {\n                var message = subject.messages[i];\n                /* tslint:enable */\n                subject.scheduler.schedule(function () { message.notification.observe(subject); }, message.frame);\n            })();\n        }\n    };\n    return HotObservable;\n}(Subject_1.Subject));\nexports.HotObservable = HotObservable;\napplyMixins_1.applyMixins(HotObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);\n//# sourceMappingURL=HotObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar Subscription_1 = require('../Subscription');\nvar SubscriptionLoggable_1 = require('./SubscriptionLoggable');\nvar applyMixins_1 = require('../util/applyMixins');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ColdObservable = (function (_super) {\n    __extends(ColdObservable, _super);\n    function ColdObservable(messages, scheduler) {\n        _super.call(this, function (subscriber) {\n            var observable = this;\n            var index = observable.logSubscribedFrame();\n            subscriber.add(new Subscription_1.Subscription(function () {\n                observable.logUnsubscribedFrame(index);\n            }));\n            observable.scheduleMessages(subscriber);\n            return subscriber;\n        });\n        this.messages = messages;\n        this.subscriptions = [];\n        this.scheduler = scheduler;\n    }\n    ColdObservable.prototype.scheduleMessages = function (subscriber) {\n        var messagesLength = this.messages.length;\n        for (var i = 0; i < messagesLength; i++) {\n            var message = this.messages[i];\n            subscriber.add(this.scheduler.schedule(function (_a) {\n                var message = _a.message, subscriber = _a.subscriber;\n                message.notification.observe(subscriber);\n            }, message.frame, { message: message, subscriber: subscriber }));\n        }\n    };\n    return ColdObservable;\n}(Observable_1.Observable));\nexports.ColdObservable = ColdObservable;\napplyMixins_1.applyMixins(ColdObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);\n//# sourceMappingURL=ColdObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar Notification_1 = require('../Notification');\nvar ColdObservable_1 = require('./ColdObservable');\nvar HotObservable_1 = require('./HotObservable');\nvar SubscriptionLog_1 = require('./SubscriptionLog');\nvar VirtualTimeScheduler_1 = require('../scheduler/VirtualTimeScheduler');\nvar defaultMaxFrame = 750;\nvar TestScheduler = (function (_super) {\n    __extends(TestScheduler, _super);\n    function TestScheduler(assertDeepEqual) {\n        _super.call(this, VirtualTimeScheduler_1.VirtualAction, defaultMaxFrame);\n        this.assertDeepEqual = assertDeepEqual;\n        this.hotObservables = [];\n        this.coldObservables = [];\n        this.flushTests = [];\n    }\n    TestScheduler.prototype.createTime = function (marbles) {\n        var indexOf = marbles.indexOf('|');\n        if (indexOf === -1) {\n            throw new Error('marble diagram for time should have a completion marker \"|\"');\n        }\n        return indexOf * TestScheduler.frameTimeFactor;\n    };\n    TestScheduler.prototype.createColdObservable = function (marbles, values, error) {\n        if (marbles.indexOf('^') !== -1) {\n            throw new Error('cold observable cannot have subscription offset \"^\"');\n        }\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('cold observable cannot have unsubscription marker \"!\"');\n        }\n        var messages = TestScheduler.parseMarbles(marbles, values, error);\n        var cold = new ColdObservable_1.ColdObservable(messages, this);\n        this.coldObservables.push(cold);\n        return cold;\n    };\n    TestScheduler.prototype.createHotObservable = function (marbles, values, error) {\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('hot observable cannot have unsubscription marker \"!\"');\n        }\n        var messages = TestScheduler.parseMarbles(marbles, values, error);\n        var subject = new HotObservable_1.HotObservable(messages, this);\n        this.hotObservables.push(subject);\n        return subject;\n    };\n    TestScheduler.prototype.materializeInnerObservable = function (observable, outerFrame) {\n        var _this = this;\n        var messages = [];\n        observable.subscribe(function (value) {\n            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createNext(value) });\n        }, function (err) {\n            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createError(err) });\n        }, function () {\n            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createComplete() });\n        });\n        return messages;\n    };\n    TestScheduler.prototype.expectObservable = function (observable, unsubscriptionMarbles) {\n        var _this = this;\n        if (unsubscriptionMarbles === void 0) { unsubscriptionMarbles = null; }\n        var actual = [];\n        var flushTest = { actual: actual, ready: false };\n        var unsubscriptionFrame = TestScheduler\n            .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n        var subscription;\n        this.schedule(function () {\n            subscription = observable.subscribe(function (x) {\n                var value = x;\n                // Support Observable-of-Observables\n                if (x instanceof Observable_1.Observable) {\n                    value = _this.materializeInnerObservable(value, _this.frame);\n                }\n                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createNext(value) });\n            }, function (err) {\n                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createError(err) });\n            }, function () {\n                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createComplete() });\n            });\n        }, 0);\n        if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            this.schedule(function () { return subscription.unsubscribe(); }, unsubscriptionFrame);\n        }\n        this.flushTests.push(flushTest);\n        return {\n            toBe: function (marbles, values, errorValue) {\n                flushTest.ready = true;\n                flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n            }\n        };\n    };\n    TestScheduler.prototype.expectSubscriptions = function (actualSubscriptionLogs) {\n        var flushTest = { actual: actualSubscriptionLogs, ready: false };\n        this.flushTests.push(flushTest);\n        return {\n            toBe: function (marbles) {\n                var marblesArray = (typeof marbles === 'string') ? [marbles] : marbles;\n                flushTest.ready = true;\n                flushTest.expected = marblesArray.map(function (marbles) {\n                    return TestScheduler.parseMarblesAsSubscriptions(marbles);\n                });\n            }\n        };\n    };\n    TestScheduler.prototype.flush = function () {\n        var hotObservables = this.hotObservables;\n        while (hotObservables.length > 0) {\n            hotObservables.shift().setup();\n        }\n        _super.prototype.flush.call(this);\n        var readyFlushTests = this.flushTests.filter(function (test) { return test.ready; });\n        while (readyFlushTests.length > 0) {\n            var test = readyFlushTests.shift();\n            this.assertDeepEqual(test.actual, test.expected);\n        }\n    };\n    TestScheduler.parseMarblesAsSubscriptions = function (marbles) {\n        if (typeof marbles !== 'string') {\n            return new SubscriptionLog_1.SubscriptionLog(Number.POSITIVE_INFINITY);\n        }\n        var len = marbles.length;\n        var groupStart = -1;\n        var subscriptionFrame = Number.POSITIVE_INFINITY;\n        var unsubscriptionFrame = Number.POSITIVE_INFINITY;\n        for (var i = 0; i < len; i++) {\n            var frame = i * this.frameTimeFactor;\n            var c = marbles[i];\n            switch (c) {\n                case '-':\n                case ' ':\n                    break;\n                case '(':\n                    groupStart = frame;\n                    break;\n                case ')':\n                    groupStart = -1;\n                    break;\n                case '^':\n                    if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n                        throw new Error('found a second subscription point \\'^\\' in a ' +\n                            'subscription marble diagram. There can only be one.');\n                    }\n                    subscriptionFrame = groupStart > -1 ? groupStart : frame;\n                    break;\n                case '!':\n                    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n                        throw new Error('found a second subscription point \\'^\\' in a ' +\n                            'subscription marble diagram. There can only be one.');\n                    }\n                    unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n                    break;\n                default:\n                    throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n                        'subscription marble diagram. Found instead \\'' + c + '\\'.');\n            }\n        }\n        if (unsubscriptionFrame < 0) {\n            return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame);\n        }\n        else {\n            return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n        }\n    };\n    TestScheduler.parseMarbles = function (marbles, values, errorValue, materializeInnerObservables) {\n        if (materializeInnerObservables === void 0) { materializeInnerObservables = false; }\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('conventional marble diagrams cannot have the ' +\n                'unsubscription marker \"!\"');\n        }\n        var len = marbles.length;\n        var testMessages = [];\n        var subIndex = marbles.indexOf('^');\n        var frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n        var getValue = typeof values !== 'object' ?\n            function (x) { return x; } :\n            function (x) {\n                // Support Observable-of-Observables\n                if (materializeInnerObservables && values[x] instanceof ColdObservable_1.ColdObservable) {\n                    return values[x].messages;\n                }\n                return values[x];\n            };\n        var groupStart = -1;\n        for (var i = 0; i < len; i++) {\n            var frame = i * this.frameTimeFactor + frameOffset;\n            var notification = void 0;\n            var c = marbles[i];\n            switch (c) {\n                case '-':\n                case ' ':\n                    break;\n                case '(':\n                    groupStart = frame;\n                    break;\n                case ')':\n                    groupStart = -1;\n                    break;\n                case '|':\n                    notification = Notification_1.Notification.createComplete();\n                    break;\n                case '^':\n                    break;\n                case '#':\n                    notification = Notification_1.Notification.createError(errorValue || 'error');\n                    break;\n                default:\n                    notification = Notification_1.Notification.createNext(getValue(c));\n                    break;\n            }\n            if (notification) {\n                testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification: notification });\n            }\n        }\n        return testMessages;\n    };\n    return TestScheduler;\n}(VirtualTimeScheduler_1.VirtualTimeScheduler));\nexports.TestScheduler = TestScheduler;\n//# sourceMappingURL=TestScheduler.js.map","\"use strict\";\nvar zipAll_1 = require('../operators/zipAll');\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nfunction zipAll(project) {\n    return zipAll_1.zipAll(project)(this);\n}\nexports.zipAll = zipAll;\n//# sourceMappingURL=zipAll.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar zipAll_1 = require('../../operator/zipAll');\nObservable_1.Observable.prototype.zipAll = zipAll_1.zipAll;\n//# sourceMappingURL=zipAll.js.map","\"use strict\";\nvar zip_1 = require('../operators/zip');\n/* tslint:enable:max-line-length */\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nfunction zipProto() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return zip_1.zip.apply(void 0, observables)(this);\n}\nexports.zipProto = zipProto;\n//# sourceMappingURL=zip.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar zip_1 = require('../../operator/zip');\nObservable_1.Observable.prototype.zip = zip_1.zipProto;\n//# sourceMappingURL=zip.js.map","\"use strict\";\nvar withLatestFrom_1 = require('../operators/withLatestFrom');\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nfunction withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i - 0] = arguments[_i];\n    }\n    return withLatestFrom_1.withLatestFrom.apply(void 0, args)(this);\n}\nexports.withLatestFrom = withLatestFrom;\n//# sourceMappingURL=withLatestFrom.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar withLatestFrom_1 = require('../../operator/withLatestFrom');\nObservable_1.Observable.prototype.withLatestFrom = withLatestFrom_1.withLatestFrom;\n//# sourceMappingURL=withLatestFrom.js.map","\"use strict\";\nvar windowWhen_1 = require('../operators/windowWhen');\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nfunction windowWhen(closingSelector) {\n    return windowWhen_1.windowWhen(closingSelector)(this);\n}\nexports.windowWhen = windowWhen;\n//# sourceMappingURL=windowWhen.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar windowWhen_1 = require('../../operator/windowWhen');\nObservable_1.Observable.prototype.windowWhen = windowWhen_1.windowWhen;\n//# sourceMappingURL=windowWhen.js.map","\"use strict\";\nvar windowToggle_1 = require('../operators/windowToggle');\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nfunction windowToggle(openings, closingSelector) {\n    return windowToggle_1.windowToggle(openings, closingSelector)(this);\n}\nexports.windowToggle = windowToggle;\n//# sourceMappingURL=windowToggle.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar windowToggle_1 = require('../../operator/windowToggle');\nObservable_1.Observable.prototype.windowToggle = windowToggle_1.windowToggle;\n//# sourceMappingURL=windowToggle.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar isNumeric_1 = require('../util/isNumeric');\nvar isScheduler_1 = require('../util/isScheduler');\nvar windowTime_1 = require('../operators/windowTime');\nfunction windowTime(windowTimeSpan) {\n    var scheduler = async_1.async;\n    var windowCreationInterval = null;\n    var maxWindowSize = Number.POSITIVE_INFINITY;\n    if (isScheduler_1.isScheduler(arguments[3])) {\n        scheduler = arguments[3];\n    }\n    if (isScheduler_1.isScheduler(arguments[2])) {\n        scheduler = arguments[2];\n    }\n    else if (isNumeric_1.isNumeric(arguments[2])) {\n        maxWindowSize = arguments[2];\n    }\n    if (isScheduler_1.isScheduler(arguments[1])) {\n        scheduler = arguments[1];\n    }\n    else if (isNumeric_1.isNumeric(arguments[1])) {\n        windowCreationInterval = arguments[1];\n    }\n    return windowTime_1.windowTime(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler)(this);\n}\nexports.windowTime = windowTime;\n//# sourceMappingURL=windowTime.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar windowTime_1 = require('../../operator/windowTime');\nObservable_1.Observable.prototype.windowTime = windowTime_1.windowTime;\n//# sourceMappingURL=windowTime.js.map","\"use strict\";\nvar windowCount_1 = require('../operators/windowCount');\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nfunction windowCount(windowSize, startWindowEvery) {\n    if (startWindowEvery === void 0) { startWindowEvery = 0; }\n    return windowCount_1.windowCount(windowSize, startWindowEvery)(this);\n}\nexports.windowCount = windowCount;\n//# sourceMappingURL=windowCount.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar windowCount_1 = require('../../operator/windowCount');\nObservable_1.Observable.prototype.windowCount = windowCount_1.windowCount;\n//# sourceMappingURL=windowCount.js.map","\"use strict\";\nvar window_1 = require('../operators/window');\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nfunction window(windowBoundaries) {\n    return window_1.window(windowBoundaries)(this);\n}\nexports.window = window;\n//# sourceMappingURL=window.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar window_1 = require('../../operator/window');\nObservable_1.Observable.prototype.window = window_1.window;\n//# sourceMappingURL=window.js.map","\"use strict\";\nvar toArray_1 = require('../operators/toArray');\n/**\n * Collects all source emissions and emits them as an array when the source completes.\n *\n * <span class=\"informal\">Get all values inside an array when the source completes</span>\n *\n * <img src=\"./img/toArray.png\" width=\"100%\">\n *\n * `toArray` will wait until the source Observable completes\n * before emitting the array containing all emissions.\n * When the source Observable errors no array will be emitted.\n *\n * @example <caption>Create array from input</caption>\n * const input = Rx.Observable.interval(100).take(4);\n *\n * input.toArray()\n *   .subscribe(arr => console.log(arr)); // [0,1,2,3]\n *\n * @see {@link buffer}\n *\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nfunction toArray() {\n    return toArray_1.toArray()(this);\n}\nexports.toArray = toArray;\n//# sourceMappingURL=toArray.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar toArray_1 = require('../../operator/toArray');\nObservable_1.Observable.prototype.toArray = toArray_1.toArray;\n//# sourceMappingURL=toArray.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar timestamp_1 = require('../operators/timestamp');\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nfunction timestamp(scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return timestamp_1.timestamp(scheduler)(this);\n}\nexports.timestamp = timestamp;\n//# sourceMappingURL=timestamp.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timestamp_1 = require('../../operator/timestamp');\nObservable_1.Observable.prototype.timestamp = timestamp_1.timestamp;\n//# sourceMappingURL=timestamp.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar timeoutWith_1 = require('../operators/timeoutWith');\n/* tslint:enable:max-line-length */\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nfunction timeoutWith(due, withObservable, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return timeoutWith_1.timeoutWith(due, withObservable, scheduler)(this);\n}\nexports.timeoutWith = timeoutWith;\n//# sourceMappingURL=timeoutWith.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timeoutWith_1 = require('../../operator/timeoutWith');\nObservable_1.Observable.prototype.timeoutWith = timeoutWith_1.timeoutWith;\n//# sourceMappingURL=timeoutWith.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar timeout_1 = require('../operators/timeout');\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nfunction timeout(due, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return timeout_1.timeout(due, scheduler)(this);\n}\nexports.timeout = timeout;\n//# sourceMappingURL=timeout.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timeout_1 = require('../../operator/timeout');\nObservable_1.Observable.prototype.timeout = timeout_1.timeout;\n//# sourceMappingURL=timeout.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timeInterval_1 = require('../../operator/timeInterval');\nObservable_1.Observable.prototype.timeInterval = timeInterval_1.timeInterval;\n//# sourceMappingURL=timeInterval.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar throttle_1 = require('../operators/throttle');\nvar throttleTime_1 = require('../operators/throttleTime');\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nfunction throttleTime(duration, scheduler, config) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    if (config === void 0) { config = throttle_1.defaultThrottleConfig; }\n    return throttleTime_1.throttleTime(duration, scheduler, config)(this);\n}\nexports.throttleTime = throttleTime;\n//# sourceMappingURL=throttleTime.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar throttleTime_1 = require('../../operator/throttleTime');\nObservable_1.Observable.prototype.throttleTime = throttleTime_1.throttleTime;\n//# sourceMappingURL=throttleTime.js.map","\"use strict\";\nvar throttle_1 = require('../operators/throttle');\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nfunction throttle(durationSelector, config) {\n    if (config === void 0) { config = throttle_1.defaultThrottleConfig; }\n    return throttle_1.throttle(durationSelector, config)(this);\n}\nexports.throttle = throttle;\n//# sourceMappingURL=throttle.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar throttle_1 = require('../../operator/throttle');\nObservable_1.Observable.prototype.throttle = throttle_1.throttle;\n//# sourceMappingURL=throttle.js.map","\"use strict\";\nvar takeWhile_1 = require('../operators/takeWhile');\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nfunction takeWhile(predicate) {\n    return takeWhile_1.takeWhile(predicate)(this);\n}\nexports.takeWhile = takeWhile;\n//# sourceMappingURL=takeWhile.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar takeWhile_1 = require('../../operator/takeWhile');\nObservable_1.Observable.prototype.takeWhile = takeWhile_1.takeWhile;\n//# sourceMappingURL=takeWhile.js.map","\"use strict\";\nvar takeUntil_1 = require('../operators/takeUntil');\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nfunction takeUntil(notifier) {\n    return takeUntil_1.takeUntil(notifier)(this);\n}\nexports.takeUntil = takeUntil;\n//# sourceMappingURL=takeUntil.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar takeUntil_1 = require('../../operator/takeUntil');\nObservable_1.Observable.prototype.takeUntil = takeUntil_1.takeUntil;\n//# sourceMappingURL=takeUntil.js.map","\"use strict\";\nvar takeLast_1 = require('../operators/takeLast');\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nfunction takeLast(count) {\n    return takeLast_1.takeLast(count)(this);\n}\nexports.takeLast = takeLast;\n//# sourceMappingURL=takeLast.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar takeLast_1 = require('../../operator/takeLast');\nObservable_1.Observable.prototype.takeLast = takeLast_1.takeLast;\n//# sourceMappingURL=takeLast.js.map","\"use strict\";\nvar take_1 = require('../operators/take');\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nfunction take(count) {\n    return take_1.take(count)(this);\n}\nexports.take = take;\n//# sourceMappingURL=take.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar take_1 = require('../../operator/take');\nObservable_1.Observable.prototype.take = take_1.take;\n//# sourceMappingURL=take.js.map","\"use strict\";\nvar switchMapTo_1 = require('../operators/switchMapTo');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nfunction switchMapTo(innerObservable, resultSelector) {\n    return switchMapTo_1.switchMapTo(innerObservable, resultSelector)(this);\n}\nexports.switchMapTo = switchMapTo;\n//# sourceMappingURL=switchMapTo.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar switchMapTo_1 = require('../../operator/switchMapTo');\nObservable_1.Observable.prototype.switchMapTo = switchMapTo_1.switchMapTo;\n//# sourceMappingURL=switchMapTo.js.map","\"use strict\";\nvar switchMap_1 = require('../operators/switchMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nfunction switchMap(project, resultSelector) {\n    return switchMap_1.switchMap(project, resultSelector)(this);\n}\nexports.switchMap = switchMap;\n//# sourceMappingURL=switchMap.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar switchMap_1 = require('../../operator/switchMap');\nObservable_1.Observable.prototype.switchMap = switchMap_1.switchMap;\n//# sourceMappingURL=switchMap.js.map","\"use strict\";\nvar switchAll_1 = require('../operators/switchAll');\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nfunction _switch() {\n    return switchAll_1.switchAll()(this);\n}\nexports._switch = _switch;\n//# sourceMappingURL=switch.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar switch_1 = require('../../operator/switch');\nObservable_1.Observable.prototype.switch = switch_1._switch;\nObservable_1.Observable.prototype._switch = switch_1._switch;\n//# sourceMappingURL=switch.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncScheduler_1 = require('./AsyncScheduler');\nvar AsapScheduler = (function (_super) {\n    __extends(AsapScheduler, _super);\n    function AsapScheduler() {\n        _super.apply(this, arguments);\n    }\n    AsapScheduler.prototype.flush = function (action) {\n        this.active = true;\n        this.scheduled = undefined;\n        var actions = this.actions;\n        var error;\n        var index = -1;\n        var count = actions.length;\n        action = action || actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsapScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.AsapScheduler = AsapScheduler;\n//# sourceMappingURL=AsapScheduler.js.map","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\"use strict\";\nvar root_1 = require('./root');\nvar ImmediateDefinition = (function () {\n    function ImmediateDefinition(root) {\n        this.root = root;\n        if (root.setImmediate && typeof root.setImmediate === 'function') {\n            this.setImmediate = root.setImmediate.bind(root);\n            this.clearImmediate = root.clearImmediate.bind(root);\n        }\n        else {\n            this.nextHandle = 1;\n            this.tasksByHandle = {};\n            this.currentlyRunningATask = false;\n            // Don't get fooled by e.g. browserify environments.\n            if (this.canUseProcessNextTick()) {\n                // For Node.js before 0.9\n                this.setImmediate = this.createProcessNextTickSetImmediate();\n            }\n            else if (this.canUsePostMessage()) {\n                // For non-IE10 modern browsers\n                this.setImmediate = this.createPostMessageSetImmediate();\n            }\n            else if (this.canUseMessageChannel()) {\n                // For web workers, where supported\n                this.setImmediate = this.createMessageChannelSetImmediate();\n            }\n            else if (this.canUseReadyStateChange()) {\n                // For IE 6–8\n                this.setImmediate = this.createReadyStateChangeSetImmediate();\n            }\n            else {\n                // For older browsers\n                this.setImmediate = this.createSetTimeoutSetImmediate();\n            }\n            var ci = function clearImmediate(handle) {\n                delete clearImmediate.instance.tasksByHandle[handle];\n            };\n            ci.instance = this;\n            this.clearImmediate = ci;\n        }\n    }\n    ImmediateDefinition.prototype.identify = function (o) {\n        return this.root.Object.prototype.toString.call(o);\n    };\n    ImmediateDefinition.prototype.canUseProcessNextTick = function () {\n        return this.identify(this.root.process) === '[object process]';\n    };\n    ImmediateDefinition.prototype.canUseMessageChannel = function () {\n        return Boolean(this.root.MessageChannel);\n    };\n    ImmediateDefinition.prototype.canUseReadyStateChange = function () {\n        var document = this.root.document;\n        return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n    };\n    ImmediateDefinition.prototype.canUsePostMessage = function () {\n        var root = this.root;\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `root.postMessage` means something completely different and can't be used for this purpose.\n        if (root.postMessage && !root.importScripts) {\n            var postMessageIsAsynchronous_1 = true;\n            var oldOnMessage = root.onmessage;\n            root.onmessage = function () {\n                postMessageIsAsynchronous_1 = false;\n            };\n            root.postMessage('', '*');\n            root.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous_1;\n        }\n        return false;\n    };\n    // This function accepts the same arguments as setImmediate, but\n    // returns a function that requires no arguments.\n    ImmediateDefinition.prototype.partiallyApplied = function (handler) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var fn = function result() {\n            var _a = result, handler = _a.handler, args = _a.args;\n            if (typeof handler === 'function') {\n                handler.apply(undefined, args);\n            }\n            else {\n                (new Function('' + handler))();\n            }\n        };\n        fn.handler = handler;\n        fn.args = args;\n        return fn;\n    };\n    ImmediateDefinition.prototype.addFromSetImmediateArguments = function (args) {\n        this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n        return this.nextHandle++;\n    };\n    ImmediateDefinition.prototype.createProcessNextTickSetImmediate = function () {\n        var fn = function setImmediate() {\n            var instance = setImmediate.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n            return handle;\n        };\n        fn.instance = this;\n        return fn;\n    };\n    ImmediateDefinition.prototype.createPostMessageSetImmediate = function () {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n        var root = this.root;\n        var messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n        var onGlobalMessage = function globalMessageHandler(event) {\n            var instance = globalMessageHandler.instance;\n            if (event.source === root &&\n                typeof event.data === 'string' &&\n                event.data.indexOf(messagePrefix) === 0) {\n                instance.runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n        onGlobalMessage.instance = this;\n        root.addEventListener('message', onGlobalMessage, false);\n        var fn = function setImmediate() {\n            var _a = setImmediate, messagePrefix = _a.messagePrefix, instance = _a.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            instance.root.postMessage(messagePrefix + handle, '*');\n            return handle;\n        };\n        fn.instance = this;\n        fn.messagePrefix = messagePrefix;\n        return fn;\n    };\n    ImmediateDefinition.prototype.runIfPresent = function (handle) {\n        // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (this.currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // 'too much recursion' error.\n            this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n        }\n        else {\n            var task = this.tasksByHandle[handle];\n            if (task) {\n                this.currentlyRunningATask = true;\n                try {\n                    task();\n                }\n                finally {\n                    this.clearImmediate(handle);\n                    this.currentlyRunningATask = false;\n                }\n            }\n        }\n    };\n    ImmediateDefinition.prototype.createMessageChannelSetImmediate = function () {\n        var _this = this;\n        var channel = new this.root.MessageChannel();\n        channel.port1.onmessage = function (event) {\n            var handle = event.data;\n            _this.runIfPresent(handle);\n        };\n        var fn = function setImmediate() {\n            var _a = setImmediate, channel = _a.channel, instance = _a.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            channel.port2.postMessage(handle);\n            return handle;\n        };\n        fn.channel = channel;\n        fn.instance = this;\n        return fn;\n    };\n    ImmediateDefinition.prototype.createReadyStateChangeSetImmediate = function () {\n        var fn = function setImmediate() {\n            var instance = setImmediate.instance;\n            var root = instance.root;\n            var doc = root.document;\n            var html = doc.documentElement;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement('script');\n            script.onreadystatechange = function () {\n                instance.runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n            return handle;\n        };\n        fn.instance = this;\n        return fn;\n    };\n    ImmediateDefinition.prototype.createSetTimeoutSetImmediate = function () {\n        var fn = function setImmediate() {\n            var instance = setImmediate.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n            return handle;\n        };\n        fn.instance = this;\n        return fn;\n    };\n    return ImmediateDefinition;\n}());\nexports.ImmediateDefinition = ImmediateDefinition;\nexports.Immediate = new ImmediateDefinition(root_1.root);\n//# sourceMappingURL=Immediate.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Immediate_1 = require('../util/Immediate');\nvar AsyncAction_1 = require('./AsyncAction');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsapAction = (function (_super) {\n    __extends(AsapAction, _super);\n    function AsapAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay is greater than 0, request as an async action.\n        if (delay !== null && delay > 0) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Push the action to the end of the scheduler queue.\n        scheduler.actions.push(this);\n        // If a microtask has already been scheduled, don't schedule another\n        // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n        // the current scheduled microtask id.\n        return scheduler.scheduled || (scheduler.scheduled = Immediate_1.Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));\n    };\n    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n        }\n        // If the scheduler queue is empty, cancel the requested microtask and\n        // set the scheduled flag to undefined so the next AsapAction will schedule\n        // its own.\n        if (scheduler.actions.length === 0) {\n            Immediate_1.Immediate.clearImmediate(id);\n            scheduler.scheduled = undefined;\n        }\n        // Return undefined so the action knows to request a new async id if it's rescheduled.\n        return undefined;\n    };\n    return AsapAction;\n}(AsyncAction_1.AsyncAction));\nexports.AsapAction = AsapAction;\n//# sourceMappingURL=AsapAction.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar asap_1 = require('../scheduler/asap');\nvar isNumeric_1 = require('../util/isNumeric');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar SubscribeOnObservable = (function (_super) {\n    __extends(SubscribeOnObservable, _super);\n    function SubscribeOnObservable(source, delayTime, scheduler) {\n        if (delayTime === void 0) { delayTime = 0; }\n        if (scheduler === void 0) { scheduler = asap_1.asap; }\n        _super.call(this);\n        this.source = source;\n        this.delayTime = delayTime;\n        this.scheduler = scheduler;\n        if (!isNumeric_1.isNumeric(delayTime) || delayTime < 0) {\n            this.delayTime = 0;\n        }\n        if (!scheduler || typeof scheduler.schedule !== 'function') {\n            this.scheduler = asap_1.asap;\n        }\n    }\n    SubscribeOnObservable.create = function (source, delay, scheduler) {\n        if (delay === void 0) { delay = 0; }\n        if (scheduler === void 0) { scheduler = asap_1.asap; }\n        return new SubscribeOnObservable(source, delay, scheduler);\n    };\n    SubscribeOnObservable.dispatch = function (arg) {\n        var source = arg.source, subscriber = arg.subscriber;\n        return this.add(source.subscribe(subscriber));\n    };\n    SubscribeOnObservable.prototype._subscribe = function (subscriber) {\n        var delay = this.delayTime;\n        var source = this.source;\n        var scheduler = this.scheduler;\n        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n            source: source, subscriber: subscriber\n        });\n    };\n    return SubscribeOnObservable;\n}(Observable_1.Observable));\nexports.SubscribeOnObservable = SubscribeOnObservable;\n//# sourceMappingURL=SubscribeOnObservable.js.map","\"use strict\";\nvar SubscribeOnObservable_1 = require('../observable/SubscribeOnObservable');\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nfunction subscribeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return function subscribeOnOperatorFunction(source) {\n        return source.lift(new SubscribeOnOperator(scheduler, delay));\n    };\n}\nexports.subscribeOn = subscribeOn;\nvar SubscribeOnOperator = (function () {\n    function SubscribeOnOperator(scheduler, delay) {\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    SubscribeOnOperator.prototype.call = function (subscriber, source) {\n        return new SubscribeOnObservable_1.SubscribeOnObservable(source, this.delay, this.scheduler).subscribe(subscriber);\n    };\n    return SubscribeOnOperator;\n}());\n//# sourceMappingURL=subscribeOn.js.map","\"use strict\";\nvar subscribeOn_1 = require('../operators/subscribeOn');\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nfunction subscribeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return subscribeOn_1.subscribeOn(scheduler, delay)(this);\n}\nexports.subscribeOn = subscribeOn;\n//# sourceMappingURL=subscribeOn.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar subscribeOn_1 = require('../../operator/subscribeOn');\nObservable_1.Observable.prototype.subscribeOn = subscribeOn_1.subscribeOn;\n//# sourceMappingURL=subscribeOn.js.map","\"use strict\";\nvar startWith_1 = require('../operators/startWith');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nfunction startWith() {\n    var array = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        array[_i - 0] = arguments[_i];\n    }\n    return startWith_1.startWith.apply(void 0, array)(this);\n}\nexports.startWith = startWith;\n//# sourceMappingURL=startWith.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar startWith_1 = require('../../operator/startWith');\nObservable_1.Observable.prototype.startWith = startWith_1.startWith;\n//# sourceMappingURL=startWith.js.map","\"use strict\";\nvar skipWhile_1 = require('../operators/skipWhile');\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nfunction skipWhile(predicate) {\n    return skipWhile_1.skipWhile(predicate)(this);\n}\nexports.skipWhile = skipWhile;\n//# sourceMappingURL=skipWhile.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar skipWhile_1 = require('../../operator/skipWhile');\nObservable_1.Observable.prototype.skipWhile = skipWhile_1.skipWhile;\n//# sourceMappingURL=skipWhile.js.map","\"use strict\";\nvar skipUntil_1 = require('../operators/skipUntil');\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nfunction skipUntil(notifier) {\n    return skipUntil_1.skipUntil(notifier)(this);\n}\nexports.skipUntil = skipUntil;\n//# sourceMappingURL=skipUntil.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar skipUntil_1 = require('../../operator/skipUntil');\nObservable_1.Observable.prototype.skipUntil = skipUntil_1.skipUntil;\n//# sourceMappingURL=skipUntil.js.map","\"use strict\";\nvar skipLast_1 = require('../operators/skipLast');\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nfunction skipLast(count) {\n    return skipLast_1.skipLast(count)(this);\n}\nexports.skipLast = skipLast;\n//# sourceMappingURL=skipLast.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar skipLast_1 = require('../../operator/skipLast');\nObservable_1.Observable.prototype.skipLast = skipLast_1.skipLast;\n//# sourceMappingURL=skipLast.js.map","\"use strict\";\nvar skip_1 = require('../operators/skip');\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nfunction skip(count) {\n    return skip_1.skip(count)(this);\n}\nexports.skip = skip;\n//# sourceMappingURL=skip.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar skip_1 = require('../../operator/skip');\nObservable_1.Observable.prototype.skip = skip_1.skip;\n//# sourceMappingURL=skip.js.map","\"use strict\";\nvar single_1 = require('../operators/single');\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nfunction single(predicate) {\n    return single_1.single(predicate)(this);\n}\nexports.single = single;\n//# sourceMappingURL=single.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar single_1 = require('../../operator/single');\nObservable_1.Observable.prototype.single = single_1.single;\n//# sourceMappingURL=single.js.map","\"use strict\";\nvar shareReplay_1 = require('../operators/shareReplay');\n/**\n * @method shareReplay\n * @owner Observable\n */\nfunction shareReplay(bufferSize, windowTime, scheduler) {\n    return shareReplay_1.shareReplay(bufferSize, windowTime, scheduler)(this);\n}\nexports.shareReplay = shareReplay;\n;\n//# sourceMappingURL=shareReplay.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar shareReplay_1 = require('../../operator/shareReplay');\nObservable_1.Observable.prototype.shareReplay = shareReplay_1.shareReplay;\n//# sourceMappingURL=shareReplay.js.map","\"use strict\";\nvar share_1 = require('../operators/share');\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n *\n * This behaves similarly to .publish().refCount(), with a behavior difference when the source observable emits complete.\n * .publish().refCount() will not resubscribe to the original source, however .share() will resubscribe to the original source.\n * Observable.of(\"test\").publish().refCount() will not re-emit \"test\" on new subscriptions, Observable.of(\"test\").share() will\n * re-emit \"test\" to new subscriptions.\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nfunction share() {\n    return share_1.share()(this);\n}\nexports.share = share;\n;\n//# sourceMappingURL=share.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar share_1 = require('../../operator/share');\nObservable_1.Observable.prototype.share = share_1.share;\n//# sourceMappingURL=share.js.map","\"use strict\";\nvar sequenceEqual_1 = require('../operators/sequenceEqual');\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nfunction sequenceEqual(compareTo, comparor) {\n    return sequenceEqual_1.sequenceEqual(compareTo, comparor)(this);\n}\nexports.sequenceEqual = sequenceEqual;\n//# sourceMappingURL=sequenceEqual.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar sequenceEqual_1 = require('../../operator/sequenceEqual');\nObservable_1.Observable.prototype.sequenceEqual = sequenceEqual_1.sequenceEqual;\n//# sourceMappingURL=sequenceEqual.js.map","\"use strict\";\nvar scan_1 = require('../operators/scan');\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nfunction scan(accumulator, seed) {\n    if (arguments.length >= 2) {\n        return scan_1.scan(accumulator, seed)(this);\n    }\n    return scan_1.scan(accumulator)(this);\n}\nexports.scan = scan;\n//# sourceMappingURL=scan.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar scan_1 = require('../../operator/scan');\nObservable_1.Observable.prototype.scan = scan_1.scan;\n//# sourceMappingURL=scan.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar sampleTime_1 = require('../operators/sampleTime');\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nfunction sampleTime(period, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return sampleTime_1.sampleTime(period, scheduler)(this);\n}\nexports.sampleTime = sampleTime;\n//# sourceMappingURL=sampleTime.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar sampleTime_1 = require('../../operator/sampleTime');\nObservable_1.Observable.prototype.sampleTime = sampleTime_1.sampleTime;\n//# sourceMappingURL=sampleTime.js.map","\"use strict\";\nvar sample_1 = require('../operators/sample');\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nfunction sample(notifier) {\n    return sample_1.sample(notifier)(this);\n}\nexports.sample = sample;\n//# sourceMappingURL=sample.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar sample_1 = require('../../operator/sample');\nObservable_1.Observable.prototype.sample = sample_1.sample;\n//# sourceMappingURL=sample.js.map","\"use strict\";\nvar retryWhen_1 = require('../operators/retryWhen');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nfunction retryWhen(notifier) {\n    return retryWhen_1.retryWhen(notifier)(this);\n}\nexports.retryWhen = retryWhen;\n//# sourceMappingURL=retryWhen.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar retryWhen_1 = require('../../operator/retryWhen');\nObservable_1.Observable.prototype.retryWhen = retryWhen_1.retryWhen;\n//# sourceMappingURL=retryWhen.js.map","\"use strict\";\nvar retry_1 = require('../operators/retry');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nfunction retry(count) {\n    if (count === void 0) { count = -1; }\n    return retry_1.retry(count)(this);\n}\nexports.retry = retry;\n//# sourceMappingURL=retry.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar retry_1 = require('../../operator/retry');\nObservable_1.Observable.prototype.retry = retry_1.retry;\n//# sourceMappingURL=retry.js.map","\"use strict\";\nvar repeatWhen_1 = require('../operators/repeatWhen');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nfunction repeatWhen(notifier) {\n    return repeatWhen_1.repeatWhen(notifier)(this);\n}\nexports.repeatWhen = repeatWhen;\n//# sourceMappingURL=repeatWhen.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar repeatWhen_1 = require('../../operator/repeatWhen');\nObservable_1.Observable.prototype.repeatWhen = repeatWhen_1.repeatWhen;\n//# sourceMappingURL=repeatWhen.js.map","\"use strict\";\nvar repeat_1 = require('../operators/repeat');\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nfunction repeat(count) {\n    if (count === void 0) { count = -1; }\n    return repeat_1.repeat(count)(this);\n}\nexports.repeat = repeat;\n//# sourceMappingURL=repeat.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar repeat_1 = require('../../operator/repeat');\nObservable_1.Observable.prototype.repeat = repeat_1.repeat;\n//# sourceMappingURL=repeat.js.map","\"use strict\";\nvar reduce_1 = require('../operators/reduce');\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nfunction reduce(accumulator, seed) {\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        return reduce_1.reduce(accumulator, seed)(this);\n    }\n    return reduce_1.reduce(accumulator)(this);\n}\nexports.reduce = reduce;\n//# sourceMappingURL=reduce.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar reduce_1 = require('../../operator/reduce');\nObservable_1.Observable.prototype.reduce = reduce_1.reduce;\n//# sourceMappingURL=reduce.js.map","\"use strict\";\nvar race_1 = require('../operators/race');\n// NOTE: to support backwards compatability with 5.4.* and lower\nvar race_2 = require('../observable/race');\nexports.raceStatic = race_2.race;\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nfunction race() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return race_1.race.apply(void 0, observables)(this);\n}\nexports.race = race;\n//# sourceMappingURL=race.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar race_1 = require('../../operator/race');\nObservable_1.Observable.prototype.race = race_1.race;\n//# sourceMappingURL=race.js.map","\"use strict\";\nvar publishLast_1 = require('../operators/publishLast');\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nfunction publishLast() {\n    //TODO(benlesh): correct type-flow through here.\n    return publishLast_1.publishLast()(this);\n}\nexports.publishLast = publishLast;\n//# sourceMappingURL=publishLast.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar publishLast_1 = require('../../operator/publishLast');\nObservable_1.Observable.prototype.publishLast = publishLast_1.publishLast;\n//# sourceMappingURL=publishLast.js.map","\"use strict\";\nvar publishReplay_1 = require('../operators/publishReplay');\n/* tslint:enable:max-line-length */\n/**\n * @param bufferSize\n * @param windowTime\n * @param selectorOrScheduler\n * @param scheduler\n * @return {Observable<T> | ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nfunction publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {\n    return publishReplay_1.publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler)(this);\n}\nexports.publishReplay = publishReplay;\n//# sourceMappingURL=publishReplay.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar publishReplay_1 = require('../../operator/publishReplay');\nObservable_1.Observable.prototype.publishReplay = publishReplay_1.publishReplay;\n//# sourceMappingURL=publishReplay.js.map","\"use strict\";\nvar publishBehavior_1 = require('../operators/publishBehavior');\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nfunction publishBehavior(value) {\n    return publishBehavior_1.publishBehavior(value)(this);\n}\nexports.publishBehavior = publishBehavior;\n//# sourceMappingURL=publishBehavior.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar publishBehavior_1 = require('../../operator/publishBehavior');\nObservable_1.Observable.prototype.publishBehavior = publishBehavior_1.publishBehavior;\n//# sourceMappingURL=publishBehavior.js.map","\"use strict\";\nvar publish_1 = require('../operators/publish');\n/* tslint:enable:max-line-length */\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nfunction publish(selector) {\n    return publish_1.publish(selector)(this);\n}\nexports.publish = publish;\n//# sourceMappingURL=publish.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar publish_1 = require('../../operator/publish');\nObservable_1.Observable.prototype.publish = publish_1.publish;\n//# sourceMappingURL=publish.js.map","\"use strict\";\nvar pluck_1 = require('../operators/pluck');\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nfunction pluck() {\n    var properties = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        properties[_i - 0] = arguments[_i];\n    }\n    return pluck_1.pluck.apply(void 0, properties)(this);\n}\nexports.pluck = pluck;\n//# sourceMappingURL=pluck.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar pluck_1 = require('../../operator/pluck');\nObservable_1.Observable.prototype.pluck = pluck_1.pluck;\n//# sourceMappingURL=pluck.js.map","\"use strict\";\nfunction not(pred, thisArg) {\n    function notPred() {\n        return !(notPred.pred.apply(notPred.thisArg, arguments));\n    }\n    notPred.pred = pred;\n    notPred.thisArg = thisArg;\n    return notPred;\n}\nexports.not = not;\n//# sourceMappingURL=not.js.map","\"use strict\";\nvar partition_1 = require('../operators/partition');\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nfunction partition(predicate, thisArg) {\n    return partition_1.partition(predicate, thisArg)(this);\n}\nexports.partition = partition;\n//# sourceMappingURL=partition.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar partition_1 = require('../../operator/partition');\nObservable_1.Observable.prototype.partition = partition_1.partition;\n//# sourceMappingURL=partition.js.map","\"use strict\";\nvar pairwise_1 = require('../operators/pairwise');\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nfunction pairwise() {\n    return pairwise_1.pairwise()(this);\n}\nexports.pairwise = pairwise;\n//# sourceMappingURL=pairwise.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar pairwise_1 = require('../../operator/pairwise');\nObservable_1.Observable.prototype.pairwise = pairwise_1.pairwise;\n//# sourceMappingURL=pairwise.js.map","\"use strict\";\nvar onErrorResumeNext_1 = require('../operators/onErrorResumeNext');\n/* tslint:enable:max-line-length */\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\nfunction onErrorResumeNext() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i - 0] = arguments[_i];\n    }\n    return onErrorResumeNext_1.onErrorResumeNext.apply(void 0, nextSources)(this);\n}\nexports.onErrorResumeNext = onErrorResumeNext;\n//# sourceMappingURL=onErrorResumeNext.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar onErrorResumeNext_1 = require('../../operator/onErrorResumeNext');\nObservable_1.Observable.prototype.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;\n//# sourceMappingURL=onErrorResumeNext.js.map","\"use strict\";\nvar observeOn_1 = require('../operators/observeOn');\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nfunction observeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return observeOn_1.observeOn(scheduler, delay)(this);\n}\nexports.observeOn = observeOn;\n//# sourceMappingURL=observeOn.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar observeOn_1 = require('../../operator/observeOn');\nObservable_1.Observable.prototype.observeOn = observeOn_1.observeOn;\n//# sourceMappingURL=observeOn.js.map","\"use strict\";\nvar multicast_1 = require('../operators/multicast');\n/* tslint:enable:max-line-length */\n/**\n * Allows source Observable to be subscribed only once with a Subject of choice,\n * while still sharing its values between multiple subscribers.\n *\n * <span class=\"informal\">Subscribe to Observable once, but send its values to multiple subscribers.</span>\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * `multicast` is an operator that works in two modes.\n *\n * In the first mode you provide a single argument to it, which can be either an initialized Subject or a Subject\n * factory. As a result you will get a special kind of an Observable - a {@link ConnectableObservable}. It can be\n * subscribed multiple times, just as regular Observable, but it won't subscribe to the source Observable at that\n * moment. It will do it only if you call its `connect` method. This means you can essentially control by hand, when\n * source Observable will be actually subscribed. What is more, ConnectableObservable will share this one subscription\n * between all of its subscribers. This means that, for example, `ajax` Observable will only send a request once,\n * even though usually it would send a request per every subscriber. Since it sends a request at the moment of\n * subscription, here request would be sent when the `connect` method of a ConnectableObservable is called.\n *\n * The most common pattern of using ConnectableObservable is calling `connect` when the first consumer subscribes,\n * keeping the subscription alive while several consumers come and go and finally unsubscribing from the source\n * Observable, when the last consumer unsubscribes. To not implement that logic over and over again,\n * ConnectableObservable has a special operator, `refCount`. When called, it returns an Observable, which will count\n * the number of consumers subscribed to it and keep ConnectableObservable connected as long as there is at least\n * one consumer. So if you don't actually need to decide yourself when to connect and disconnect a\n * ConnectableObservable, use `refCount`.\n *\n * The second mode is invoked by calling `multicast` with an additional, second argument - selector function.\n * This function accepts an Observable - which basically mirrors the source Observable - and returns Observable\n * as well, which should be the input stream modified by any operators you want. Note that in this\n * mode you cannot provide initialized Subject as a first argument - it has to be a Subject factory. If\n * you provide selector function, `multicast` returns just a regular Observable, instead of ConnectableObservable.\n * Thus, as usual, each subscription to this stream triggers subscription to the source Observable. However,\n * if inside the selector function you subscribe to the input Observable multiple times, actual source stream\n * will be subscribed only once. So if you have a chain of operators that use some Observable many times,\n * but you want to subscribe to that Observable only once, this is the mode you would use.\n *\n * Subject provided as a first parameter of `multicast` is used as a proxy for the single subscription to the\n * source Observable. It means that all values from the source stream go through that Subject. Thus, if a Subject\n * has some special properties, Observable returned by `multicast` will have them as well. If you want to use\n * `multicast` with a Subject that is one of the ones included in RxJS by default - {@link Subject},\n * {@link AsyncSubject}, {@link BehaviorSubject}, or {@link ReplaySubject} - simply use {@link publish},\n * {@link publishLast}, {@link publishBehavior} or {@link publishReplay} respectively. These are actually\n * just wrappers around `multicast`, with a specific Subject hardcoded inside.\n *\n * Also, if you use {@link publish} or {@link publishReplay} with a ConnectableObservables `refCount` operator,\n * you can simply use {@link share} and {@link shareReplay} respectively, which chain these two.\n *\n * @example <caption>Use ConnectableObservable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const connectableSeconds = seconds.multicast(new Subject());\n *\n * connectableSeconds.subscribe(value => console.log('first: ' + value));\n * connectableSeconds.subscribe(value => console.log('second: ' + value));\n *\n * // At this point still nothing happens, even though we subscribed twice.\n *\n * connectableSeconds.connect();\n *\n * // From now on `seconds` are being logged to the console,\n * // twice per every second. `seconds` Observable was however only subscribed once,\n * // so under the hood Observable.interval had only one clock started.\n *\n * @example <caption>Use selector</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds\n *     .multicast(\n *         () => new Subject(),\n *         seconds => seconds.zip(seconds) // Usually zip would subscribe to `seconds` twice.\n *                                         // Because we are inside selector, `seconds` is subscribed once,\n *     )                                   // thus starting only one clock used internally by Observable.interval.\n *     .subscribe();\n *\n * @see {@link publish}\n * @see {@link publishLast}\n * @see {@link publishBehavior}\n * @see {@link publishReplay}\n * @see {@link share}\n * @see {@link shareReplay}\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate Subject through\n * which the source sequence's elements will be multicast to the selector function input Observable or\n * ConnectableObservable returned by the operator.\n * @param {Function} [selector] - Optional selector function that can use the input stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the input source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable<T>|ConnectableObservable<T>} An Observable that emits the results of invoking the selector\n * on the source stream or a special {@link ConnectableObservable}, if selector was not provided.\n *\n * @method multicast\n * @owner Observable\n */\nfunction multicast(subjectOrSubjectFactory, selector) {\n    return multicast_1.multicast(subjectOrSubjectFactory, selector)(this);\n}\nexports.multicast = multicast;\n//# sourceMappingURL=multicast.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar multicast_1 = require('../../operator/multicast');\nObservable_1.Observable.prototype.multicast = multicast_1.multicast;\n//# sourceMappingURL=multicast.js.map","\"use strict\";\nvar min_1 = require('../operators/min');\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nfunction min(comparer) {\n    return min_1.min(comparer)(this);\n}\nexports.min = min;\n//# sourceMappingURL=min.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar min_1 = require('../../operator/min');\nObservable_1.Observable.prototype.min = min_1.min;\n//# sourceMappingURL=min.js.map","\"use strict\";\nvar mergeScan_1 = require('../operators/mergeScan');\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nfunction mergeScan(accumulator, seed, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeScan_1.mergeScan(accumulator, seed, concurrent)(this);\n}\nexports.mergeScan = mergeScan;\n//# sourceMappingURL=mergeScan.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mergeScan_1 = require('../../operator/mergeScan');\nObservable_1.Observable.prototype.mergeScan = mergeScan_1.mergeScan;\n//# sourceMappingURL=mergeScan.js.map","\"use strict\";\nvar mergeMapTo_1 = require('../operators/mergeMapTo');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nfunction mergeMapTo(innerObservable, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeMapTo_1.mergeMapTo(innerObservable, resultSelector, concurrent)(this);\n}\nexports.mergeMapTo = mergeMapTo;\n//# sourceMappingURL=mergeMapTo.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mergeMapTo_1 = require('../../operator/mergeMapTo');\nObservable_1.Observable.prototype.flatMapTo = mergeMapTo_1.mergeMapTo;\nObservable_1.Observable.prototype.mergeMapTo = mergeMapTo_1.mergeMapTo;\n//# sourceMappingURL=mergeMapTo.js.map","\"use strict\";\nvar mergeMap_1 = require('../operators/mergeMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nfunction mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeMap_1.mergeMap(project, resultSelector, concurrent)(this);\n}\nexports.mergeMap = mergeMap;\n//# sourceMappingURL=mergeMap.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mergeMap_1 = require('../../operator/mergeMap');\nObservable_1.Observable.prototype.mergeMap = mergeMap_1.mergeMap;\nObservable_1.Observable.prototype.flatMap = mergeMap_1.mergeMap;\n//# sourceMappingURL=mergeMap.js.map","\"use strict\";\nvar mergeAll_1 = require('../operators/mergeAll');\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nfunction mergeAll(concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeAll_1.mergeAll(concurrent)(this);\n}\nexports.mergeAll = mergeAll;\n//# sourceMappingURL=mergeAll.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mergeAll_1 = require('../../operator/mergeAll');\nObservable_1.Observable.prototype.mergeAll = mergeAll_1.mergeAll;\n//# sourceMappingURL=mergeAll.js.map","\"use strict\";\nvar merge_1 = require('../operators/merge');\nvar merge_2 = require('../observable/merge');\nexports.mergeStatic = merge_2.merge;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nfunction merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return merge_1.merge.apply(void 0, observables)(this);\n}\nexports.merge = merge;\n//# sourceMappingURL=merge.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar merge_1 = require('../../operator/merge');\nObservable_1.Observable.prototype.merge = merge_1.merge;\n//# sourceMappingURL=merge.js.map","\"use strict\";\nvar max_1 = require('../operators/max');\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nfunction max(comparer) {\n    return max_1.max(comparer)(this);\n}\nexports.max = max;\n//# sourceMappingURL=max.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar max_1 = require('../../operator/max');\nObservable_1.Observable.prototype.max = max_1.max;\n//# sourceMappingURL=max.js.map","\"use strict\";\nvar materialize_1 = require('../operators/materialize');\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nfunction materialize() {\n    return materialize_1.materialize()(this);\n}\nexports.materialize = materialize;\n//# sourceMappingURL=materialize.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar materialize_1 = require('../../operator/materialize');\nObservable_1.Observable.prototype.materialize = materialize_1.materialize;\n//# sourceMappingURL=materialize.js.map","\"use strict\";\nvar mapTo_1 = require('../operators/mapTo');\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nfunction mapTo(value) {\n    return mapTo_1.mapTo(value)(this);\n}\nexports.mapTo = mapTo;\n//# sourceMappingURL=mapTo.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mapTo_1 = require('../../operator/mapTo');\nObservable_1.Observable.prototype.mapTo = mapTo_1.mapTo;\n//# sourceMappingURL=mapTo.js.map","\"use strict\";\nvar map_1 = require('../operators/map');\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nfunction map(project, thisArg) {\n    return map_1.map(project, thisArg)(this);\n}\nexports.map = map;\n//# sourceMappingURL=map.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar map_1 = require('../../operator/map');\nObservable_1.Observable.prototype.map = map_1.map;\n//# sourceMappingURL=map.js.map","\"use strict\";\nvar every_1 = require('../operators/every');\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nfunction every(predicate, thisArg) {\n    return every_1.every(predicate, thisArg)(this);\n}\nexports.every = every;\n//# sourceMappingURL=every.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar every_1 = require('../../operator/every');\nObservable_1.Observable.prototype.every = every_1.every;\n//# sourceMappingURL=every.js.map","\"use strict\";\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nfunction letProto(func) {\n    return func(this);\n}\nexports.letProto = letProto;\n//# sourceMappingURL=let.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar let_1 = require('../../operator/let');\nObservable_1.Observable.prototype.let = let_1.letProto;\nObservable_1.Observable.prototype.letBind = let_1.letProto;\n//# sourceMappingURL=let.js.map","\"use strict\";\nvar last_1 = require('../operators/last');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nfunction last(predicate, resultSelector, defaultValue) {\n    return last_1.last(predicate, resultSelector, defaultValue)(this);\n}\nexports.last = last;\n//# sourceMappingURL=last.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar last_1 = require('../../operator/last');\nObservable_1.Observable.prototype.last = last_1.last;\n//# sourceMappingURL=last.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar auditTime_1 = require('../operators/auditTime');\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nfunction auditTime(duration, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return auditTime_1.auditTime(duration, scheduler)(this);\n}\nexports.auditTime = auditTime;\n//# sourceMappingURL=auditTime.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar auditTime_1 = require('../../operator/auditTime');\nObservable_1.Observable.prototype.auditTime = auditTime_1.auditTime;\n//# sourceMappingURL=auditTime.js.map","\"use strict\";\nvar audit_1 = require('../operators/audit');\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nfunction audit(durationSelector) {\n    return audit_1.audit(durationSelector)(this);\n}\nexports.audit = audit;\n//# sourceMappingURL=audit.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar audit_1 = require('../../operator/audit');\nObservable_1.Observable.prototype.audit = audit_1.audit;\n//# sourceMappingURL=audit.js.map","\"use strict\";\nvar isEmpty_1 = require('../operators/isEmpty');\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} An Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nfunction isEmpty() {\n    return isEmpty_1.isEmpty()(this);\n}\nexports.isEmpty = isEmpty;\n//# sourceMappingURL=isEmpty.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar isEmpty_1 = require('../../operator/isEmpty');\nObservable_1.Observable.prototype.isEmpty = isEmpty_1.isEmpty;\n//# sourceMappingURL=isEmpty.js.map","\"use strict\";\nvar ignoreElements_1 = require('../operators/ignoreElements');\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nfunction ignoreElements() {\n    return ignoreElements_1.ignoreElements()(this);\n}\nexports.ignoreElements = ignoreElements;\n;\n//# sourceMappingURL=ignoreElements.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar ignoreElements_1 = require('../../operator/ignoreElements');\nObservable_1.Observable.prototype.ignoreElements = ignoreElements_1.ignoreElements;\n//# sourceMappingURL=ignoreElements.js.map","\"use strict\";\nvar FastMap = (function () {\n    function FastMap() {\n        this.values = {};\n    }\n    FastMap.prototype.delete = function (key) {\n        this.values[key] = null;\n        return true;\n    };\n    FastMap.prototype.set = function (key, value) {\n        this.values[key] = value;\n        return this;\n    };\n    FastMap.prototype.get = function (key) {\n        return this.values[key];\n    };\n    FastMap.prototype.forEach = function (cb, thisArg) {\n        var values = this.values;\n        for (var key in values) {\n            if (values.hasOwnProperty(key) && values[key] !== null) {\n                cb.call(thisArg, values[key], key);\n            }\n        }\n    };\n    FastMap.prototype.clear = function () {\n        this.values = {};\n    };\n    return FastMap;\n}());\nexports.FastMap = FastMap;\n//# sourceMappingURL=FastMap.js.map","\"use strict\";\nvar MapPolyfill = (function () {\n    function MapPolyfill() {\n        this.size = 0;\n        this._values = [];\n        this._keys = [];\n    }\n    MapPolyfill.prototype.get = function (key) {\n        var i = this._keys.indexOf(key);\n        return i === -1 ? undefined : this._values[i];\n    };\n    MapPolyfill.prototype.set = function (key, value) {\n        var i = this._keys.indexOf(key);\n        if (i === -1) {\n            this._keys.push(key);\n            this._values.push(value);\n            this.size++;\n        }\n        else {\n            this._values[i] = value;\n        }\n        return this;\n    };\n    MapPolyfill.prototype.delete = function (key) {\n        var i = this._keys.indexOf(key);\n        if (i === -1) {\n            return false;\n        }\n        this._values.splice(i, 1);\n        this._keys.splice(i, 1);\n        this.size--;\n        return true;\n    };\n    MapPolyfill.prototype.clear = function () {\n        this._keys.length = 0;\n        this._values.length = 0;\n        this.size = 0;\n    };\n    MapPolyfill.prototype.forEach = function (cb, thisArg) {\n        for (var i = 0; i < this.size; i++) {\n            cb.call(thisArg, this._values[i], this._keys[i]);\n        }\n    };\n    return MapPolyfill;\n}());\nexports.MapPolyfill = MapPolyfill;\n//# sourceMappingURL=MapPolyfill.js.map","\"use strict\";\nvar root_1 = require('./root');\nvar MapPolyfill_1 = require('./MapPolyfill');\nexports.Map = root_1.root.Map || (function () { return MapPolyfill_1.MapPolyfill; })();\n//# sourceMappingURL=Map.js.map","\"use strict\";\nvar groupBy_1 = require('../operators/groupBy');\nexports.GroupedObservable = groupBy_1.GroupedObservable;\n/* tslint:enable:max-line-length */\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nfunction groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n    return groupBy_1.groupBy(keySelector, elementSelector, durationSelector, subjectSelector)(this);\n}\nexports.groupBy = groupBy;\n//# sourceMappingURL=groupBy.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar groupBy_1 = require('../../operator/groupBy');\nObservable_1.Observable.prototype.groupBy = groupBy_1.groupBy;\n//# sourceMappingURL=groupBy.js.map","\"use strict\";\nvar first_1 = require('../operators/first');\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nfunction first(predicate, resultSelector, defaultValue) {\n    return first_1.first(predicate, resultSelector, defaultValue)(this);\n}\nexports.first = first;\n//# sourceMappingURL=first.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar first_1 = require('../../operator/first');\nObservable_1.Observable.prototype.first = first_1.first;\n//# sourceMappingURL=first.js.map","\"use strict\";\nvar findIndex_1 = require('../operators/findIndex');\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nfunction findIndex(predicate, thisArg) {\n    return findIndex_1.findIndex(predicate, thisArg)(this);\n}\nexports.findIndex = findIndex;\n//# sourceMappingURL=findIndex.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar findIndex_1 = require('../../operator/findIndex');\nObservable_1.Observable.prototype.findIndex = findIndex_1.findIndex;\n//# sourceMappingURL=findIndex.js.map","\"use strict\";\nvar find_1 = require('../operators/find');\n/* tslint:enable:max-line-length */\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nfunction find(predicate, thisArg) {\n    return find_1.find(predicate, thisArg)(this);\n}\nexports.find = find;\n//# sourceMappingURL=find.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar find_1 = require('../../operator/find');\nObservable_1.Observable.prototype.find = find_1.find;\n//# sourceMappingURL=find.js.map","\"use strict\";\nvar finalize_1 = require('../operators/finalize');\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nfunction _finally(callback) {\n    return finalize_1.finalize(callback)(this);\n}\nexports._finally = _finally;\n//# sourceMappingURL=finally.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar finally_1 = require('../../operator/finally');\nObservable_1.Observable.prototype.finally = finally_1._finally;\nObservable_1.Observable.prototype._finally = finally_1._finally;\n//# sourceMappingURL=finally.js.map","\"use strict\";\nvar filter_1 = require('../operators/filter');\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nfunction filter(predicate, thisArg) {\n    return filter_1.filter(predicate, thisArg)(this);\n}\nexports.filter = filter;\n//# sourceMappingURL=filter.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar filter_1 = require('../../operator/filter');\nObservable_1.Observable.prototype.filter = filter_1.filter;\n//# sourceMappingURL=filter.js.map","\"use strict\";\nvar elementAt_1 = require('../operators/elementAt');\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nfunction elementAt(index, defaultValue) {\n    return elementAt_1.elementAt(index, defaultValue)(this);\n}\nexports.elementAt = elementAt;\n//# sourceMappingURL=elementAt.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar elementAt_1 = require('../../operator/elementAt');\nObservable_1.Observable.prototype.elementAt = elementAt_1.elementAt;\n//# sourceMappingURL=elementAt.js.map","\"use strict\";\nvar expand_1 = require('../operators/expand');\n/* tslint:enable:max-line-length */\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nfunction expand(project, concurrent, scheduler) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    if (scheduler === void 0) { scheduler = undefined; }\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n    return expand_1.expand(project, concurrent, scheduler)(this);\n}\nexports.expand = expand;\n//# sourceMappingURL=expand.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar expand_1 = require('../../operator/expand');\nObservable_1.Observable.prototype.expand = expand_1.expand;\n//# sourceMappingURL=expand.js.map","\"use strict\";\nvar exhaustMap_1 = require('../operators/exhaustMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nfunction exhaustMap(project, resultSelector) {\n    return exhaustMap_1.exhaustMap(project, resultSelector)(this);\n}\nexports.exhaustMap = exhaustMap;\n//# sourceMappingURL=exhaustMap.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar exhaustMap_1 = require('../../operator/exhaustMap');\nObservable_1.Observable.prototype.exhaustMap = exhaustMap_1.exhaustMap;\n//# sourceMappingURL=exhaustMap.js.map","\"use strict\";\nvar exhaust_1 = require('../operators/exhaust');\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nfunction exhaust() {\n    return exhaust_1.exhaust()(this);\n}\nexports.exhaust = exhaust;\n//# sourceMappingURL=exhaust.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar exhaust_1 = require('../../operator/exhaust');\nObservable_1.Observable.prototype.exhaust = exhaust_1.exhaust;\n//# sourceMappingURL=exhaust.js.map","\"use strict\";\nvar tap_1 = require('../operators/tap');\n/* tslint:enable:max-line-length */\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nfunction _do(nextOrObserver, error, complete) {\n    return tap_1.tap(nextOrObserver, error, complete)(this);\n}\nexports._do = _do;\n//# sourceMappingURL=do.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar do_1 = require('../../operator/do');\nObservable_1.Observable.prototype.do = do_1._do;\nObservable_1.Observable.prototype._do = do_1._do;\n//# sourceMappingURL=do.js.map","\"use strict\";\nvar distinctUntilKeyChanged_1 = require('../operators/distinctUntilKeyChanged');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nfunction distinctUntilKeyChanged(key, compare) {\n    return distinctUntilKeyChanged_1.distinctUntilKeyChanged(key, compare)(this);\n}\nexports.distinctUntilKeyChanged = distinctUntilKeyChanged;\n//# sourceMappingURL=distinctUntilKeyChanged.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar distinctUntilKeyChanged_1 = require('../../operator/distinctUntilKeyChanged');\nObservable_1.Observable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged_1.distinctUntilKeyChanged;\n//# sourceMappingURL=distinctUntilKeyChanged.js.map","\"use strict\";\nvar distinctUntilChanged_1 = require('../operators/distinctUntilChanged');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nfunction distinctUntilChanged(compare, keySelector) {\n    return distinctUntilChanged_1.distinctUntilChanged(compare, keySelector)(this);\n}\nexports.distinctUntilChanged = distinctUntilChanged;\n//# sourceMappingURL=distinctUntilChanged.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar distinctUntilChanged_1 = require('../../operator/distinctUntilChanged');\nObservable_1.Observable.prototype.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;\n//# sourceMappingURL=distinctUntilChanged.js.map","\"use strict\";\nvar root_1 = require('./root');\nfunction minimalSetImpl() {\n    // THIS IS NOT a full impl of Set, this is just the minimum\n    // bits of functionality we need for this library.\n    return (function () {\n        function MinimalSet() {\n            this._values = [];\n        }\n        MinimalSet.prototype.add = function (value) {\n            if (!this.has(value)) {\n                this._values.push(value);\n            }\n        };\n        MinimalSet.prototype.has = function (value) {\n            return this._values.indexOf(value) !== -1;\n        };\n        Object.defineProperty(MinimalSet.prototype, \"size\", {\n            get: function () {\n                return this._values.length;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MinimalSet.prototype.clear = function () {\n            this._values.length = 0;\n        };\n        return MinimalSet;\n    }());\n}\nexports.minimalSetImpl = minimalSetImpl;\nexports.Set = root_1.root.Set || minimalSetImpl();\n//# sourceMappingURL=Set.js.map","\"use strict\";\nvar distinct_1 = require('../operators/distinct');\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nfunction distinct(keySelector, flushes) {\n    return distinct_1.distinct(keySelector, flushes)(this);\n}\nexports.distinct = distinct;\n//# sourceMappingURL=distinct.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar distinct_1 = require('../../operator/distinct');\nObservable_1.Observable.prototype.distinct = distinct_1.distinct;\n//# sourceMappingURL=distinct.js.map","\"use strict\";\nvar delayWhen_1 = require('../operators/delayWhen');\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nfunction delayWhen(delayDurationSelector, subscriptionDelay) {\n    return delayWhen_1.delayWhen(delayDurationSelector, subscriptionDelay)(this);\n}\nexports.delayWhen = delayWhen;\n//# sourceMappingURL=delayWhen.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar delayWhen_1 = require('../../operator/delayWhen');\nObservable_1.Observable.prototype.delayWhen = delayWhen_1.delayWhen;\n//# sourceMappingURL=delayWhen.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar delay_1 = require('../operators/delay');\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nfunction delay(delay, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return delay_1.delay(delay, scheduler)(this);\n}\nexports.delay = delay;\n//# sourceMappingURL=delay.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar delay_1 = require('../../operator/delay');\nObservable_1.Observable.prototype.delay = delay_1.delay;\n//# sourceMappingURL=delay.js.map","\"use strict\";\nvar defaultIfEmpty_1 = require('../operators/defaultIfEmpty');\n/* tslint:enable:max-line-length */\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nfunction defaultIfEmpty(defaultValue) {\n    if (defaultValue === void 0) { defaultValue = null; }\n    return defaultIfEmpty_1.defaultIfEmpty(defaultValue)(this);\n}\nexports.defaultIfEmpty = defaultIfEmpty;\n//# sourceMappingURL=defaultIfEmpty.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar defaultIfEmpty_1 = require('../../operator/defaultIfEmpty');\nObservable_1.Observable.prototype.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;\n//# sourceMappingURL=defaultIfEmpty.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar debounceTime_1 = require('../operators/debounceTime');\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nfunction debounceTime(dueTime, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return debounceTime_1.debounceTime(dueTime, scheduler)(this);\n}\nexports.debounceTime = debounceTime;\n//# sourceMappingURL=debounceTime.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar debounceTime_1 = require('../../operator/debounceTime');\nObservable_1.Observable.prototype.debounceTime = debounceTime_1.debounceTime;\n//# sourceMappingURL=debounceTime.js.map","\"use strict\";\nvar debounce_1 = require('../operators/debounce');\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nfunction debounce(durationSelector) {\n    return debounce_1.debounce(durationSelector)(this);\n}\nexports.debounce = debounce;\n//# sourceMappingURL=debounce.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar debounce_1 = require('../../operator/debounce');\nObservable_1.Observable.prototype.debounce = debounce_1.debounce;\n//# sourceMappingURL=debounce.js.map","\"use strict\";\nvar dematerialize_1 = require('../operators/dematerialize');\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nfunction dematerialize() {\n    return dematerialize_1.dematerialize()(this);\n}\nexports.dematerialize = dematerialize;\n//# sourceMappingURL=dematerialize.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar dematerialize_1 = require('../../operator/dematerialize');\nObservable_1.Observable.prototype.dematerialize = dematerialize_1.dematerialize;\n//# sourceMappingURL=dematerialize.js.map","\"use strict\";\nvar count_1 = require('../operators/count');\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nfunction count(predicate) {\n    return count_1.count(predicate)(this);\n}\nexports.count = count;\n//# sourceMappingURL=count.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar count_1 = require('../../operator/count');\nObservable_1.Observable.prototype.count = count_1.count;\n//# sourceMappingURL=count.js.map","\"use strict\";\nvar concatMapTo_1 = require('../operators/concatMapTo');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nfunction concatMapTo(innerObservable, resultSelector) {\n    return concatMapTo_1.concatMapTo(innerObservable, resultSelector)(this);\n}\nexports.concatMapTo = concatMapTo;\n//# sourceMappingURL=concatMapTo.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concatMapTo_1 = require('../../operator/concatMapTo');\nObservable_1.Observable.prototype.concatMapTo = concatMapTo_1.concatMapTo;\n//# sourceMappingURL=concatMapTo.js.map","\"use strict\";\nvar concatMap_1 = require('../operators/concatMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nfunction concatMap(project, resultSelector) {\n    return concatMap_1.concatMap(project, resultSelector)(this);\n}\nexports.concatMap = concatMap;\n//# sourceMappingURL=concatMap.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concatMap_1 = require('../../operator/concatMap');\nObservable_1.Observable.prototype.concatMap = concatMap_1.concatMap;\n//# sourceMappingURL=concatMap.js.map","\"use strict\";\nvar concatAll_1 = require('../operators/concatAll');\n/* tslint:enable:max-line-length */\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nfunction concatAll() {\n    return concatAll_1.concatAll()(this);\n}\nexports.concatAll = concatAll;\n//# sourceMappingURL=concatAll.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concatAll_1 = require('../../operator/concatAll');\nObservable_1.Observable.prototype.concatAll = concatAll_1.concatAll;\n//# sourceMappingURL=concatAll.js.map","\"use strict\";\nvar concat_1 = require('../operators/concat');\nvar concat_2 = require('../observable/concat');\nexports.concatStatic = concat_2.concat;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nfunction concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return concat_1.concat.apply(void 0, observables)(this);\n}\nexports.concat = concat;\n//# sourceMappingURL=concat.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concat_1 = require('../../operator/concat');\nObservable_1.Observable.prototype.concat = concat_1.concat;\n//# sourceMappingURL=concat.js.map","\"use strict\";\nvar combineLatest_1 = require('../operators/combineLatest');\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nfunction combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return combineLatest_1.combineLatest.apply(void 0, observables)(this);\n}\nexports.combineLatest = combineLatest;\n//# sourceMappingURL=combineLatest.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar combineLatest_1 = require('../../operator/combineLatest');\nObservable_1.Observable.prototype.combineLatest = combineLatest_1.combineLatest;\n//# sourceMappingURL=combineLatest.js.map","\"use strict\";\nvar combineAll_1 = require('../operators/combineAll');\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nfunction combineAll(project) {\n    return combineAll_1.combineAll(project)(this);\n}\nexports.combineAll = combineAll;\n//# sourceMappingURL=combineAll.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar combineAll_1 = require('../../operator/combineAll');\nObservable_1.Observable.prototype.combineAll = combineAll_1.combineAll;\n//# sourceMappingURL=combineAll.js.map","\"use strict\";\nvar catchError_1 = require('../operators/catchError');\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @name catch\n * @owner Observable\n */\nfunction _catch(selector) {\n    return catchError_1.catchError(selector)(this);\n}\nexports._catch = _catch;\n//# sourceMappingURL=catch.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar catch_1 = require('../../operator/catch');\nObservable_1.Observable.prototype.catch = catch_1._catch;\nObservable_1.Observable.prototype._catch = catch_1._catch;\n//# sourceMappingURL=catch.js.map","\"use strict\";\nvar bufferWhen_1 = require('../operators/bufferWhen');\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nfunction bufferWhen(closingSelector) {\n    return bufferWhen_1.bufferWhen(closingSelector)(this);\n}\nexports.bufferWhen = bufferWhen;\n//# sourceMappingURL=bufferWhen.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bufferWhen_1 = require('../../operator/bufferWhen');\nObservable_1.Observable.prototype.bufferWhen = bufferWhen_1.bufferWhen;\n//# sourceMappingURL=bufferWhen.js.map","\"use strict\";\nvar bufferToggle_1 = require('../operators/bufferToggle');\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nfunction bufferToggle(openings, closingSelector) {\n    return bufferToggle_1.bufferToggle(openings, closingSelector)(this);\n}\nexports.bufferToggle = bufferToggle;\n//# sourceMappingURL=bufferToggle.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bufferToggle_1 = require('../../operator/bufferToggle');\nObservable_1.Observable.prototype.bufferToggle = bufferToggle_1.bufferToggle;\n//# sourceMappingURL=bufferToggle.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar isScheduler_1 = require('../util/isScheduler');\nvar bufferTime_1 = require('../operators/bufferTime');\n/* tslint:enable:max-line-length */\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nfunction bufferTime(bufferTimeSpan) {\n    var length = arguments.length;\n    var scheduler = async_1.async;\n    if (isScheduler_1.isScheduler(arguments[arguments.length - 1])) {\n        scheduler = arguments[arguments.length - 1];\n        length--;\n    }\n    var bufferCreationInterval = null;\n    if (length >= 2) {\n        bufferCreationInterval = arguments[1];\n    }\n    var maxBufferSize = Number.POSITIVE_INFINITY;\n    if (length >= 3) {\n        maxBufferSize = arguments[2];\n    }\n    return bufferTime_1.bufferTime(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler)(this);\n}\nexports.bufferTime = bufferTime;\n//# sourceMappingURL=bufferTime.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bufferTime_1 = require('../../operator/bufferTime');\nObservable_1.Observable.prototype.bufferTime = bufferTime_1.bufferTime;\n//# sourceMappingURL=bufferTime.js.map","\"use strict\";\nvar bufferCount_1 = require('../operators/bufferCount');\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nfunction bufferCount(bufferSize, startBufferEvery) {\n    if (startBufferEvery === void 0) { startBufferEvery = null; }\n    return bufferCount_1.bufferCount(bufferSize, startBufferEvery)(this);\n}\nexports.bufferCount = bufferCount;\n//# sourceMappingURL=bufferCount.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bufferCount_1 = require('../../operator/bufferCount');\nObservable_1.Observable.prototype.bufferCount = bufferCount_1.bufferCount;\n//# sourceMappingURL=bufferCount.js.map","\"use strict\";\nvar buffer_1 = require('../operators/buffer');\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nfunction buffer(closingNotifier) {\n    return buffer_1.buffer(closingNotifier)(this);\n}\nexports.buffer = buffer;\n//# sourceMappingURL=buffer.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar buffer_1 = require('../../operator/buffer');\nObservable_1.Observable.prototype.buffer = buffer_1.buffer;\n//# sourceMappingURL=buffer.js.map","\"use strict\";\nvar root_1 = require('./root');\nfunction assignImpl(target) {\n    var sources = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        sources[_i - 1] = arguments[_i];\n    }\n    var len = sources.length;\n    for (var i = 0; i < len; i++) {\n        var source = sources[i];\n        for (var k in source) {\n            if (source.hasOwnProperty(k)) {\n                target[k] = source[k];\n            }\n        }\n    }\n    return target;\n}\nexports.assignImpl = assignImpl;\n;\nfunction getAssign(root) {\n    return root.Object.assign || assignImpl;\n}\nexports.getAssign = getAssign;\nexports.assign = getAssign(root_1.root);\n//# sourceMappingURL=assign.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncScheduler_1 = require('./AsyncScheduler');\nvar QueueScheduler = (function (_super) {\n    __extends(QueueScheduler, _super);\n    function QueueScheduler() {\n        _super.apply(this, arguments);\n    }\n    return QueueScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.QueueScheduler = QueueScheduler;\n//# sourceMappingURL=QueueScheduler.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncAction_1 = require('./AsyncAction');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar QueueAction = (function (_super) {\n    __extends(QueueAction, _super);\n    function QueueAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    QueueAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (delay > 0) {\n            return _super.prototype.schedule.call(this, state, delay);\n        }\n        this.delay = delay;\n        this.state = state;\n        this.scheduler.flush(this);\n        return this;\n    };\n    QueueAction.prototype.execute = function (state, delay) {\n        return (delay > 0 || this.closed) ?\n            _super.prototype.execute.call(this, state, delay) :\n            this._execute(state, delay);\n    };\n    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Otherwise flush the scheduler starting with this action.\n        return scheduler.flush(this);\n    };\n    return QueueAction;\n}(AsyncAction_1.AsyncAction));\nexports.QueueAction = QueueAction;\n//# sourceMappingURL=QueueAction.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../../Subject');\nvar Subscriber_1 = require('../../Subscriber');\nvar Observable_1 = require('../../Observable');\nvar Subscription_1 = require('../../Subscription');\nvar root_1 = require('../../util/root');\nvar ReplaySubject_1 = require('../../ReplaySubject');\nvar tryCatch_1 = require('../../util/tryCatch');\nvar errorObject_1 = require('../../util/errorObject');\nvar assign_1 = require('../../util/assign');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar WebSocketSubject = (function (_super) {\n    __extends(WebSocketSubject, _super);\n    function WebSocketSubject(urlConfigOrSource, destination) {\n        if (urlConfigOrSource instanceof Observable_1.Observable) {\n            _super.call(this, destination, urlConfigOrSource);\n        }\n        else {\n            _super.call(this);\n            this.WebSocketCtor = root_1.root.WebSocket;\n            this._output = new Subject_1.Subject();\n            if (typeof urlConfigOrSource === 'string') {\n                this.url = urlConfigOrSource;\n            }\n            else {\n                // WARNING: config object could override important members here.\n                assign_1.assign(this, urlConfigOrSource);\n            }\n            if (!this.WebSocketCtor) {\n                throw new Error('no WebSocket constructor can be found');\n            }\n            this.destination = new ReplaySubject_1.ReplaySubject();\n        }\n    }\n    WebSocketSubject.prototype.resultSelector = function (e) {\n        return JSON.parse(e.data);\n    };\n    /**\n     * Wrapper around the w3c-compatible WebSocket object provided by the browser.\n     *\n     * @example <caption>Wraps browser WebSocket</caption>\n     *\n     * let socket$ = Observable.webSocket('ws://localhost:8081');\n     *\n     * socket$.subscribe(\n     *    (msg) => console.log('message received: ' + msg),\n     *    (err) => console.log(err),\n     *    () => console.log('complete')\n     *  );\n     *\n     * socket$.next(JSON.stringify({ op: 'hello' }));\n     *\n     * @example <caption>Wraps WebSocket from nodejs-websocket (using node.js)</caption>\n     *\n     * import { w3cwebsocket } from 'websocket';\n     *\n     * let socket$ = Observable.webSocket({\n     *   url: 'ws://localhost:8081',\n     *   WebSocketCtor: w3cwebsocket\n     * });\n     *\n     * socket$.subscribe(\n     *    (msg) => console.log('message received: ' + msg),\n     *    (err) => console.log(err),\n     *    () => console.log('complete')\n     *  );\n     *\n     * socket$.next(JSON.stringify({ op: 'hello' }));\n     *\n     * @param {string | WebSocketSubjectConfig} urlConfigOrSource the source of the websocket as an url or a structure defining the websocket object\n     * @return {WebSocketSubject}\n     * @static true\n     * @name webSocket\n     * @owner Observable\n     */\n    WebSocketSubject.create = function (urlConfigOrSource) {\n        return new WebSocketSubject(urlConfigOrSource);\n    };\n    WebSocketSubject.prototype.lift = function (operator) {\n        var sock = new WebSocketSubject(this, this.destination);\n        sock.operator = operator;\n        return sock;\n    };\n    WebSocketSubject.prototype._resetState = function () {\n        this.socket = null;\n        if (!this.source) {\n            this.destination = new ReplaySubject_1.ReplaySubject();\n        }\n        this._output = new Subject_1.Subject();\n    };\n    // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n    WebSocketSubject.prototype.multiplex = function (subMsg, unsubMsg, messageFilter) {\n        var self = this;\n        return new Observable_1.Observable(function (observer) {\n            var result = tryCatch_1.tryCatch(subMsg)();\n            if (result === errorObject_1.errorObject) {\n                observer.error(errorObject_1.errorObject.e);\n            }\n            else {\n                self.next(result);\n            }\n            var subscription = self.subscribe(function (x) {\n                var result = tryCatch_1.tryCatch(messageFilter)(x);\n                if (result === errorObject_1.errorObject) {\n                    observer.error(errorObject_1.errorObject.e);\n                }\n                else if (result) {\n                    observer.next(x);\n                }\n            }, function (err) { return observer.error(err); }, function () { return observer.complete(); });\n            return function () {\n                var result = tryCatch_1.tryCatch(unsubMsg)();\n                if (result === errorObject_1.errorObject) {\n                    observer.error(errorObject_1.errorObject.e);\n                }\n                else {\n                    self.next(result);\n                }\n                subscription.unsubscribe();\n            };\n        });\n    };\n    WebSocketSubject.prototype._connectSocket = function () {\n        var _this = this;\n        var WebSocketCtor = this.WebSocketCtor;\n        var observer = this._output;\n        var socket = null;\n        try {\n            socket = this.protocol ?\n                new WebSocketCtor(this.url, this.protocol) :\n                new WebSocketCtor(this.url);\n            this.socket = socket;\n            if (this.binaryType) {\n                this.socket.binaryType = this.binaryType;\n            }\n        }\n        catch (e) {\n            observer.error(e);\n            return;\n        }\n        var subscription = new Subscription_1.Subscription(function () {\n            _this.socket = null;\n            if (socket && socket.readyState === 1) {\n                socket.close();\n            }\n        });\n        socket.onopen = function (e) {\n            var openObserver = _this.openObserver;\n            if (openObserver) {\n                openObserver.next(e);\n            }\n            var queue = _this.destination;\n            _this.destination = Subscriber_1.Subscriber.create(function (x) { return socket.readyState === 1 && socket.send(x); }, function (e) {\n                var closingObserver = _this.closingObserver;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                if (e && e.code) {\n                    socket.close(e.code, e.reason);\n                }\n                else {\n                    observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n                        'and an optional reason: { code: number, reason: string }'));\n                }\n                _this._resetState();\n            }, function () {\n                var closingObserver = _this.closingObserver;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                socket.close();\n                _this._resetState();\n            });\n            if (queue && queue instanceof ReplaySubject_1.ReplaySubject) {\n                subscription.add(queue.subscribe(_this.destination));\n            }\n        };\n        socket.onerror = function (e) {\n            _this._resetState();\n            observer.error(e);\n        };\n        socket.onclose = function (e) {\n            _this._resetState();\n            var closeObserver = _this.closeObserver;\n            if (closeObserver) {\n                closeObserver.next(e);\n            }\n            if (e.wasClean) {\n                observer.complete();\n            }\n            else {\n                observer.error(e);\n            }\n        };\n        socket.onmessage = function (e) {\n            var result = tryCatch_1.tryCatch(_this.resultSelector)(e);\n            if (result === errorObject_1.errorObject) {\n                observer.error(errorObject_1.errorObject.e);\n            }\n            else {\n                observer.next(result);\n            }\n        };\n    };\n    WebSocketSubject.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var source = this.source;\n        if (source) {\n            return source.subscribe(subscriber);\n        }\n        if (!this.socket) {\n            this._connectSocket();\n        }\n        var subscription = new Subscription_1.Subscription();\n        subscription.add(this._output.subscribe(subscriber));\n        subscription.add(function () {\n            var socket = _this.socket;\n            if (_this._output.observers.length === 0) {\n                if (socket && socket.readyState === 1) {\n                    socket.close();\n                }\n                _this._resetState();\n            }\n        });\n        return subscription;\n    };\n    WebSocketSubject.prototype.unsubscribe = function () {\n        var _a = this, source = _a.source, socket = _a.socket;\n        if (socket && socket.readyState === 1) {\n            socket.close();\n            this._resetState();\n        }\n        _super.prototype.unsubscribe.call(this);\n        if (!source) {\n            this.destination = new ReplaySubject_1.ReplaySubject();\n        }\n    };\n    return WebSocketSubject;\n}(Subject_1.AnonymousSubject));\nexports.WebSocketSubject = WebSocketSubject;\n//# sourceMappingURL=WebSocketSubject.js.map","\"use strict\";\nvar WebSocketSubject_1 = require('./WebSocketSubject');\nexports.webSocket = WebSocketSubject_1.WebSocketSubject.create;\n//# sourceMappingURL=webSocket.js.map","\"use strict\";\nvar Observable_1 = require('../../../Observable');\nvar webSocket_1 = require('../../../observable/dom/webSocket');\nObservable_1.Observable.webSocket = webSocket_1.webSocket;\n//# sourceMappingURL=webSocket.js.map","\"use strict\";\nvar AjaxObservable_1 = require('./AjaxObservable');\nexports.ajax = AjaxObservable_1.AjaxObservable.create;\n//# sourceMappingURL=ajax.js.map","\"use strict\";\nvar Observable_1 = require('../../../Observable');\nvar ajax_1 = require('../../../observable/dom/ajax');\nObservable_1.Observable.ajax = ajax_1.ajax;\n//# sourceMappingURL=ajax.js.map","\"use strict\";\nvar zip_1 = require('../operators/zip');\nexports.zip = zip_1.zipStatic;\n//# sourceMappingURL=zip.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar zip_1 = require('../../observable/zip');\nObservable_1.Observable.zip = zip_1.zip;\n//# sourceMappingURL=zip.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isNumeric_1 = require('../util/isNumeric');\nvar Observable_1 = require('../Observable');\nvar async_1 = require('../scheduler/async');\nvar isScheduler_1 = require('../util/isScheduler');\nvar isDate_1 = require('../util/isDate');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar TimerObservable = (function (_super) {\n    __extends(TimerObservable, _super);\n    function TimerObservable(dueTime, period, scheduler) {\n        if (dueTime === void 0) { dueTime = 0; }\n        _super.call(this);\n        this.period = -1;\n        this.dueTime = 0;\n        if (isNumeric_1.isNumeric(period)) {\n            this.period = Number(period) < 1 && 1 || Number(period);\n        }\n        else if (isScheduler_1.isScheduler(period)) {\n            scheduler = period;\n        }\n        if (!isScheduler_1.isScheduler(scheduler)) {\n            scheduler = async_1.async;\n        }\n        this.scheduler = scheduler;\n        this.dueTime = isDate_1.isDate(dueTime) ?\n            (+dueTime - this.scheduler.now()) :\n            dueTime;\n    }\n    /**\n     * Creates an Observable that starts emitting after an `initialDelay` and\n     * emits ever increasing numbers after each `period` of time thereafter.\n     *\n     * <span class=\"informal\">Its like {@link interval}, but you can specify when\n     * should the emissions start.</span>\n     *\n     * <img src=\"./img/timer.png\" width=\"100%\">\n     *\n     * `timer` returns an Observable that emits an infinite sequence of ascending\n     * integers, with a constant interval of time, `period` of your choosing\n     * between those emissions. The first emission happens after the specified\n     * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n     * operator uses the `async` IScheduler to provide a notion of time, but you\n     * may pass any IScheduler to it. If `period` is not specified, the output\n     * Observable emits only one value, `0`. Otherwise, it emits an infinite\n     * sequence.\n     *\n     * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n     * var numbers = Rx.Observable.timer(3000, 1000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @example <caption>Emits one number after five seconds</caption>\n     * var numbers = Rx.Observable.timer(5000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link interval}\n     * @see {@link delay}\n     *\n     * @param {number|Date} initialDelay The initial delay time to wait before\n     * emitting the first value of `0`.\n     * @param {number} [period] The period of time between emissions of the\n     * subsequent numbers.\n     * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n     * the emission of values, and providing a notion of \"time\".\n     * @return {Observable} An Observable that emits a `0` after the\n     * `initialDelay` and ever increasing numbers after each `period` of time\n     * thereafter.\n     * @static true\n     * @name timer\n     * @owner Observable\n     */\n    TimerObservable.create = function (initialDelay, period, scheduler) {\n        if (initialDelay === void 0) { initialDelay = 0; }\n        return new TimerObservable(initialDelay, period, scheduler);\n    };\n    TimerObservable.dispatch = function (state) {\n        var index = state.index, period = state.period, subscriber = state.subscriber;\n        var action = this;\n        subscriber.next(index);\n        if (subscriber.closed) {\n            return;\n        }\n        else if (period === -1) {\n            return subscriber.complete();\n        }\n        state.index = index + 1;\n        action.schedule(state, period);\n    };\n    TimerObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, period = _a.period, dueTime = _a.dueTime, scheduler = _a.scheduler;\n        return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n            index: index, period: period, subscriber: subscriber\n        });\n    };\n    return TimerObservable;\n}(Observable_1.Observable));\nexports.TimerObservable = TimerObservable;\n//# sourceMappingURL=TimerObservable.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timer_1 = require('../../observable/timer');\nObservable_1.Observable.timer = timer_1.timer;\n//# sourceMappingURL=timer.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ErrorObservable = (function (_super) {\n    __extends(ErrorObservable, _super);\n    function ErrorObservable(error, scheduler) {\n        _super.call(this);\n        this.error = error;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer and immediately\n     * emits an error notification.\n     *\n     * <span class=\"informal\">Just emits 'error', and nothing else.\n     * </span>\n     *\n     * <img src=\"./img/throw.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the error notification. It can be used for composing with other\n     * Observables, such as in a {@link mergeMap}.\n     *\n     * @example <caption>Emit the number 7, then emit an error.</caption>\n     * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n     * var interval = Rx.Observable.interval(1000);\n     * var result = interval.mergeMap(x =>\n     *   x === 13 ?\n     *     Rx.Observable.throw('Thirteens are bad') :\n     *     Rx.Observable.of('a', 'b', 'c')\n     * );\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link of}\n     *\n     * @param {any} error The particular Error to pass to the error notification.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emission of the error notification.\n     * @return {Observable} An error Observable: emits only the error notification\n     * using the given error argument.\n     * @static true\n     * @name throw\n     * @owner Observable\n     */\n    ErrorObservable.create = function (error, scheduler) {\n        return new ErrorObservable(error, scheduler);\n    };\n    ErrorObservable.dispatch = function (arg) {\n        var error = arg.error, subscriber = arg.subscriber;\n        subscriber.error(error);\n    };\n    ErrorObservable.prototype._subscribe = function (subscriber) {\n        var error = this.error;\n        var scheduler = this.scheduler;\n        subscriber.syncErrorThrowable = true;\n        if (scheduler) {\n            return scheduler.schedule(ErrorObservable.dispatch, 0, {\n                error: error, subscriber: subscriber\n            });\n        }\n        else {\n            subscriber.error(error);\n        }\n    };\n    return ErrorObservable;\n}(Observable_1.Observable));\nexports.ErrorObservable = ErrorObservable;\n//# sourceMappingURL=ErrorObservable.js.map","\"use strict\";\nvar ErrorObservable_1 = require('./ErrorObservable');\nexports._throw = ErrorObservable_1.ErrorObservable.create;\n//# sourceMappingURL=throw.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar throw_1 = require('../../observable/throw');\nObservable_1.Observable.throw = throw_1._throw;\n//# sourceMappingURL=throw.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar UsingObservable = (function (_super) {\n    __extends(UsingObservable, _super);\n    function UsingObservable(resourceFactory, observableFactory) {\n        _super.call(this);\n        this.resourceFactory = resourceFactory;\n        this.observableFactory = observableFactory;\n    }\n    UsingObservable.create = function (resourceFactory, observableFactory) {\n        return new UsingObservable(resourceFactory, observableFactory);\n    };\n    UsingObservable.prototype._subscribe = function (subscriber) {\n        var _a = this, resourceFactory = _a.resourceFactory, observableFactory = _a.observableFactory;\n        var resource;\n        try {\n            resource = resourceFactory();\n            return new UsingSubscriber(subscriber, resource, observableFactory);\n        }\n        catch (err) {\n            subscriber.error(err);\n        }\n    };\n    return UsingObservable;\n}(Observable_1.Observable));\nexports.UsingObservable = UsingObservable;\nvar UsingSubscriber = (function (_super) {\n    __extends(UsingSubscriber, _super);\n    function UsingSubscriber(destination, resource, observableFactory) {\n        _super.call(this, destination);\n        this.resource = resource;\n        this.observableFactory = observableFactory;\n        destination.add(resource);\n        this.tryUse();\n    }\n    UsingSubscriber.prototype.tryUse = function () {\n        try {\n            var source = this.observableFactory.call(this, this.resource);\n            if (source) {\n                this.add(subscribeToResult_1.subscribeToResult(this, source));\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    return UsingSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=UsingObservable.js.map","\"use strict\";\nvar UsingObservable_1 = require('./UsingObservable');\nexports.using = UsingObservable_1.UsingObservable.create;\n//# sourceMappingURL=using.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar using_1 = require('../../observable/using');\nObservable_1.Observable.using = using_1.using;\n//# sourceMappingURL=using.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar RangeObservable = (function (_super) {\n    __extends(RangeObservable, _super);\n    function RangeObservable(start, count, scheduler) {\n        _super.call(this);\n        this.start = start;\n        this._count = count;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits a sequence of numbers within a specified\n     * range.\n     *\n     * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n     *\n     * <img src=\"./img/range.png\" width=\"100%\">\n     *\n     * `range` operator emits a range of sequential integers, in order, where you\n     * select the `start` of the range and its `length`. By default, uses no\n     * IScheduler and just delivers the notifications synchronously, but may use\n     * an optional IScheduler to regulate those deliveries.\n     *\n     * @example <caption>Emits the numbers 1 to 10</caption>\n     * var numbers = Rx.Observable.range(1, 10);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link timer}\n     * @see {@link interval}\n     *\n     * @param {number} [start=0] The value of the first integer in the sequence.\n     * @param {number} [count=0] The number of sequential integers to generate.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emissions of the notifications.\n     * @return {Observable} An Observable of numbers that emits a finite range of\n     * sequential integers.\n     * @static true\n     * @name range\n     * @owner Observable\n     */\n    RangeObservable.create = function (start, count, scheduler) {\n        if (start === void 0) { start = 0; }\n        if (count === void 0) { count = 0; }\n        return new RangeObservable(start, count, scheduler);\n    };\n    RangeObservable.dispatch = function (state) {\n        var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;\n        if (index >= count) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(start);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index = index + 1;\n        state.start = start + 1;\n        this.schedule(state);\n    };\n    RangeObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var start = this.start;\n        var count = this._count;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(RangeObservable.dispatch, 0, {\n                index: index, count: count, start: start, subscriber: subscriber\n            });\n        }\n        else {\n            do {\n                if (index++ >= count) {\n                    subscriber.complete();\n                    break;\n                }\n                subscriber.next(start++);\n                if (subscriber.closed) {\n                    break;\n                }\n            } while (true);\n        }\n    };\n    return RangeObservable;\n}(Observable_1.Observable));\nexports.RangeObservable = RangeObservable;\n//# sourceMappingURL=RangeObservable.js.map","\"use strict\";\nvar RangeObservable_1 = require('./RangeObservable');\nexports.range = RangeObservable_1.RangeObservable.create;\n//# sourceMappingURL=range.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar range_1 = require('../../observable/range');\nObservable_1.Observable.range = range_1.range;\n//# sourceMappingURL=range.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nfunction dispatch(state) {\n    var obj = state.obj, keys = state.keys, length = state.length, index = state.index, subscriber = state.subscriber;\n    if (index === length) {\n        subscriber.complete();\n        return;\n    }\n    var key = keys[index];\n    subscriber.next([key, obj[key]]);\n    state.index = index + 1;\n    this.schedule(state);\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar PairsObservable = (function (_super) {\n    __extends(PairsObservable, _super);\n    function PairsObservable(obj, scheduler) {\n        _super.call(this);\n        this.obj = obj;\n        this.scheduler = scheduler;\n        this.keys = Object.keys(obj);\n    }\n    /**\n     * Convert an object into an observable sequence of [key, value] pairs\n     * using an optional IScheduler to enumerate the object.\n     *\n     * @example <caption>Converts a javascript object to an Observable</caption>\n     * var obj = {\n     *   foo: 42,\n     *   bar: 56,\n     *   baz: 78\n     * };\n     *\n     * var source = Rx.Observable.pairs(obj);\n     *\n     * var subscription = source.subscribe(\n     *   function (x) {\n     *     console.log('Next: %s', x);\n     *   },\n     *   function (err) {\n     *     console.log('Error: %s', err);\n     *   },\n     *   function () {\n     *     console.log('Completed');\n     *   });\n     *\n     * @param {Object} obj The object to inspect and turn into an\n     * Observable sequence.\n     * @param {Scheduler} [scheduler] An optional IScheduler to run the\n     * enumeration of the input sequence on.\n     * @returns {(Observable<Array<string | T>>)} An observable sequence of\n     * [key, value] pairs from the object.\n     */\n    PairsObservable.create = function (obj, scheduler) {\n        return new PairsObservable(obj, scheduler);\n    };\n    PairsObservable.prototype._subscribe = function (subscriber) {\n        var _a = this, keys = _a.keys, scheduler = _a.scheduler;\n        var length = keys.length;\n        if (scheduler) {\n            return scheduler.schedule(dispatch, 0, {\n                obj: this.obj, keys: keys, length: length, index: 0, subscriber: subscriber\n            });\n        }\n        else {\n            for (var idx = 0; idx < length; idx++) {\n                var key = keys[idx];\n                subscriber.next([key, this.obj[key]]);\n            }\n            subscriber.complete();\n        }\n    };\n    return PairsObservable;\n}(Observable_1.Observable));\nexports.PairsObservable = PairsObservable;\n//# sourceMappingURL=PairsObservable.js.map","\"use strict\";\nvar PairsObservable_1 = require('./PairsObservable');\nexports.pairs = PairsObservable_1.PairsObservable.create;\n//# sourceMappingURL=pairs.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar pairs_1 = require('../../observable/pairs');\nObservable_1.Observable.pairs = pairs_1.pairs;\n//# sourceMappingURL=pairs.js.map","\"use strict\";\nvar onErrorResumeNext_1 = require('../operators/onErrorResumeNext');\nexports.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNextStatic;\n//# sourceMappingURL=onErrorResumeNext.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar onErrorResumeNext_1 = require('../../observable/onErrorResumeNext');\nObservable_1.Observable.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;\n//# sourceMappingURL=onErrorResumeNext.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar of_1 = require('../../observable/of');\nObservable_1.Observable.of = of_1.of;\n//# sourceMappingURL=of.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar noop_1 = require('../util/noop');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar NeverObservable = (function (_super) {\n    __extends(NeverObservable, _super);\n    function NeverObservable() {\n        _super.call(this);\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer.\n     *\n     * <span class=\"informal\">An Observable that never emits anything.</span>\n     *\n     * <img src=\"./img/never.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that emits\n     * neither values nor errors nor the completion notification. It can be used\n     * for testing purposes or for composing with other Observables. Please note\n     * that by never emitting a complete notification, this Observable keeps the\n     * subscription from being disposed automatically. Subscriptions need to be\n     * manually disposed.\n     *\n     * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n     * function info() {\n     *   console.log('Will not be called');\n     * }\n     * var result = Rx.Observable.never().startWith(7);\n     * result.subscribe(x => console.log(x), info, info);\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @return {Observable} A \"never\" Observable: never emits anything.\n     * @static true\n     * @name never\n     * @owner Observable\n     */\n    NeverObservable.create = function () {\n        return new NeverObservable();\n    };\n    NeverObservable.prototype._subscribe = function (subscriber) {\n        noop_1.noop();\n    };\n    return NeverObservable;\n}(Observable_1.Observable));\nexports.NeverObservable = NeverObservable;\n//# sourceMappingURL=NeverObservable.js.map","\"use strict\";\nvar NeverObservable_1 = require('./NeverObservable');\nexports.never = NeverObservable_1.NeverObservable.create;\n//# sourceMappingURL=never.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar never_1 = require('../../observable/never');\nObservable_1.Observable.never = never_1.never;\n//# sourceMappingURL=never.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar race_1 = require('../../observable/race');\nObservable_1.Observable.race = race_1.race;\n//# sourceMappingURL=race.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar merge_1 = require('../../observable/merge');\nObservable_1.Observable.merge = merge_1.merge;\n//# sourceMappingURL=merge.js.map","\"use strict\";\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nvar Scheduler = (function () {\n    function Scheduler(SchedulerAction, now) {\n        if (now === void 0) { now = Scheduler.now; }\n        this.SchedulerAction = SchedulerAction;\n        this.now = now;\n    }\n    /**\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     */\n    Scheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) { delay = 0; }\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n    };\n    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };\n    return Scheduler;\n}());\nexports.Scheduler = Scheduler;\n//# sourceMappingURL=Scheduler.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('../Subscription');\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nvar Action = (function (_super) {\n    __extends(Action, _super);\n    function Action(scheduler, work) {\n        _super.call(this);\n    }\n    /**\n     * Schedules this action on its parent Scheduler for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     */\n    Action.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        return this;\n    };\n    return Action;\n}(Subscription_1.Subscription));\nexports.Action = Action;\n//# sourceMappingURL=Action.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isNumeric_1 = require('../util/isNumeric');\nvar Observable_1 = require('../Observable');\nvar async_1 = require('../scheduler/async');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IntervalObservable = (function (_super) {\n    __extends(IntervalObservable, _super);\n    function IntervalObservable(period, scheduler) {\n        if (period === void 0) { period = 0; }\n        if (scheduler === void 0) { scheduler = async_1.async; }\n        _super.call(this);\n        this.period = period;\n        this.scheduler = scheduler;\n        if (!isNumeric_1.isNumeric(period) || period < 0) {\n            this.period = 0;\n        }\n        if (!scheduler || typeof scheduler.schedule !== 'function') {\n            this.scheduler = async_1.async;\n        }\n    }\n    /**\n     * Creates an Observable that emits sequential numbers every specified\n     * interval of time, on a specified IScheduler.\n     *\n     * <span class=\"informal\">Emits incremental numbers periodically in time.\n     * </span>\n     *\n     * <img src=\"./img/interval.png\" width=\"100%\">\n     *\n     * `interval` returns an Observable that emits an infinite sequence of\n     * ascending integers, with a constant interval of time of your choosing\n     * between those emissions. The first emission is not sent immediately, but\n     * only after the first period has passed. By default, this operator uses the\n     * `async` IScheduler to provide a notion of time, but you may pass any\n     * IScheduler to it.\n     *\n     * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n     * var numbers = Rx.Observable.interval(1000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link timer}\n     * @see {@link delay}\n     *\n     * @param {number} [period=0] The interval size in milliseconds (by default)\n     * or the time unit determined by the scheduler's clock.\n     * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n     * the emission of values, and providing a notion of \"time\".\n     * @return {Observable} An Observable that emits a sequential number each time\n     * interval.\n     * @static true\n     * @name interval\n     * @owner Observable\n     */\n    IntervalObservable.create = function (period, scheduler) {\n        if (period === void 0) { period = 0; }\n        if (scheduler === void 0) { scheduler = async_1.async; }\n        return new IntervalObservable(period, scheduler);\n    };\n    IntervalObservable.dispatch = function (state) {\n        var index = state.index, subscriber = state.subscriber, period = state.period;\n        subscriber.next(index);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index += 1;\n        this.schedule(state, period);\n    };\n    IntervalObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var period = this.period;\n        var scheduler = this.scheduler;\n        subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n            index: index, subscriber: subscriber, period: period\n        }));\n    };\n    return IntervalObservable;\n}(Observable_1.Observable));\nexports.IntervalObservable = IntervalObservable;\n//# sourceMappingURL=IntervalObservable.js.map","\"use strict\";\nvar IntervalObservable_1 = require('./IntervalObservable');\nexports.interval = IntervalObservable_1.IntervalObservable.create;\n//# sourceMappingURL=interval.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar interval_1 = require('../../observable/interval');\nObservable_1.Observable.interval = interval_1.interval;\n//# sourceMappingURL=interval.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IfObservable = (function (_super) {\n    __extends(IfObservable, _super);\n    function IfObservable(condition, thenSource, elseSource) {\n        _super.call(this);\n        this.condition = condition;\n        this.thenSource = thenSource;\n        this.elseSource = elseSource;\n    }\n    IfObservable.create = function (condition, thenSource, elseSource) {\n        return new IfObservable(condition, thenSource, elseSource);\n    };\n    IfObservable.prototype._subscribe = function (subscriber) {\n        var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;\n        return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n    };\n    return IfObservable;\n}(Observable_1.Observable));\nexports.IfObservable = IfObservable;\nvar IfSubscriber = (function (_super) {\n    __extends(IfSubscriber, _super);\n    function IfSubscriber(destination, condition, thenSource, elseSource) {\n        _super.call(this, destination);\n        this.condition = condition;\n        this.thenSource = thenSource;\n        this.elseSource = elseSource;\n        this.tryIf();\n    }\n    IfSubscriber.prototype.tryIf = function () {\n        var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;\n        var result;\n        try {\n            result = condition();\n            var source = result ? thenSource : elseSource;\n            if (source) {\n                this.add(subscribeToResult_1.subscribeToResult(this, source));\n            }\n            else {\n                this._complete();\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    return IfSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=IfObservable.js.map","\"use strict\";\nvar IfObservable_1 = require('./IfObservable');\nexports._if = IfObservable_1.IfObservable.create;\n//# sourceMappingURL=if.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar if_1 = require('../../observable/if');\nObservable_1.Observable.if = if_1._if;\n//# sourceMappingURL=if.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar isScheduler_1 = require('../util/isScheduler');\nvar selfSelector = function (value) { return value; };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar GenerateObservable = (function (_super) {\n    __extends(GenerateObservable, _super);\n    function GenerateObservable(initialState, condition, iterate, resultSelector, scheduler) {\n        _super.call(this);\n        this.initialState = initialState;\n        this.condition = condition;\n        this.iterate = iterate;\n        this.resultSelector = resultSelector;\n        this.scheduler = scheduler;\n    }\n    GenerateObservable.create = function (initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {\n        if (arguments.length == 1) {\n            return new GenerateObservable(initialStateOrOptions.initialState, initialStateOrOptions.condition, initialStateOrOptions.iterate, initialStateOrOptions.resultSelector || selfSelector, initialStateOrOptions.scheduler);\n        }\n        if (resultSelectorOrObservable === undefined || isScheduler_1.isScheduler(resultSelectorOrObservable)) {\n            return new GenerateObservable(initialStateOrOptions, condition, iterate, selfSelector, resultSelectorOrObservable);\n        }\n        return new GenerateObservable(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler);\n    };\n    GenerateObservable.prototype._subscribe = function (subscriber) {\n        var state = this.initialState;\n        if (this.scheduler) {\n            return this.scheduler.schedule(GenerateObservable.dispatch, 0, {\n                subscriber: subscriber,\n                iterate: this.iterate,\n                condition: this.condition,\n                resultSelector: this.resultSelector,\n                state: state });\n        }\n        var _a = this, condition = _a.condition, resultSelector = _a.resultSelector, iterate = _a.iterate;\n        do {\n            if (condition) {\n                var conditionResult = void 0;\n                try {\n                    conditionResult = condition(state);\n                }\n                catch (err) {\n                    subscriber.error(err);\n                    return;\n                }\n                if (!conditionResult) {\n                    subscriber.complete();\n                    break;\n                }\n            }\n            var value = void 0;\n            try {\n                value = resultSelector(state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n            subscriber.next(value);\n            if (subscriber.closed) {\n                break;\n            }\n            try {\n                state = iterate(state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n        } while (true);\n    };\n    GenerateObservable.dispatch = function (state) {\n        var subscriber = state.subscriber, condition = state.condition;\n        if (subscriber.closed) {\n            return;\n        }\n        if (state.needIterate) {\n            try {\n                state.state = state.iterate(state.state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n        }\n        else {\n            state.needIterate = true;\n        }\n        if (condition) {\n            var conditionResult = void 0;\n            try {\n                conditionResult = condition(state.state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n            if (!conditionResult) {\n                subscriber.complete();\n                return;\n            }\n            if (subscriber.closed) {\n                return;\n            }\n        }\n        var value;\n        try {\n            value = state.resultSelector(state.state);\n        }\n        catch (err) {\n            subscriber.error(err);\n            return;\n        }\n        if (subscriber.closed) {\n            return;\n        }\n        subscriber.next(value);\n        if (subscriber.closed) {\n            return;\n        }\n        return this.schedule(state);\n    };\n    return GenerateObservable;\n}(Observable_1.Observable));\nexports.GenerateObservable = GenerateObservable;\n//# sourceMappingURL=GenerateObservable.js.map","\"use strict\";\nvar GenerateObservable_1 = require('./GenerateObservable');\nexports.generate = GenerateObservable_1.GenerateObservable.create;\n//# sourceMappingURL=generate.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar generate_1 = require('../../observable/generate');\nObservable_1.Observable.generate = generate_1.generate;\n//# sourceMappingURL=generate.js.map","\"use strict\";\nvar PromiseObservable_1 = require('./PromiseObservable');\nexports.fromPromise = PromiseObservable_1.PromiseObservable.create;\n//# sourceMappingURL=fromPromise.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar fromPromise_1 = require('../../observable/fromPromise');\nObservable_1.Observable.fromPromise = fromPromise_1.fromPromise;\n//# sourceMappingURL=fromPromise.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isFunction_1 = require('../util/isFunction');\nvar Observable_1 = require('../Observable');\nvar Subscription_1 = require('../Subscription');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromEventPatternObservable = (function (_super) {\n    __extends(FromEventPatternObservable, _super);\n    function FromEventPatternObservable(addHandler, removeHandler, selector) {\n        _super.call(this);\n        this.addHandler = addHandler;\n        this.removeHandler = removeHandler;\n        this.selector = selector;\n    }\n    /**\n     * Creates an Observable from an API based on addHandler/removeHandler\n     * functions.\n     *\n     * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n     * Observable.</span>\n     *\n     * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n     *\n     * Creates an Observable by using the `addHandler` and `removeHandler`\n     * functions to add and remove the handlers, with an optional selector\n     * function to project the event arguments to a result. The `addHandler` is\n     * called when the output Observable is subscribed, and `removeHandler` is\n     * called when the Subscription is unsubscribed.\n     *\n     * @example <caption>Emits clicks happening on the DOM document</caption>\n     * function addClickHandler(handler) {\n     *   document.addEventListener('click', handler);\n     * }\n     *\n     * function removeClickHandler(handler) {\n     *   document.removeEventListener('click', handler);\n     * }\n     *\n     * var clicks = Rx.Observable.fromEventPattern(\n     *   addClickHandler,\n     *   removeClickHandler\n     * );\n     * clicks.subscribe(x => console.log(x));\n     *\n     * @see {@link from}\n     * @see {@link fromEvent}\n     *\n     * @param {function(handler: Function): any} addHandler A function that takes\n     * a `handler` function as argument and attaches it somehow to the actual\n     * source of events.\n     * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that\n     * takes a `handler` function as argument and removes it in case it was\n     * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,\n     * removeHandler function will forward it.\n     * @param {function(...args: any): T} [selector] An optional function to\n     * post-process results. It takes the arguments from the event handler and\n     * should return a single value.\n     * @return {Observable<T>}\n     * @static true\n     * @name fromEventPattern\n     * @owner Observable\n     */\n    FromEventPatternObservable.create = function (addHandler, removeHandler, selector) {\n        return new FromEventPatternObservable(addHandler, removeHandler, selector);\n    };\n    FromEventPatternObservable.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var removeHandler = this.removeHandler;\n        var handler = !!this.selector ? function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            _this._callSelector(subscriber, args);\n        } : function (e) { subscriber.next(e); };\n        var retValue = this._callAddHandler(handler, subscriber);\n        if (!isFunction_1.isFunction(removeHandler)) {\n            return;\n        }\n        subscriber.add(new Subscription_1.Subscription(function () {\n            //TODO: determine whether or not to forward to error handler\n            removeHandler(handler, retValue);\n        }));\n    };\n    FromEventPatternObservable.prototype._callSelector = function (subscriber, args) {\n        try {\n            var result = this.selector.apply(this, args);\n            subscriber.next(result);\n        }\n        catch (e) {\n            subscriber.error(e);\n        }\n    };\n    FromEventPatternObservable.prototype._callAddHandler = function (handler, errorSubscriber) {\n        try {\n            return this.addHandler(handler) || null;\n        }\n        catch (e) {\n            errorSubscriber.error(e);\n        }\n    };\n    return FromEventPatternObservable;\n}(Observable_1.Observable));\nexports.FromEventPatternObservable = FromEventPatternObservable;\n//# sourceMappingURL=FromEventPatternObservable.js.map","\"use strict\";\nvar FromEventPatternObservable_1 = require('./FromEventPatternObservable');\nexports.fromEventPattern = FromEventPatternObservable_1.FromEventPatternObservable.create;\n//# sourceMappingURL=fromEventPattern.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar fromEventPattern_1 = require('../../observable/fromEventPattern');\nObservable_1.Observable.fromEventPattern = fromEventPattern_1.fromEventPattern;\n//# sourceMappingURL=fromEventPattern.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar tryCatch_1 = require('../util/tryCatch');\nvar isFunction_1 = require('../util/isFunction');\nvar errorObject_1 = require('../util/errorObject');\nvar Subscription_1 = require('../Subscription');\nvar toString = Object.prototype.toString;\nfunction isNodeStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\nfunction isJQueryStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\nfunction isNodeList(sourceObj) {\n    return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\nfunction isHTMLCollection(sourceObj) {\n    return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\nfunction isEventTarget(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromEventObservable = (function (_super) {\n    __extends(FromEventObservable, _super);\n    function FromEventObservable(sourceObj, eventName, selector, options) {\n        _super.call(this);\n        this.sourceObj = sourceObj;\n        this.eventName = eventName;\n        this.selector = selector;\n        this.options = options;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Creates an Observable that emits events of a specific type coming from the\n     * given event target.\n     *\n     * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n     * EventEmitter events or others.</span>\n     *\n     * <img src=\"./img/fromEvent.png\" width=\"100%\">\n     *\n     * `fromEvent` accepts as a first argument event target, which is an object with methods\n     * for registering event handler functions. As a second argument it takes string that indicates\n     * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n     * which are described in detail below. If your event target does not match any of the ones listed,\n     * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n     * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n     * handler functions have different names, but they all accept a string describing event type\n     * and function itself, which will be called whenever said event happens.\n     *\n     * Every time resulting Observable is subscribed, event handler function will be registered\n     * to event target on given event type. When that event fires, value\n     * passed as a first argument to registered function will be emitted by output Observable.\n     * When Observable is unsubscribed, function will be unregistered from event target.\n     *\n     * Note that if event target calls registered function with more than one argument, second\n     * and following arguments will not appear in resulting stream. In order to get access to them,\n     * you can pass to `fromEvent` optional project function, which will be called with all arguments\n     * passed to event handler. Output Observable will then emit value returned by project function,\n     * instead of the usual value.\n     *\n     * Remember that event targets listed below are checked via duck typing. It means that\n     * no matter what kind of object you have and no matter what environment you work in,\n     * you can safely use `fromEvent` on that object if it exposes described methods (provided\n     * of course they behave as was described above). So for example if Node.js library exposes\n     * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n     * a good choice.\n     *\n     * If the API you use is more callback then event handler oriented (subscribed\n     * callback function fires only once and thus there is no need to manually\n     * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n     * instead.\n     *\n     * `fromEvent` supports following types of event targets:\n     *\n     * **DOM EventTarget**\n     *\n     * This is an object with `addEventListener` and `removeEventListener` methods.\n     *\n     * In the browser, `addEventListener` accepts - apart from event type string and event\n     * handler function arguments - optional third parameter, which is either an object or boolean,\n     * both used for additional configuration how and when passed function will be called. When\n     * `fromEvent` is used with event target of that type, you can provide this values\n     * as third parameter as well.\n     *\n     * **Node.js EventEmitter**\n     *\n     * An object with `addListener` and `removeListener` methods.\n     *\n     * **JQuery-style event target**\n     *\n     * An object with `on` and `off` methods\n     *\n     * **DOM NodeList**\n     *\n     * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n     *\n     * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n     * it contains and install event handler function in every of them. When returned Observable\n     * is unsubscribed, function will be removed from all Nodes.\n     *\n     * **DOM HtmlCollection**\n     *\n     * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n     * installed and removed in each of elements.\n     *\n     *\n     * @example <caption>Emits clicks happening on the DOM document</caption>\n     * var clicks = Rx.Observable.fromEvent(document, 'click');\n     * clicks.subscribe(x => console.log(x));\n     *\n     * // Results in:\n     * // MouseEvent object logged to console every time a click\n     * // occurs on the document.\n     *\n     *\n     * @example <caption>Use addEventListener with capture option</caption>\n     * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\n     *                                                                          // which will be passed to addEventListener\n     * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\n     *\n     * clicksInDocument.subscribe(() => console.log('document'));\n     * clicksInDiv.subscribe(() => console.log('div'));\n     *\n     * // By default events bubble UP in DOM tree, so normally\n     * // when we would click on div in document\n     * // \"div\" would be logged first and then \"document\".\n     * // Since we specified optional `capture` option, document\n     * // will catch event when it goes DOWN DOM tree, so console\n     * // will log \"document\" and then \"div\".\n     *\n     * @see {@link bindCallback}\n     * @see {@link bindNodeCallback}\n     * @see {@link fromEventPattern}\n     *\n     * @param {EventTargetLike} target The DOM EventTarget, Node.js\n     * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n     * @param {string} eventName The event name of interest, being emitted by the\n     * `target`.\n     * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n     * @param {SelectorMethodSignature<T>} [selector] An optional function to\n     * post-process results. It takes the arguments from the event handler and\n     * should return a single value.\n     * @return {Observable<T>}\n     * @static true\n     * @name fromEvent\n     * @owner Observable\n     */\n    FromEventObservable.create = function (target, eventName, options, selector) {\n        if (isFunction_1.isFunction(options)) {\n            selector = options;\n            options = undefined;\n        }\n        return new FromEventObservable(target, eventName, selector, options);\n    };\n    FromEventObservable.setupSubscription = function (sourceObj, eventName, handler, subscriber, options) {\n        var unsubscribe;\n        if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n            for (var i = 0, len = sourceObj.length; i < len; i++) {\n                FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n            }\n        }\n        else if (isEventTarget(sourceObj)) {\n            var source_1 = sourceObj;\n            sourceObj.addEventListener(eventName, handler, options);\n            unsubscribe = function () { return source_1.removeEventListener(eventName, handler, options); };\n        }\n        else if (isJQueryStyleEventEmitter(sourceObj)) {\n            var source_2 = sourceObj;\n            sourceObj.on(eventName, handler);\n            unsubscribe = function () { return source_2.off(eventName, handler); };\n        }\n        else if (isNodeStyleEventEmitter(sourceObj)) {\n            var source_3 = sourceObj;\n            sourceObj.addListener(eventName, handler);\n            unsubscribe = function () { return source_3.removeListener(eventName, handler); };\n        }\n        else {\n            throw new TypeError('Invalid event target');\n        }\n        subscriber.add(new Subscription_1.Subscription(unsubscribe));\n    };\n    FromEventObservable.prototype._subscribe = function (subscriber) {\n        var sourceObj = this.sourceObj;\n        var eventName = this.eventName;\n        var options = this.options;\n        var selector = this.selector;\n        var handler = selector ? function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            var result = tryCatch_1.tryCatch(selector).apply(void 0, args);\n            if (result === errorObject_1.errorObject) {\n                subscriber.error(errorObject_1.errorObject.e);\n            }\n            else {\n                subscriber.next(result);\n            }\n        } : function (e) { return subscriber.next(e); };\n        FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n    };\n    return FromEventObservable;\n}(Observable_1.Observable));\nexports.FromEventObservable = FromEventObservable;\n//# sourceMappingURL=FromEventObservable.js.map","\"use strict\";\nvar FromEventObservable_1 = require('./FromEventObservable');\nexports.fromEvent = FromEventObservable_1.FromEventObservable.create;\n//# sourceMappingURL=fromEvent.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar fromEvent_1 = require('../../observable/fromEvent');\nObservable_1.Observable.fromEvent = fromEvent_1.fromEvent;\n//# sourceMappingURL=fromEvent.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar from_1 = require('../../observable/from');\nObservable_1.Observable.from = from_1.from;\n//# sourceMappingURL=from.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar EmptyObservable_1 = require('./EmptyObservable');\nvar isArray_1 = require('../util/isArray');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ForkJoinObservable = (function (_super) {\n    __extends(ForkJoinObservable, _super);\n    function ForkJoinObservable(sources, resultSelector) {\n        _super.call(this);\n        this.sources = sources;\n        this.resultSelector = resultSelector;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Joins last values emitted by passed Observables.\n     *\n     * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n     *\n     * <img src=\"./img/forkJoin.png\" width=\"100%\">\n     *\n     * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n     * or directly as arguments. If no input Observables are provided, resulting stream will complete\n     * immediately.\n     *\n     * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n     * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n     * array will have `n` values, where first value is the last thing emitted by the first Observable,\n     * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n     * not emit more than once and it will complete after that. If you need to emit combined values not only\n     * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n     * or {@link zip} instead.\n     *\n     * In order for resulting array to have the same length as the number of input Observables, whenever any of\n     * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n     * and it will not emit anything either, even if it already has some last values from other Observables.\n     * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n     * unless at any point some other Observable completes without emitting value, which brings us back to\n     * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n     * have to emit something at least once and complete.\n     *\n     * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n     * will be immediately unsubscribed.\n     *\n     * Optionally `forkJoin` accepts project function, that will be called with values which normally\n     * would land in emitted array. Whatever is returned by project function, will appear in output\n     * Observable instead. This means that default project can be thought of as a function that takes\n     * all its arguments and puts them into an array. Note that project function will be called only\n     * when output Observable is supposed to emit a result.\n     *\n     * @example <caption>Use forkJoin with operator emitting immediately</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.of(1, 2, 3, 4),\n     *   Rx.Observable.of(5, 6, 7, 8)\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // [4, 8]\n     * // \"This is how it ends!\"\n     *\n     *\n     * @example <caption>Use forkJoin with operator emitting after some time</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n     *   Rx.Observable.interval(500).take(4) // emit 0, 1, 2, 3 every half a second and complete\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // [2, 3] after 3 seconds\n     * // \"This is how it ends!\" immediately after\n     *\n     *\n     * @example <caption>Use forkJoin with project function</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n     *   Rx.Observable.interval(500).take(4), // emit 0, 1, 2, 3 every half a second and complete\n     *   (n, m) => n + m\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // 5 after 3 seconds\n     * // \"This is how it ends!\" immediately after\n     *\n     * @see {@link combineLatest}\n     * @see {@link zip}\n     *\n     * @param {...SubscribableOrPromise} sources Any number of Observables provided either as an array or as an arguments\n     * passed directly to the operator.\n     * @param {function} [project] Function that takes values emitted by input Observables and returns value\n     * that will appear in resulting Observable instead of default array.\n     * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n     * or value from project function.\n     * @static true\n     * @name forkJoin\n     * @owner Observable\n     */\n    ForkJoinObservable.create = function () {\n        var sources = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            sources[_i - 0] = arguments[_i];\n        }\n        if (sources === null || arguments.length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        var resultSelector = null;\n        if (typeof sources[sources.length - 1] === 'function') {\n            resultSelector = sources.pop();\n        }\n        // if the first and only other argument besides the resultSelector is an array\n        // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n        if (sources.length === 1 && isArray_1.isArray(sources[0])) {\n            sources = sources[0];\n        }\n        if (sources.length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        return new ForkJoinObservable(sources, resultSelector);\n    };\n    ForkJoinObservable.prototype._subscribe = function (subscriber) {\n        return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n    };\n    return ForkJoinObservable;\n}(Observable_1.Observable));\nexports.ForkJoinObservable = ForkJoinObservable;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ForkJoinSubscriber = (function (_super) {\n    __extends(ForkJoinSubscriber, _super);\n    function ForkJoinSubscriber(destination, sources, resultSelector) {\n        _super.call(this, destination);\n        this.sources = sources;\n        this.resultSelector = resultSelector;\n        this.completed = 0;\n        this.haveValues = 0;\n        var len = sources.length;\n        this.total = len;\n        this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            var source = sources[i];\n            var innerSubscription = subscribeToResult_1.subscribeToResult(this, source, null, i);\n            if (innerSubscription) {\n                innerSubscription.outerIndex = i;\n                this.add(innerSubscription);\n            }\n        }\n    }\n    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        if (!innerSub._hasValue) {\n            innerSub._hasValue = true;\n            this.haveValues++;\n        }\n    };\n    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {\n        var destination = this.destination;\n        var _a = this, haveValues = _a.haveValues, resultSelector = _a.resultSelector, values = _a.values;\n        var len = values.length;\n        if (!innerSub._hasValue) {\n            destination.complete();\n            return;\n        }\n        this.completed++;\n        if (this.completed !== len) {\n            return;\n        }\n        if (haveValues === len) {\n            var value = resultSelector ? resultSelector.apply(this, values) : values;\n            destination.next(value);\n        }\n        destination.complete();\n    };\n    return ForkJoinSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=ForkJoinObservable.js.map","\"use strict\";\nvar ForkJoinObservable_1 = require('./ForkJoinObservable');\nexports.forkJoin = ForkJoinObservable_1.ForkJoinObservable.create;\n//# sourceMappingURL=forkJoin.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar forkJoin_1 = require('../../observable/forkJoin');\nObservable_1.Observable.forkJoin = forkJoin_1.forkJoin;\n//# sourceMappingURL=forkJoin.js.map","\"use strict\";\nvar EmptyObservable_1 = require('./EmptyObservable');\nexports.empty = EmptyObservable_1.EmptyObservable.create;\n//# sourceMappingURL=empty.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar empty_1 = require('../../observable/empty');\nObservable_1.Observable.empty = empty_1.empty;\n//# sourceMappingURL=empty.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar DeferObservable = (function (_super) {\n    __extends(DeferObservable, _super);\n    function DeferObservable(observableFactory) {\n        _super.call(this);\n        this.observableFactory = observableFactory;\n    }\n    /**\n     * Creates an Observable that, on subscribe, calls an Observable factory to\n     * make an Observable for each new Observer.\n     *\n     * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n     * is subscribed.\n     * </span>\n     *\n     * <img src=\"./img/defer.png\" width=\"100%\">\n     *\n     * `defer` allows you to create the Observable only when the Observer\n     * subscribes, and create a fresh Observable for each Observer. It waits until\n     * an Observer subscribes to it, and then it generates an Observable,\n     * typically with an Observable factory function. It does this afresh for each\n     * subscriber, so although each subscriber may think it is subscribing to the\n     * same Observable, in fact each subscriber gets its own individual\n     * Observable.\n     *\n     * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n     * var clicksOrInterval = Rx.Observable.defer(function () {\n     *   if (Math.random() > 0.5) {\n     *     return Rx.Observable.fromEvent(document, 'click');\n     *   } else {\n     *     return Rx.Observable.interval(1000);\n     *   }\n     * });\n     * clicksOrInterval.subscribe(x => console.log(x));\n     *\n     * // Results in the following behavior:\n     * // If the result of Math.random() is greater than 0.5 it will listen\n     * // for clicks anywhere on the \"document\"; when document is clicked it\n     * // will log a MouseEvent object to the console. If the result is less\n     * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n     *\n     * @see {@link create}\n     *\n     * @param {function(): SubscribableOrPromise} observableFactory The Observable\n     * factory function to invoke for each Observer that subscribes to the output\n     * Observable. May also return a Promise, which will be converted on the fly\n     * to an Observable.\n     * @return {Observable} An Observable whose Observers' subscriptions trigger\n     * an invocation of the given Observable factory function.\n     * @static true\n     * @name defer\n     * @owner Observable\n     */\n    DeferObservable.create = function (observableFactory) {\n        return new DeferObservable(observableFactory);\n    };\n    DeferObservable.prototype._subscribe = function (subscriber) {\n        return new DeferSubscriber(subscriber, this.observableFactory);\n    };\n    return DeferObservable;\n}(Observable_1.Observable));\nexports.DeferObservable = DeferObservable;\nvar DeferSubscriber = (function (_super) {\n    __extends(DeferSubscriber, _super);\n    function DeferSubscriber(destination, factory) {\n        _super.call(this, destination);\n        this.factory = factory;\n        this.tryDefer();\n    }\n    DeferSubscriber.prototype.tryDefer = function () {\n        try {\n            this._callFactory();\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    DeferSubscriber.prototype._callFactory = function () {\n        var result = this.factory();\n        if (result) {\n            this.add(subscribeToResult_1.subscribeToResult(this, result));\n        }\n    };\n    return DeferSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=DeferObservable.js.map","\"use strict\";\nvar DeferObservable_1 = require('./DeferObservable');\nexports.defer = DeferObservable_1.DeferObservable.create;\n//# sourceMappingURL=defer.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar defer_1 = require('../../observable/defer');\nObservable_1.Observable.defer = defer_1.defer;\n//# sourceMappingURL=defer.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar ScalarObservable_1 = require('./ScalarObservable');\nvar EmptyObservable_1 = require('./EmptyObservable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ArrayLikeObservable = (function (_super) {\n    __extends(ArrayLikeObservable, _super);\n    function ArrayLikeObservable(arrayLike, scheduler) {\n        _super.call(this);\n        this.arrayLike = arrayLike;\n        this.scheduler = scheduler;\n        if (!scheduler && arrayLike.length === 1) {\n            this._isScalar = true;\n            this.value = arrayLike[0];\n        }\n    }\n    ArrayLikeObservable.create = function (arrayLike, scheduler) {\n        var length = arrayLike.length;\n        if (length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        else if (length === 1) {\n            return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);\n        }\n        else {\n            return new ArrayLikeObservable(arrayLike, scheduler);\n        }\n    };\n    ArrayLikeObservable.dispatch = function (state) {\n        var arrayLike = state.arrayLike, index = state.index, length = state.length, subscriber = state.subscriber;\n        if (subscriber.closed) {\n            return;\n        }\n        if (index >= length) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(arrayLike[index]);\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    ArrayLikeObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, arrayLike = _a.arrayLike, scheduler = _a.scheduler;\n        var length = arrayLike.length;\n        if (scheduler) {\n            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n                arrayLike: arrayLike, index: index, length: length, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < length && !subscriber.closed; i++) {\n                subscriber.next(arrayLike[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayLikeObservable;\n}(Observable_1.Observable));\nexports.ArrayLikeObservable = ArrayLikeObservable;\n//# sourceMappingURL=ArrayLikeObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../util/root');\nvar Observable_1 = require('../Observable');\nvar iterator_1 = require('../symbol/iterator');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IteratorObservable = (function (_super) {\n    __extends(IteratorObservable, _super);\n    function IteratorObservable(iterator, scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n        if (iterator == null) {\n            throw new Error('iterator cannot be null.');\n        }\n        this.iterator = getIterator(iterator);\n    }\n    IteratorObservable.create = function (iterator, scheduler) {\n        return new IteratorObservable(iterator, scheduler);\n    };\n    IteratorObservable.dispatch = function (state) {\n        var index = state.index, hasError = state.hasError, iterator = state.iterator, subscriber = state.subscriber;\n        if (hasError) {\n            subscriber.error(state.error);\n            return;\n        }\n        var result = iterator.next();\n        if (result.done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(result.value);\n        state.index = index + 1;\n        if (subscriber.closed) {\n            if (typeof iterator.return === 'function') {\n                iterator.return();\n            }\n            return;\n        }\n        this.schedule(state);\n    };\n    IteratorObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, iterator = _a.iterator, scheduler = _a.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(IteratorObservable.dispatch, 0, {\n                index: index, iterator: iterator, subscriber: subscriber\n            });\n        }\n        else {\n            do {\n                var result = iterator.next();\n                if (result.done) {\n                    subscriber.complete();\n                    break;\n                }\n                else {\n                    subscriber.next(result.value);\n                }\n                if (subscriber.closed) {\n                    if (typeof iterator.return === 'function') {\n                        iterator.return();\n                    }\n                    break;\n                }\n            } while (true);\n        }\n    };\n    return IteratorObservable;\n}(Observable_1.Observable));\nexports.IteratorObservable = IteratorObservable;\nvar StringIterator = (function () {\n    function StringIterator(str, idx, len) {\n        if (idx === void 0) { idx = 0; }\n        if (len === void 0) { len = str.length; }\n        this.str = str;\n        this.idx = idx;\n        this.len = len;\n    }\n    StringIterator.prototype[iterator_1.iterator] = function () { return (this); };\n    StringIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.str.charAt(this.idx++)\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return StringIterator;\n}());\nvar ArrayIterator = (function () {\n    function ArrayIterator(arr, idx, len) {\n        if (idx === void 0) { idx = 0; }\n        if (len === void 0) { len = toLength(arr); }\n        this.arr = arr;\n        this.idx = idx;\n        this.len = len;\n    }\n    ArrayIterator.prototype[iterator_1.iterator] = function () { return this; };\n    ArrayIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.arr[this.idx++]\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return ArrayIterator;\n}());\nfunction getIterator(obj) {\n    var i = obj[iterator_1.iterator];\n    if (!i && typeof obj === 'string') {\n        return new StringIterator(obj);\n    }\n    if (!i && obj.length !== undefined) {\n        return new ArrayIterator(obj);\n    }\n    if (!i) {\n        throw new TypeError('object is not iterable');\n    }\n    return obj[iterator_1.iterator]();\n}\nvar maxSafeInteger = Math.pow(2, 53) - 1;\nfunction toLength(o) {\n    var len = +o.length;\n    if (isNaN(len)) {\n        return 0;\n    }\n    if (len === 0 || !numberIsFinite(len)) {\n        return len;\n    }\n    len = sign(len) * Math.floor(Math.abs(len));\n    if (len <= 0) {\n        return 0;\n    }\n    if (len > maxSafeInteger) {\n        return maxSafeInteger;\n    }\n    return len;\n}\nfunction numberIsFinite(value) {\n    return typeof value === 'number' && root_1.root.isFinite(value);\n}\nfunction sign(value) {\n    var valueAsNumber = +value;\n    if (valueAsNumber === 0) {\n        return valueAsNumber;\n    }\n    if (isNaN(valueAsNumber)) {\n        return valueAsNumber;\n    }\n    return valueAsNumber < 0 ? -1 : 1;\n}\n//# sourceMappingURL=IteratorObservable.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concat_1 = require('../../observable/concat');\nObservable_1.Observable.concat = concat_1.concat;\n//# sourceMappingURL=concat.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('./Subscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerSubscriber = (function (_super) {\n    __extends(InnerSubscriber, _super);\n    function InnerSubscriber(parent, outerValue, outerIndex) {\n        _super.call(this);\n        this.parent = parent;\n        this.outerValue = outerValue;\n        this.outerIndex = outerIndex;\n        this.index = 0;\n    }\n    InnerSubscriber.prototype._next = function (value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    };\n    InnerSubscriber.prototype._error = function (error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    };\n    InnerSubscriber.prototype._complete = function () {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    };\n    return InnerSubscriber;\n}(Subscriber_1.Subscriber));\nexports.InnerSubscriber = InnerSubscriber;\n//# sourceMappingURL=InnerSubscriber.js.map","\"use strict\";\nvar isScheduler_1 = require('../util/isScheduler');\nvar isArray_1 = require('../util/isArray');\nvar ArrayObservable_1 = require('./ArrayObservable');\nvar combineLatest_1 = require('../operators/combineLatest');\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nfunction combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = null;\n    var scheduler = null;\n    if (isScheduler_1.isScheduler(observables[observables.length - 1])) {\n        scheduler = observables.pop();\n    }\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n        observables = observables[0];\n    }\n    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new combineLatest_1.CombineLatestOperator(project));\n}\nexports.combineLatest = combineLatest;\n//# sourceMappingURL=combineLatest.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar combineLatest_1 = require('../../observable/combineLatest');\nObservable_1.Observable.combineLatest = combineLatest_1.combineLatest;\n//# sourceMappingURL=combineLatest.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar AsyncSubject_1 = require('../AsyncSubject');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar BoundNodeCallbackObservable = (function (_super) {\n    __extends(BoundNodeCallbackObservable, _super);\n    function BoundNodeCallbackObservable(callbackFunc, selector, args, context, scheduler) {\n        _super.call(this);\n        this.callbackFunc = callbackFunc;\n        this.selector = selector;\n        this.args = args;\n        this.context = context;\n        this.scheduler = scheduler;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Converts a Node.js-style callback API to a function that returns an\n     * Observable.\n     *\n     * <span class=\"informal\">It's just like {@link bindCallback}, but the\n     * callback is expected to be of type `callback(error, result)`.</span>\n     *\n     * `bindNodeCallback` is not an operator because its input and output are not\n     * Observables. The input is a function `func` with some parameters, but the\n     * last parameter must be a callback function that `func` calls when it is\n     * done. The callback function is expected to follow Node.js conventions,\n     * where the first argument to the callback is an error object, signaling\n     * whether call was successful. If that object is passed to callback, it means\n     * something went wrong.\n     *\n     * The output of `bindNodeCallback` is a function that takes the same\n     * parameters as `func`, except the last one (the callback). When the output\n     * function is called with arguments, it will return an Observable.\n     * If `func` calls its callback with error parameter present, Observable will\n     * error with that value as well. If error parameter is not passed, Observable will emit\n     * second parameter. If there are more parameters (third and so on),\n     * Observable will emit an array with all arguments, except first error argument.\n     *\n     * Optionally `bindNodeCallback` accepts selector function, which allows you to\n     * make resulting Observable emit value computed by selector, instead of regular\n     * callback arguments. It works similarly to {@link bindCallback} selector, but\n     * Node.js-style error argument will never be passed to that function.\n     *\n     * Note that `func` will not be called at the same time output function is,\n     * but rather whenever resulting Observable is subscribed. By default call to\n     * `func` will happen synchronously after subscription, but that can be changed\n     * with proper {@link Scheduler} provided as optional third parameter. Scheduler\n     * can also control when values from callback will be emitted by Observable.\n     * To find out more, check out documentation for {@link bindCallback}, where\n     * Scheduler works exactly the same.\n     *\n     * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n     * of returned function, when it is called.\n     *\n     * After Observable emits value, it will complete immediately. This means\n     * even if `func` calls callback again, values from second and consecutive\n     * calls will never appear on the stream. If you need to handle functions\n     * that call callbacks multiple times, check out {@link fromEvent} or\n     * {@link fromEventPattern} instead.\n     *\n     * Note that `bindNodeCallback` can be used in non-Node.js environments as well.\n     * \"Node.js-style\" callbacks are just a convention, so if you write for\n     * browsers or any other environment and API you use implements that callback style,\n     * `bindNodeCallback` can be safely used on that API functions as well.\n     *\n     * Remember that Error object passed to callback does not have to be an instance\n     * of JavaScript built-in `Error` object. In fact, it does not even have to an object.\n     * Error parameter of callback function is interpreted as \"present\", when value\n     * of that parameter is truthy. It could be, for example, non-zero number, non-empty\n     * string or boolean `true`. In all of these cases resulting Observable would error\n     * with that value. This means usually regular style callbacks will fail very often when\n     * `bindNodeCallback` is used. If your Observable errors much more often then you\n     * would expect, check if callback really is called in Node.js-style and, if not,\n     * switch to {@link bindCallback} instead.\n     *\n     * Note that even if error parameter is technically present in callback, but its value\n     * is falsy, it still won't appear in array emitted by Observable or in selector function.\n     *\n     *\n     * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n     * import * as fs from 'fs';\n     * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n     * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     *\n     * @example <caption>Use on function calling callback with multiple arguments</caption>\n     * someFunction((err, a, b) => {\n     *   console.log(err); // null\n     *   console.log(a); // 5\n     *   console.log(b); // \"some string\"\n     * });\n     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n     * boundSomeFunction()\n     * .subscribe(value => {\n     *   console.log(value); // [5, \"some string\"]\n     * });\n     *\n     *\n     * @example <caption>Use with selector function</caption>\n     * someFunction((err, a, b) => {\n     *   console.log(err); // undefined\n     *   console.log(a); // \"abc\"\n     *   console.log(b); // \"DEF\"\n     * });\n     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction, (a, b) => a + b);\n     * boundSomeFunction()\n     * .subscribe(value => {\n     *   console.log(value); // \"abcDEF\"\n     * });\n     *\n     *\n     * @example <caption>Use on function calling callback in regular style</caption>\n     * someFunction(a => {\n     *   console.log(a); // 5\n     * });\n     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n     * boundSomeFunction()\n     * .subscribe(\n     *   value => {}             // never gets called\n     *   err => console.log(err) // 5\n     *);\n     *\n     *\n     * @see {@link bindCallback}\n     * @see {@link from}\n     * @see {@link fromPromise}\n     *\n     * @param {function} func Function with a Node.js-style callback as the last parameter.\n     * @param {function} [selector] A function which takes the arguments from the\n     * callback and maps those to a value to emit on the output Observable.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * callbacks.\n     * @return {function(...params: *): Observable} A function which returns the\n     * Observable that delivers the same values the Node.js callback would\n     * deliver.\n     * @static true\n     * @name bindNodeCallback\n     * @owner Observable\n     */\n    BoundNodeCallbackObservable.create = function (func, selector, scheduler) {\n        if (selector === void 0) { selector = undefined; }\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            return new BoundNodeCallbackObservable(func, selector, args, this, scheduler);\n        };\n    };\n    BoundNodeCallbackObservable.prototype._subscribe = function (subscriber) {\n        var callbackFunc = this.callbackFunc;\n        var args = this.args;\n        var scheduler = this.scheduler;\n        var subject = this.subject;\n        if (!scheduler) {\n            if (!subject) {\n                subject = this.subject = new AsyncSubject_1.AsyncSubject();\n                var handler = function handlerFn() {\n                    var innerArgs = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        innerArgs[_i - 0] = arguments[_i];\n                    }\n                    var source = handlerFn.source;\n                    var selector = source.selector, subject = source.subject;\n                    var err = innerArgs.shift();\n                    if (err) {\n                        subject.error(err);\n                    }\n                    else if (selector) {\n                        var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                        if (result_1 === errorObject_1.errorObject) {\n                            subject.error(errorObject_1.errorObject.e);\n                        }\n                        else {\n                            subject.next(result_1);\n                            subject.complete();\n                        }\n                    }\n                    else {\n                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n                        subject.complete();\n                    }\n                };\n                // use named function instance to avoid closure.\n                handler.source = this;\n                var result = tryCatch_1.tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n                if (result === errorObject_1.errorObject) {\n                    subject.error(errorObject_1.errorObject.e);\n                }\n            }\n            return subject.subscribe(subscriber);\n        }\n        else {\n            return scheduler.schedule(dispatch, 0, { source: this, subscriber: subscriber, context: this.context });\n        }\n    };\n    return BoundNodeCallbackObservable;\n}(Observable_1.Observable));\nexports.BoundNodeCallbackObservable = BoundNodeCallbackObservable;\nfunction dispatch(state) {\n    var self = this;\n    var source = state.source, subscriber = state.subscriber, context = state.context;\n    // XXX: cast to `any` to access to the private field in `source`.\n    var _a = source, callbackFunc = _a.callbackFunc, args = _a.args, scheduler = _a.scheduler;\n    var subject = source.subject;\n    if (!subject) {\n        subject = source.subject = new AsyncSubject_1.AsyncSubject();\n        var handler = function handlerFn() {\n            var innerArgs = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                innerArgs[_i - 0] = arguments[_i];\n            }\n            var source = handlerFn.source;\n            var selector = source.selector, subject = source.subject;\n            var err = innerArgs.shift();\n            if (err) {\n                self.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));\n            }\n            else if (selector) {\n                var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                if (result_2 === errorObject_1.errorObject) {\n                    self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n                }\n                else {\n                    self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));\n                }\n            }\n            else {\n                var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n                self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\n            }\n        };\n        // use named function to pass values in without closure\n        handler.source = source;\n        var result = tryCatch_1.tryCatch(callbackFunc).apply(context, args.concat(handler));\n        if (result === errorObject_1.errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n        }\n    }\n    self.add(subject.subscribe(subscriber));\n}\nfunction dispatchNext(arg) {\n    var value = arg.value, subject = arg.subject;\n    subject.next(value);\n    subject.complete();\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subject = arg.subject;\n    subject.error(err);\n}\n//# sourceMappingURL=BoundNodeCallbackObservable.js.map","\"use strict\";\nvar BoundNodeCallbackObservable_1 = require('./BoundNodeCallbackObservable');\nexports.bindNodeCallback = BoundNodeCallbackObservable_1.BoundNodeCallbackObservable.create;\n//# sourceMappingURL=bindNodeCallback.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bindNodeCallback_1 = require('../../observable/bindNodeCallback');\nObservable_1.Observable.bindNodeCallback = bindNodeCallback_1.bindNodeCallback;\n//# sourceMappingURL=bindNodeCallback.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar AsyncSubject_1 = require('../AsyncSubject');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar BoundCallbackObservable = (function (_super) {\n    __extends(BoundCallbackObservable, _super);\n    function BoundCallbackObservable(callbackFunc, selector, args, context, scheduler) {\n        _super.call(this);\n        this.callbackFunc = callbackFunc;\n        this.selector = selector;\n        this.args = args;\n        this.context = context;\n        this.scheduler = scheduler;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Converts a callback API to a function that returns an Observable.\n     *\n     * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n     * it will return a function `g` that when called as `g(x)` will output an\n     * Observable.</span>\n     *\n     * `bindCallback` is not an operator because its input and output are not\n     * Observables. The input is a function `func` with some parameters, the\n     * last parameter must be a callback function that `func` calls when it is\n     * done.\n     *\n     * The output of `bindCallback` is a function that takes the same parameters\n     * as `func`, except the last one (the callback). When the output function\n     * is called with arguments it will return an Observable. If function `func`\n     * calls its callback with one argument the Observable will emit that value.\n     * If on the other hand the callback is called with multiple values the resulting\n     * Observable will emit an array with said values as arguments.\n     *\n     * It is very important to remember that input function `func` is not called\n     * when the output function is, but rather when the Observable returned by the output\n     * function is subscribed. This means if `func` makes an AJAX request, that request\n     * will be made every time someone subscribes to the resulting Observable, but not before.\n     *\n     * Optionally, a selector function can be passed to `bindObservable`. The selector function\n     * takes the same arguments as the callback and returns the value that will be emitted by the Observable.\n     * Even though by default multiple arguments passed to callback appear in the stream as an array\n     * the selector function will be called with arguments directly, just as the callback would.\n     * This means you can imagine the default selector (when one is not provided explicitly)\n     * as a function that aggregates all its arguments into an array, or simply returns first argument\n     * if there is only one.\n     *\n     * The last optional parameter - {@link Scheduler} - can be used to control when the call\n     * to `func` happens after someone subscribes to Observable, as well as when results\n     * passed to callback will be emitted. By default, the subscription to  an Observable calls `func`\n     * synchronously, but using `Scheduler.async` as the last parameter will defer the call to `func`,\n     * just like wrapping the call in `setTimeout` with a timeout of `0` would. If you use the async Scheduler\n     * and call `subscribe` on the output Observable all function calls that are currently executing\n     * will end before `func` is invoked.\n     *\n     * By default results passed to the callback are emitted immediately after `func` invokes the callback.\n     * In particular, if the callback is called synchronously the subscription of the resulting Observable\n     * will call the `next` function synchronously as well.  If you want to defer that call,\n     * you may use `Scheduler.async` just as before.  This means that by using `Scheduler.async` you can\n     * ensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.\n     *\n     * Note that the Observable created by the output function will always emit a single value\n     * and then complete immediately. If `func` calls the callback multiple times, values from subsequent\n     * calls will not appear in the stream. If you need to listen for multiple calls,\n     *  you probably want to use {@link fromEvent} or {@link fromEventPattern} instead.\n     *\n     * If `func` depends on some context (`this` property) and is not already bound the context of `func`\n     * will be the context that the output function has at call time. In particular, if `func`\n     * is called as a method of some objec and if `func` is not already bound, in order to preserve the context\n     * it is recommended that the context of the output function is set to that object as well.\n     *\n     * If the input function calls its callback in the \"node style\" (i.e. first argument to callback is\n     * optional error parameter signaling whether the call failed or not), {@link bindNodeCallback}\n     * provides convenient error handling and probably is a better choice.\n     * `bindCallback` will treat such functions the same as any other and error parameters\n     * (whether passed or not) will always be interpreted as regular callback argument.\n     *\n     *\n     * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n     * // Suppose we have jQuery.getJSON('/my/url', callback)\n     * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n     * var result = getJSONAsObservable('/my/url');\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     *\n     * @example <caption>Receive an array of arguments passed to a callback</caption>\n     * someFunction((a, b, c) => {\n     *   console.log(a); // 5\n     *   console.log(b); // 'some string'\n     *   console.log(c); // {someProperty: 'someValue'}\n     * });\n     *\n     * const boundSomeFunction = Rx.Observable.bindCallback(someFunction);\n     * boundSomeFunction().subscribe(values => {\n     *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]\n     * });\n     *\n     *\n     * @example <caption>Use bindCallback with a selector function</caption>\n     * someFunction((a, b, c) => {\n     *   console.log(a); // 'a'\n     *   console.log(b); // 'b'\n     *   console.log(c); // 'c'\n     * });\n     *\n     * const boundSomeFunction = Rx.Observable.bindCallback(someFunction, (a, b, c) => a + b + c);\n     * boundSomeFunction().subscribe(value => {\n     *   console.log(value) // 'abc'\n     * });\n     *\n     *\n     * @example <caption>Compare behaviour with and without async Scheduler</caption>\n     * function iCallMyCallbackSynchronously(cb) {\n     *   cb();\n     * }\n     *\n     * const boundSyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously);\n     * const boundAsyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);\n     *\n     * boundSyncFn().subscribe(() => console.log('I was sync!'));\n     * boundAsyncFn().subscribe(() => console.log('I was async!'));\n     * console.log('This happened...');\n     *\n     * // Logs:\n     * // I was sync!\n     * // This happened...\n     * // I was async!\n     *\n     *\n     * @example <caption>Use bindCallback on an object method</caption>\n     * const boundMethod = Rx.Observable.bindCallback(someObject.methodWithCallback);\n     * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject\n     * .subscribe(subscriber);\n     *\n     *\n     * @see {@link bindNodeCallback}\n     * @see {@link from}\n     * @see {@link fromPromise}\n     *\n     * @param {function} func A function with a callback as the last parameter.\n     * @param {function} [selector] A function which takes the arguments from the\n     * callback and maps them to a value that is emitted on the output Observable.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * callbacks.\n     * @return {function(...params: *): Observable} A function which returns the\n     * Observable that delivers the same values the callback would deliver.\n     * @static true\n     * @name bindCallback\n     * @owner Observable\n     */\n    BoundCallbackObservable.create = function (func, selector, scheduler) {\n        if (selector === void 0) { selector = undefined; }\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            return new BoundCallbackObservable(func, selector, args, this, scheduler);\n        };\n    };\n    BoundCallbackObservable.prototype._subscribe = function (subscriber) {\n        var callbackFunc = this.callbackFunc;\n        var args = this.args;\n        var scheduler = this.scheduler;\n        var subject = this.subject;\n        if (!scheduler) {\n            if (!subject) {\n                subject = this.subject = new AsyncSubject_1.AsyncSubject();\n                var handler = function handlerFn() {\n                    var innerArgs = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        innerArgs[_i - 0] = arguments[_i];\n                    }\n                    var source = handlerFn.source;\n                    var selector = source.selector, subject = source.subject;\n                    if (selector) {\n                        var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                        if (result_1 === errorObject_1.errorObject) {\n                            subject.error(errorObject_1.errorObject.e);\n                        }\n                        else {\n                            subject.next(result_1);\n                            subject.complete();\n                        }\n                    }\n                    else {\n                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n                        subject.complete();\n                    }\n                };\n                // use named function instance to avoid closure.\n                handler.source = this;\n                var result = tryCatch_1.tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n                if (result === errorObject_1.errorObject) {\n                    subject.error(errorObject_1.errorObject.e);\n                }\n            }\n            return subject.subscribe(subscriber);\n        }\n        else {\n            return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber: subscriber, context: this.context });\n        }\n    };\n    BoundCallbackObservable.dispatch = function (state) {\n        var self = this;\n        var source = state.source, subscriber = state.subscriber, context = state.context;\n        var callbackFunc = source.callbackFunc, args = source.args, scheduler = source.scheduler;\n        var subject = source.subject;\n        if (!subject) {\n            subject = source.subject = new AsyncSubject_1.AsyncSubject();\n            var handler = function handlerFn() {\n                var innerArgs = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    innerArgs[_i - 0] = arguments[_i];\n                }\n                var source = handlerFn.source;\n                var selector = source.selector, subject = source.subject;\n                if (selector) {\n                    var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                    if (result_2 === errorObject_1.errorObject) {\n                        self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n                    }\n                    else {\n                        self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));\n                    }\n                }\n                else {\n                    var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n                    self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\n                }\n            };\n            // use named function to pass values in without closure\n            handler.source = source;\n            var result = tryCatch_1.tryCatch(callbackFunc).apply(context, args.concat(handler));\n            if (result === errorObject_1.errorObject) {\n                subject.error(errorObject_1.errorObject.e);\n            }\n        }\n        self.add(subject.subscribe(subscriber));\n    };\n    return BoundCallbackObservable;\n}(Observable_1.Observable));\nexports.BoundCallbackObservable = BoundCallbackObservable;\nfunction dispatchNext(arg) {\n    var value = arg.value, subject = arg.subject;\n    subject.next(value);\n    subject.complete();\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subject = arg.subject;\n    subject.error(err);\n}\n//# sourceMappingURL=BoundCallbackObservable.js.map","\"use strict\";\nvar BoundCallbackObservable_1 = require('./BoundCallbackObservable');\nexports.bindCallback = BoundCallbackObservable_1.BoundCallbackObservable.create;\n//# sourceMappingURL=bindCallback.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bindCallback_1 = require('../../observable/bindCallback');\nObservable_1.Observable.bindCallback = bindCallback_1.bindCallback;\n//# sourceMappingURL=bindCallback.js.map","\"use strict\";\nvar Subscriber_1 = require('../Subscriber');\nvar rxSubscriber_1 = require('../symbol/rxSubscriber');\nvar Observer_1 = require('../Observer');\nfunction toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber_1.Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {\n            return nextOrObserver[rxSubscriber_1.rxSubscriber]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber_1.Subscriber(Observer_1.empty);\n    }\n    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n}\nexports.toSubscriber = toSubscriber;\n//# sourceMappingURL=toSubscriber.js.map","\"use strict\";\n/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\nvar Subject_1 = require('./Subject');\nexports.Subject = Subject_1.Subject;\nexports.AnonymousSubject = Subject_1.AnonymousSubject;\n/* tslint:enable:no-unused-variable */\nvar Observable_1 = require('./Observable');\nexports.Observable = Observable_1.Observable;\n// statics\n/* tslint:disable:no-use-before-declare */\nrequire('./add/observable/bindCallback');\nrequire('./add/observable/bindNodeCallback');\nrequire('./add/observable/combineLatest');\nrequire('./add/observable/concat');\nrequire('./add/observable/defer');\nrequire('./add/observable/empty');\nrequire('./add/observable/forkJoin');\nrequire('./add/observable/from');\nrequire('./add/observable/fromEvent');\nrequire('./add/observable/fromEventPattern');\nrequire('./add/observable/fromPromise');\nrequire('./add/observable/generate');\nrequire('./add/observable/if');\nrequire('./add/observable/interval');\nrequire('./add/observable/merge');\nrequire('./add/observable/race');\nrequire('./add/observable/never');\nrequire('./add/observable/of');\nrequire('./add/observable/onErrorResumeNext');\nrequire('./add/observable/pairs');\nrequire('./add/observable/range');\nrequire('./add/observable/using');\nrequire('./add/observable/throw');\nrequire('./add/observable/timer');\nrequire('./add/observable/zip');\n//dom\nrequire('./add/observable/dom/ajax');\nrequire('./add/observable/dom/webSocket');\n//operators\nrequire('./add/operator/buffer');\nrequire('./add/operator/bufferCount');\nrequire('./add/operator/bufferTime');\nrequire('./add/operator/bufferToggle');\nrequire('./add/operator/bufferWhen');\nrequire('./add/operator/catch');\nrequire('./add/operator/combineAll');\nrequire('./add/operator/combineLatest');\nrequire('./add/operator/concat');\nrequire('./add/operator/concatAll');\nrequire('./add/operator/concatMap');\nrequire('./add/operator/concatMapTo');\nrequire('./add/operator/count');\nrequire('./add/operator/dematerialize');\nrequire('./add/operator/debounce');\nrequire('./add/operator/debounceTime');\nrequire('./add/operator/defaultIfEmpty');\nrequire('./add/operator/delay');\nrequire('./add/operator/delayWhen');\nrequire('./add/operator/distinct');\nrequire('./add/operator/distinctUntilChanged');\nrequire('./add/operator/distinctUntilKeyChanged');\nrequire('./add/operator/do');\nrequire('./add/operator/exhaust');\nrequire('./add/operator/exhaustMap');\nrequire('./add/operator/expand');\nrequire('./add/operator/elementAt');\nrequire('./add/operator/filter');\nrequire('./add/operator/finally');\nrequire('./add/operator/find');\nrequire('./add/operator/findIndex');\nrequire('./add/operator/first');\nrequire('./add/operator/groupBy');\nrequire('./add/operator/ignoreElements');\nrequire('./add/operator/isEmpty');\nrequire('./add/operator/audit');\nrequire('./add/operator/auditTime');\nrequire('./add/operator/last');\nrequire('./add/operator/let');\nrequire('./add/operator/every');\nrequire('./add/operator/map');\nrequire('./add/operator/mapTo');\nrequire('./add/operator/materialize');\nrequire('./add/operator/max');\nrequire('./add/operator/merge');\nrequire('./add/operator/mergeAll');\nrequire('./add/operator/mergeMap');\nrequire('./add/operator/mergeMapTo');\nrequire('./add/operator/mergeScan');\nrequire('./add/operator/min');\nrequire('./add/operator/multicast');\nrequire('./add/operator/observeOn');\nrequire('./add/operator/onErrorResumeNext');\nrequire('./add/operator/pairwise');\nrequire('./add/operator/partition');\nrequire('./add/operator/pluck');\nrequire('./add/operator/publish');\nrequire('./add/operator/publishBehavior');\nrequire('./add/operator/publishReplay');\nrequire('./add/operator/publishLast');\nrequire('./add/operator/race');\nrequire('./add/operator/reduce');\nrequire('./add/operator/repeat');\nrequire('./add/operator/repeatWhen');\nrequire('./add/operator/retry');\nrequire('./add/operator/retryWhen');\nrequire('./add/operator/sample');\nrequire('./add/operator/sampleTime');\nrequire('./add/operator/scan');\nrequire('./add/operator/sequenceEqual');\nrequire('./add/operator/share');\nrequire('./add/operator/shareReplay');\nrequire('./add/operator/single');\nrequire('./add/operator/skip');\nrequire('./add/operator/skipLast');\nrequire('./add/operator/skipUntil');\nrequire('./add/operator/skipWhile');\nrequire('./add/operator/startWith');\nrequire('./add/operator/subscribeOn');\nrequire('./add/operator/switch');\nrequire('./add/operator/switchMap');\nrequire('./add/operator/switchMapTo');\nrequire('./add/operator/take');\nrequire('./add/operator/takeLast');\nrequire('./add/operator/takeUntil');\nrequire('./add/operator/takeWhile');\nrequire('./add/operator/throttle');\nrequire('./add/operator/throttleTime');\nrequire('./add/operator/timeInterval');\nrequire('./add/operator/timeout');\nrequire('./add/operator/timeoutWith');\nrequire('./add/operator/timestamp');\nrequire('./add/operator/toArray');\nrequire('./add/operator/toPromise');\nrequire('./add/operator/window');\nrequire('./add/operator/windowCount');\nrequire('./add/operator/windowTime');\nrequire('./add/operator/windowToggle');\nrequire('./add/operator/windowWhen');\nrequire('./add/operator/withLatestFrom');\nrequire('./add/operator/zip');\nrequire('./add/operator/zipAll');\n/* tslint:disable:no-unused-variable */\nvar Subscription_1 = require('./Subscription');\nexports.Subscription = Subscription_1.Subscription;\nvar Subscriber_1 = require('./Subscriber');\nexports.Subscriber = Subscriber_1.Subscriber;\nvar AsyncSubject_1 = require('./AsyncSubject');\nexports.AsyncSubject = AsyncSubject_1.AsyncSubject;\nvar ReplaySubject_1 = require('./ReplaySubject');\nexports.ReplaySubject = ReplaySubject_1.ReplaySubject;\nvar BehaviorSubject_1 = require('./BehaviorSubject');\nexports.BehaviorSubject = BehaviorSubject_1.BehaviorSubject;\nvar ConnectableObservable_1 = require('./observable/ConnectableObservable');\nexports.ConnectableObservable = ConnectableObservable_1.ConnectableObservable;\nvar Notification_1 = require('./Notification');\nexports.Notification = Notification_1.Notification;\nvar EmptyError_1 = require('./util/EmptyError');\nexports.EmptyError = EmptyError_1.EmptyError;\nvar ArgumentOutOfRangeError_1 = require('./util/ArgumentOutOfRangeError');\nexports.ArgumentOutOfRangeError = ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\nexports.ObjectUnsubscribedError = ObjectUnsubscribedError_1.ObjectUnsubscribedError;\nvar TimeoutError_1 = require('./util/TimeoutError');\nexports.TimeoutError = TimeoutError_1.TimeoutError;\nvar UnsubscriptionError_1 = require('./util/UnsubscriptionError');\nexports.UnsubscriptionError = UnsubscriptionError_1.UnsubscriptionError;\nvar timeInterval_1 = require('./operator/timeInterval');\nexports.TimeInterval = timeInterval_1.TimeInterval;\nvar timestamp_1 = require('./operators/timestamp');\nexports.Timestamp = timestamp_1.Timestamp;\nvar TestScheduler_1 = require('./testing/TestScheduler');\nexports.TestScheduler = TestScheduler_1.TestScheduler;\nvar VirtualTimeScheduler_1 = require('./scheduler/VirtualTimeScheduler');\nexports.VirtualTimeScheduler = VirtualTimeScheduler_1.VirtualTimeScheduler;\nvar AjaxObservable_1 = require('./observable/dom/AjaxObservable');\nexports.AjaxResponse = AjaxObservable_1.AjaxResponse;\nexports.AjaxError = AjaxObservable_1.AjaxError;\nexports.AjaxTimeoutError = AjaxObservable_1.AjaxTimeoutError;\nvar pipe_1 = require('./util/pipe');\nexports.pipe = pipe_1.pipe;\nvar asap_1 = require('./scheduler/asap');\nvar async_1 = require('./scheduler/async');\nvar queue_1 = require('./scheduler/queue');\nvar animationFrame_1 = require('./scheduler/animationFrame');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\nvar iterator_1 = require('./symbol/iterator');\nvar observable_1 = require('./symbol/observable');\nvar _operators = require('./operators');\nexports.operators = _operators;\n/* tslint:enable:no-unused-variable */\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.\n * Use this for synchronizing with the platform's painting\n */\nvar Scheduler = {\n    asap: asap_1.asap,\n    queue: queue_1.queue,\n    animationFrame: animationFrame_1.animationFrame,\n    async: async_1.async\n};\nexports.Scheduler = Scheduler;\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nvar Symbol = {\n    rxSubscriber: rxSubscriber_1.rxSubscriber,\n    observable: observable_1.observable,\n    iterator: iterator_1.iterator\n};\nexports.Symbol = Symbol;\n//# sourceMappingURL=Rx.js.map"],"sourceRoot":""}